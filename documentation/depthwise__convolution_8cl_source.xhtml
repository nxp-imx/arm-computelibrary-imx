<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/CL/cl_kernels/depthwise_convolution.cl Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">19.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('depthwise__convolution_8cl_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">depthwise_convolution.cl</div>  </div>
</div><!--header-->
<div class="contents">
<a href="depthwise__convolution_8cl.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2019 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml">helpers.h</a>&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#if defined(DEPTH_MULTIPLIER) &amp;&amp; defined(DST_CHANNELS)</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#if defined(CONV_STRIDE_X)</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#if CONV_STRIDE_X == 1</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#define convolution1x3 convolution1x3_stride_1</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#elif CONV_STRIDE_X == 2</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#define convolution1x3 convolution1x3_stride_2</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#elif CONV_STRIDE_X == 3</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#define convolution1x3 convolution1x3_stride_3</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#else </span><span class="comment">/* CONV_STRIDE_X */</span><span class="preprocessor"></span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#error &quot;Stride not supported&quot;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* CONV_STRIDE_X */</span><span class="preprocessor"></span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">inline</span> float2 convolution1x3_stride_1(__global <span class="keyword">const</span> uchar *left_pixel,</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                                      <span class="keyword">const</span> <span class="keywordtype">float</span>           left_coeff,</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                                      <span class="keyword">const</span> <span class="keywordtype">float</span>           middle_coeff,</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                                      <span class="keyword">const</span> <span class="keywordtype">float</span>           right_coeff)</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    float4 temp = vload4(0, (__global <span class="keywordtype">float</span> *)left_pixel);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    float2 left   = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(temp.s01, float2);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    float2 middle = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(temp.s12, float2);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    float2 right  = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(temp.s23, float2);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">return</span> left * (float2)left_coeff + middle * (float2)middle_coeff + right * (float2)right_coeff;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="keyword">inline</span> float2 convolution1x3_stride_2(__global <span class="keyword">const</span> uchar *left_pixel,</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                                      <span class="keyword">const</span> <span class="keywordtype">float</span>           left_coeff,</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                                      <span class="keyword">const</span> <span class="keywordtype">float</span>           middle_coeff,</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                                      <span class="keyword">const</span> <span class="keywordtype">float</span>           right_coeff)</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;{</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    float4 temp0 = vload4(0, (__global <span class="keywordtype">float</span> *)left_pixel);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordtype">float</span>  temp1 = *((__global <span class="keywordtype">float</span> *)(left_pixel + 4 * <span class="keyword">sizeof</span>(<span class="keywordtype">float</span>)));</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    float2 left   = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(temp0.s02, float2);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    float2 middle = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(temp0.s13, float2);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    float2 right  = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>((float2)(temp0.s2, temp1), float2);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">return</span> left * (float2)left_coeff + middle * (float2)middle_coeff + right * (float2)right_coeff;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;}</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="keyword">inline</span> float2 convolution1x3_stride_3(__global <span class="keyword">const</span> uchar *left_pixel,</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                                      <span class="keyword">const</span> <span class="keywordtype">float</span>           left_coeff,</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                                      <span class="keyword">const</span> <span class="keywordtype">float</span>           middle_coeff,</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                                      <span class="keyword">const</span> <span class="keywordtype">float</span>           right_coeff)</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;{</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    float4 temp0 = vload4(0, (__global <span class="keywordtype">float</span> *)left_pixel);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    float2 temp1 = vload2(0, (__global <span class="keywordtype">float</span> *)(left_pixel + 4 * <span class="keyword">sizeof</span>(<span class="keywordtype">float</span>)));</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    float2 left   = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(temp0.s03, float2);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    float2 middle = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>((float2)(temp0.s1, temp1.s0), float2);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    float2 right  = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>((float2)(temp0.s2, temp1.s1), float2);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordflow">return</span> left * (float2)left_coeff + middle * (float2)middle_coeff + right * (float2)right_coeff;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;}</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="keyword">inline</span> float2 <a class="code" href="convolution3x3_8cl.xhtml#afc5fefe72e66f0ae5191fd5b708fade9">convolution3x3</a>(</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>      *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>,</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> mat0, <span class="keyword">const</span> <span class="keywordtype">float</span> mat1, <span class="keyword">const</span> <span class="keywordtype">float</span> mat2,</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> mat3, <span class="keyword">const</span> <span class="keywordtype">float</span> mat4, <span class="keyword">const</span> <span class="keywordtype">float</span> mat5,</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> mat6, <span class="keyword">const</span> <span class="keywordtype">float</span> mat7, <span class="keyword">const</span> <span class="keywordtype">float</span> mat8)</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;{</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    float2 pixels;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    pixels = <a class="code" href="convolution3x3_8cl.xhtml#a92702074338198e81a46c3e309d9b04f">convolution1x3</a>(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>, 0, 0), mat0, mat1, mat2);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    pixels += <a class="code" href="convolution3x3_8cl.xhtml#a92702074338198e81a46c3e309d9b04f">convolution1x3</a>(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>, 0, 1), mat3, mat4, mat5);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    pixels += <a class="code" href="convolution3x3_8cl.xhtml#a92702074338198e81a46c3e309d9b04f">convolution1x3</a>(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>, 0, 2), mat6, mat7, mat8);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordflow">return</span> pixels;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;}</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;__kernel <span class="keywordtype">void</span> depthwise_convolution_3x3(</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>),</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>),</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>)</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    ,</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(biases)</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;#endif <span class="comment">//defined(HAS_BIAS)</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;)</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;{</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>     = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a541f8db866a0fa93ee67d58ea31a7d0c">CONVERT_TENSOR3D_TO_IMAGE_STRUCT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>     = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a541f8db866a0fa93ee67d58ea31a7d0c">CONVERT_TENSOR3D_TO_IMAGE_STRUCT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a> = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a79e8e562daa6599317d2d1cd86ef1bf2">CONVERT_TO_TENSOR3D_STRUCT_NO_STEP</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="preprocessor">#if defined(HAS_BIAS)</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a> biases = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a64d779f80eeb923e0ab2313433f7b40b">CONVERT_TO_VECTOR_STRUCT_NO_STEP</a>(biases);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="preprocessor">#endif //defined(HAS_BIAS)</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="comment">// Extract channel and linearized batch indices</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> channel = get_global_id(2) % DST_CHANNELS;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> batch   = get_global_id(2) / DST_CHANNELS;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="comment">// Load relevant input and weights data (Accounts depth multiplier when indexing input, OFM = IFM * DEPTH_MULTIPLIER)</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>.ptr -= batch * (DST_CHANNELS / DEPTH_MULTIPLIER) * (DEPTH_MULTIPLIER - 1) * src_step_z + (channel - (channel / DEPTH_MULTIPLIER)) * src_step_z;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    __global uchar *weights_addr = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.ptr + get_global_id(0) * weights_step_x + get_global_id(1) * weights_step_y + channel * weights_step_z;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    uchar3 <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>          = (uchar3)(0, 1, 2) * (uchar3)weights_stride_y;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    float3 weights_values0 = vload3(0, (__global <span class="keywordtype">float</span> *)(weights_addr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s0));</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    float3 weights_values1 = vload3(0, (__global <span class="keywordtype">float</span> *)(weights_addr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s1));</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    float3 weights_values2 = vload3(0, (__global <span class="keywordtype">float</span> *)(weights_addr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s2));</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    float2 pixels = <a class="code" href="convolution3x3_8cl.xhtml#afc5fefe72e66f0ae5191fd5b708fade9">convolution3x3</a>(&amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>, weights_values0.s0, weights_values0.s1, weights_values0.s2,</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                                   weights_values1.s0, weights_values1.s1, weights_values1.s2,</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                                   weights_values2.s0, weights_values2.s1, weights_values2.s2);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="preprocessor">#if defined(HAS_BIAS)</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    pixels += (float2)(*((__global <span class="keywordtype">float</span> *)(biases.ptr + channel * biases_stride_x)));</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="preprocessor">#endif //defined(HAS_BIAS)</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    vstore2(pixels, 0, (__global <span class="keywordtype">float</span> *)<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;}</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="preprocessor">#endif //defined(CONV_STRIDE_X)</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="preprocessor">#define CONVOLUTION1x3_BIFROST2X1_STRIDE1(acc, src0, weights_row0) \</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="preprocessor">    ({                                                             \</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="preprocessor">        acc.s0 = fma(src0.s0, weights_row0.s0, acc.s0);            \</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="preprocessor">        acc.s0 = fma(src0.s1, weights_row0.s1, acc.s0);            \</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="preprocessor">        acc.s0 = fma(src0.s2, weights_row0.s2, acc.s0);            \</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="preprocessor">        acc.s1 = fma(src0.s1, weights_row0.s0, acc.s1);            \</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="preprocessor">        acc.s1 = fma(src0.s2, weights_row0.s1, acc.s1);            \</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="preprocessor">        acc.s1 = fma(src0.s3, weights_row0.s2, acc.s1);            \</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="preprocessor">#define CONVOLUTION1x3_BIFROST4X1_STRIDE1(acc, src0, weights_row0) \</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="preprocessor">    ({                                                             \</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="preprocessor">        acc.s0 = fma(src0.s0, weights_row0.s0, acc.s0);            \</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="preprocessor">        acc.s0 = fma(src0.s1, weights_row0.s1, acc.s0);            \</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="preprocessor">        acc.s0 = fma(src0.s2, weights_row0.s2, acc.s0);            \</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="preprocessor">        acc.s1 = fma(src0.s1, weights_row0.s0, acc.s1);            \</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="preprocessor">        acc.s1 = fma(src0.s2, weights_row0.s1, acc.s1);            \</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="preprocessor">        acc.s1 = fma(src0.s3, weights_row0.s2, acc.s1);            \</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="preprocessor">        acc.s2 = fma(src0.s2, weights_row0.s0, acc.s2);            \</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="preprocessor">        acc.s2 = fma(src0.s3, weights_row0.s1, acc.s2);            \</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="preprocessor">        acc.s2 = fma(src0.s4, weights_row0.s2, acc.s2);            \</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="preprocessor">        acc.s3 = fma(src0.s3, weights_row0.s0, acc.s3);            \</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="preprocessor">        acc.s3 = fma(src0.s4, weights_row0.s1, acc.s3);            \</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="preprocessor">        acc.s3 = fma(src0.s5, weights_row0.s2, acc.s3);            \</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="preprocessor">#define CONVOLUTION1x3_BIFROST2X1_STRIDE2(acc, src0, src1, weights_row0) \</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="preprocessor">    ({                                                                   \</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="preprocessor">        acc.s0 = fma(src0.s0, weights_row0.s0, acc.s0);                  \</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="preprocessor">        acc.s0 = fma(src0.s1, weights_row0.s1, acc.s0);                  \</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="preprocessor">        acc.s0 = fma(src0.s2, weights_row0.s2, acc.s0);                  \</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="preprocessor">        acc.s1 = fma(src0.s2, weights_row0.s0, acc.s1);                  \</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="preprocessor">        acc.s1 = fma(src0.s3, weights_row0.s1, acc.s1);                  \</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="preprocessor">        acc.s1 = fma(src1.s0, weights_row0.s2, acc.s1);                  \</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="preprocessor">#define CONVOLUTION1x3_BIFROST4X1_STRIDE2(acc, src0, src1, weights_row0) \</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="preprocessor">    ({                                                                   \</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="preprocessor">        acc.s0 = fma(src0.s0, weights_row0.s0, acc.s0);                  \</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="preprocessor">        acc.s0 = fma(src0.s1, weights_row0.s1, acc.s0);                  \</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="preprocessor">        acc.s0 = fma(src0.s2, weights_row0.s2, acc.s0);                  \</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="preprocessor">        acc.s1 = fma(src0.s2, weights_row0.s0, acc.s1);                  \</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="preprocessor">        acc.s1 = fma(src0.s3, weights_row0.s1, acc.s1);                  \</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="preprocessor">        acc.s1 = fma(src0.s4, weights_row0.s2, acc.s1);                  \</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="preprocessor">        acc.s2 = fma(src0.s4, weights_row0.s0, acc.s2);                  \</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="preprocessor">        acc.s2 = fma(src0.s5, weights_row0.s1, acc.s2);                  \</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="preprocessor">        acc.s2 = fma(src0.s6, weights_row0.s2, acc.s2);                  \</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="preprocessor">        acc.s3 = fma(src0.s6, weights_row0.s0, acc.s3);                  \</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="preprocessor">        acc.s3 = fma(src0.s7, weights_row0.s1, acc.s3);                  \</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="preprocessor">        acc.s3 = fma(src1.s0, weights_row0.s2, acc.s3);                  \</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;__kernel <span class="keywordtype">void</span> depthwise_convolution_3x3_stridex1_stridey1_bifrost_f32(</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>),</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>),</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>)</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    ,</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(biases)</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;#endif <span class="comment">//defined(HAS_BIAS)</span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;)</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;{</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>     = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a541f8db866a0fa93ee67d58ea31a7d0c">CONVERT_TENSOR3D_TO_IMAGE_STRUCT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>);</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>     = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a541f8db866a0fa93ee67d58ea31a7d0c">CONVERT_TENSOR3D_TO_IMAGE_STRUCT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a> = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a79e8e562daa6599317d2d1cd86ef1bf2">CONVERT_TO_TENSOR3D_STRUCT_NO_STEP</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>);</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    float2 pixels0 = 0.0f;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    float2 pixels1 = 0.0f;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    float2 pixels2 = 0.0f;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    float2 pixels3 = 0.0f;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="comment">// Extract channel and linearized batch indices</span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> channel = get_global_id(2) % DST_CHANNELS;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> batch   = get_global_id(2) / DST_CHANNELS;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="comment">// Load relevant input and weights data (Accounts depth multiplier when indexing input, OFM = IFM * DEPTH_MULTIPLIER)</span></div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    __global uchar *weights_addr = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.ptr + get_global_id(0) * weights_step_x + get_global_id(1) * weights_step_y + channel * weights_step_z;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    __global uchar *src_addr     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>.ptr - batch * (DST_CHANNELS / DEPTH_MULTIPLIER) * (DEPTH_MULTIPLIER - 1) * src_step_z - (channel - (channel / DEPTH_MULTIPLIER)) * src_step_z;</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <span class="comment">// Load the weights</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    float3 weights_row0 = vload3(0, (__global <span class="keywordtype">float</span> *)(weights_addr + 0 * weights_stride_y));</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    float3 weights_row1 = vload3(0, (__global <span class="keywordtype">float</span> *)(weights_addr + 1 * weights_stride_y));</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    float3 weights_row2 = vload3(0, (__global <span class="keywordtype">float</span> *)(weights_addr + 2 * weights_stride_y));</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="comment">// Note: Since each work-item computes 4x2 elements, we need to load 6 rows from the input tensor</span></div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    float4 src00 = vload4(0, (__global <span class="keywordtype">float</span> *)(src_addr + 0 * src_stride_y)); <span class="comment">// Row0</span></div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    float4 src10 = vload4(0, (__global <span class="keywordtype">float</span> *)(src_addr + 1 * src_stride_y)); <span class="comment">// Row1</span></div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    float4 src20 = vload4(0, (__global <span class="keywordtype">float</span> *)(src_addr + 2 * src_stride_y)); <span class="comment">// Row2</span></div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    float4 src30 = vload4(0, (__global <span class="keywordtype">float</span> *)(src_addr + 3 * src_stride_y)); <span class="comment">// Row3</span></div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    float4 src40 = vload4(0, (__global <span class="keywordtype">float</span> *)(src_addr + 4 * src_stride_y)); <span class="comment">// Row4</span></div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    float4 src50 = vload4(0, (__global <span class="keywordtype">float</span> *)(src_addr + 5 * src_stride_y)); <span class="comment">// Row5</span></div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE1(pixels0, src00, weights_row0);</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE1(pixels0, src10, weights_row1);</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE1(pixels0, src20, weights_row2);</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE1(pixels1, src10, weights_row0);</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE1(pixels1, src20, weights_row1);</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE1(pixels1, src30, weights_row2);</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE1(pixels2, src20, weights_row0);</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE1(pixels2, src30, weights_row1);</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE1(pixels2, src40, weights_row2);</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE1(pixels3, src30, weights_row0);</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE1(pixels3, src40, weights_row1);</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE1(pixels3, src50, weights_row2);</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="preprocessor">#ifdef HAS_BIAS</span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a> biases = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a64d779f80eeb923e0ab2313433f7b40b">CONVERT_TO_VECTOR_STRUCT_NO_STEP</a>(biases);</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3a77be8aebd8e00522b32061d46ccdbd">bias</a> = *((__global <span class="keywordtype">float</span> *)(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a7e4940407322d6f0ccb8b6b86b856019">vector_offset</a>(&amp;biases, channel)));</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    pixels0 += (float2)<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3a77be8aebd8e00522b32061d46ccdbd">bias</a>;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    pixels1 += (float2)<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3a77be8aebd8e00522b32061d46ccdbd">bias</a>;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    pixels2 += (float2)<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3a77be8aebd8e00522b32061d46ccdbd">bias</a>;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    pixels3 += (float2)<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3a77be8aebd8e00522b32061d46ccdbd">bias</a>;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(HAS_BIAS) */</span><span class="preprocessor"></span></div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    vstore2(pixels0, 0, (__global <span class="keywordtype">float</span> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr + 0 * dst_stride_y));</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    vstore2(pixels1, 0, (__global <span class="keywordtype">float</span> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr + 1 * dst_stride_y));</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    vstore2(pixels2, 0, (__global <span class="keywordtype">float</span> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr + 2 * dst_stride_y));</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    vstore2(pixels3, 0, (__global <span class="keywordtype">float</span> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr + 3 * dst_stride_y));</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;}</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;__kernel <span class="keywordtype">void</span> depthwise_convolution_3x3_stridex2_stridey2_bifrost_f32(</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>),</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>),</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>)</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    ,</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(biases)</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;#endif <span class="comment">//defined(HAS_BIAS)</span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;)</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;{</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>     = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a541f8db866a0fa93ee67d58ea31a7d0c">CONVERT_TENSOR3D_TO_IMAGE_STRUCT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>);</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>     = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a541f8db866a0fa93ee67d58ea31a7d0c">CONVERT_TENSOR3D_TO_IMAGE_STRUCT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a> = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a79e8e562daa6599317d2d1cd86ef1bf2">CONVERT_TO_TENSOR3D_STRUCT_NO_STEP</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>);</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    float2 pixels0 = 0.0f;</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    float2 pixels1 = 0.0f;</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    <span class="comment">// Extract channel and linearized batch indices</span></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> channel = get_global_id(2) % DST_CHANNELS;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> batch   = get_global_id(2) / DST_CHANNELS;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="comment">// Load relevant input and weights data (Accounts depth multiplier when indexing input, OFM = IFM * DEPTH_MULTIPLIER)</span></div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    __global uchar *weights_addr = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.ptr + get_global_id(0) * weights_step_x + get_global_id(1) * weights_step_y + channel * weights_step_z;</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    __global uchar *src_addr     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>.ptr - batch * (DST_CHANNELS / DEPTH_MULTIPLIER) * (DEPTH_MULTIPLIER - 1) * src_step_z - (channel - (channel / DEPTH_MULTIPLIER)) * src_step_z;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <span class="comment">// Load the weights</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    float3 weights_row0 = vload3(0, (__global <span class="keywordtype">float</span> *)(weights_addr + 0 * weights_stride_y));</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    float3 weights_row1 = vload3(0, (__global <span class="keywordtype">float</span> *)(weights_addr + 1 * weights_stride_y));</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    float3 weights_row2 = vload3(0, (__global <span class="keywordtype">float</span> *)(weights_addr + 2 * weights_stride_y));</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    <span class="comment">// Note: Since each work-item computes 4x2 elements, we need to load 5 rows from the input tensor</span></div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    float4 src00 = vload4(0, (__global <span class="keywordtype">float</span> *)(src_addr + 0 * src_stride_y)); <span class="comment">// Row0</span></div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    float2 src01 = vload2(2, (__global <span class="keywordtype">float</span> *)(src_addr + 0 * src_stride_y)); <span class="comment">// Row0</span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    float4 src10 = vload4(0, (__global <span class="keywordtype">float</span> *)(src_addr + 1 * src_stride_y)); <span class="comment">// Row1</span></div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    float2 src11 = vload2(2, (__global <span class="keywordtype">float</span> *)(src_addr + 1 * src_stride_y)); <span class="comment">// Row1</span></div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    float4 src20 = vload4(0, (__global <span class="keywordtype">float</span> *)(src_addr + 2 * src_stride_y)); <span class="comment">// Row2</span></div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    float2 src21 = vload2(2, (__global <span class="keywordtype">float</span> *)(src_addr + 2 * src_stride_y)); <span class="comment">// Row2</span></div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    float4 src30 = vload4(0, (__global <span class="keywordtype">float</span> *)(src_addr + 3 * src_stride_y)); <span class="comment">// Row3</span></div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    float2 src31 = vload2(2, (__global <span class="keywordtype">float</span> *)(src_addr + 3 * src_stride_y)); <span class="comment">// Row3</span></div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    float4 src40 = vload4(0, (__global <span class="keywordtype">float</span> *)(src_addr + 4 * src_stride_y)); <span class="comment">// Row4</span></div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    float2 src41 = vload2(2, (__global <span class="keywordtype">float</span> *)(src_addr + 4 * src_stride_y)); <span class="comment">// Row4</span></div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE2(pixels0, src00, src01, weights_row0);</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE2(pixels0, src10, src11, weights_row1);</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE2(pixels0, src20, src21, weights_row2);</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE2(pixels1, src20, src21, weights_row0);</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE2(pixels1, src30, src31, weights_row1);</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE2(pixels1, src40, src41, weights_row2);</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;<span class="preprocessor">#ifdef HAS_BIAS</span></div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a> biases = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a64d779f80eeb923e0ab2313433f7b40b">CONVERT_TO_VECTOR_STRUCT_NO_STEP</a>(biases);</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3a77be8aebd8e00522b32061d46ccdbd">bias</a> = *((__global <span class="keywordtype">float</span> *)(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a7e4940407322d6f0ccb8b6b86b856019">vector_offset</a>(&amp;biases, channel)));</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    pixels0 += (float2)<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3a77be8aebd8e00522b32061d46ccdbd">bias</a>;</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    pixels1 += (float2)<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3a77be8aebd8e00522b32061d46ccdbd">bias</a>;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(HAS_BIAS) */</span><span class="preprocessor"></span></div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    vstore2(pixels0, 0, (__global <span class="keywordtype">float</span> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr + 0 * dst_stride_y));</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    vstore2(pixels1, 0, (__global <span class="keywordtype">float</span> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr + 1 * dst_stride_y));</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;}</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;<span class="preprocessor">#endif // defined(DEPTH_MULTIPLIER) &amp;&amp; defined(DST_CHANNELS)</span></div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;<span class="preprocessor">#if defined(VEC_SIZE) &amp;&amp; defined(DATA_TYPE) &amp;&amp; defined(DST_WIDTH)</span></div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;__kernel <span class="keywordtype">void</span> depthwise_convolution_reshape_weights(</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>),</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>))</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;{</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a>    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a> = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a527bfdf5eeb306f1cf01c4a8e29f38e0">CONVERT_TO_VECTOR_STRUCT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>);</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> x   = get_global_id(0);</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    <span class="comment">// Load 3x3xVEC_SIZE weights</span></div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>, VEC_SIZE)</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    w0 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>.ptr + 0 * src_stride_y + 0 * src_stride_z);</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>, VEC_SIZE)</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    w1 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>.ptr + 1 * src_stride_y + 0 * src_stride_z);</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>, VEC_SIZE)</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    w2 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>.ptr + 2 * src_stride_y + 0 * src_stride_z);</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>, VEC_SIZE)</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    w3 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>.ptr + 0 * src_stride_y + 1 * src_stride_z);</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>, VEC_SIZE)</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    w4 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>.ptr + 1 * src_stride_y + 1 * src_stride_z);</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>, VEC_SIZE)</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    w5 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>.ptr + 2 * src_stride_y + 1 * src_stride_z);</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>, VEC_SIZE)</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    w6 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>.ptr + 0 * src_stride_y + 2 * src_stride_z);</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>, VEC_SIZE)</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    w7 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>.ptr + 1 * src_stride_y + 2 * src_stride_z);</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>, VEC_SIZE)</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    w8 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>.ptr + 2 * src_stride_y + 2 * src_stride_z);</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    __global uchar *dst_addr = dst_ptr + dst_offset_first_element_in_bytes + x * DST_WIDTH * <span class="keyword">sizeof</span>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>);</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;<span class="preprocessor">#if defined(TRANSPOSE)</span></div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;<span class="preprocessor">#if VEC_SIZE != 4</span></div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;<span class="preprocessor">#error &quot;VEC_SIZE not supported&quot;</span></div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;<span class="preprocessor">#else  // VEC_SIZE != 4</span></div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(VEC_SIZE)</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    ((<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>, VEC_SIZE))(w0.s0, w1.s0, w2.s0, w3.s0), 0, dst_addr + 0);</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(VEC_SIZE)</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    ((<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>, VEC_SIZE))(w4.s0, w5.s0, w6.s0, w7.s0), 0, dst_addr + 1 * <span class="keyword">sizeof</span>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>) * VEC_SIZE);</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(VEC_SIZE)</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    ((<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>, VEC_SIZE))(w8.s0, w0.s1, w1.s1, w2.s1), 0, dst_addr + 2 * <span class="keyword">sizeof</span>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>) * VEC_SIZE);</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(VEC_SIZE)</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    ((<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>, VEC_SIZE))(w3.s1, w4.s1, w5.s1, w6.s1), 0, dst_addr + 3 * <span class="keyword">sizeof</span>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>) * VEC_SIZE);</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(VEC_SIZE)</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    ((<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>, VEC_SIZE))(w7.s1, w8.s1, w0.s2, w1.s2), 0, dst_addr + 4 * <span class="keyword">sizeof</span>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>) * VEC_SIZE);</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(VEC_SIZE)</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    ((<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>, VEC_SIZE))(w2.s2, w3.s2, w4.s2, w5.s2), 0, dst_addr + 5 * <span class="keyword">sizeof</span>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>) * VEC_SIZE);</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(VEC_SIZE)</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    ((<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>, VEC_SIZE))(w6.s2, w7.s2, w8.s2, w0.s3), 0, dst_addr + 6 * <span class="keyword">sizeof</span>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>) * VEC_SIZE);</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(VEC_SIZE)</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    ((<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>, VEC_SIZE))(w1.s3, w2.s3, w3.s3, w4.s3), 0, dst_addr + 7 * <span class="keyword">sizeof</span>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>) * VEC_SIZE);</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(VEC_SIZE)</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    ((<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>, VEC_SIZE))(w5.s3, w6.s3, w7.s3, w8.s3), 0, dst_addr + 8 * <span class="keyword">sizeof</span>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>) * VEC_SIZE);</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;<span class="preprocessor">#endif // VEC_SIZE != 4</span></div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;<span class="preprocessor">#else  // !defined(TRANSPOSE)</span></div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(VEC_SIZE)</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    (w0, 0, dst_addr + 0);</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(VEC_SIZE)</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    (w1, 0, dst_addr + 1 * <span class="keyword">sizeof</span>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>) * VEC_SIZE);</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(VEC_SIZE)</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    (w2, 0, dst_addr + 2 * <span class="keyword">sizeof</span>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>) * VEC_SIZE);</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(VEC_SIZE)</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    (w3, 0, dst_addr + 3 * <span class="keyword">sizeof</span>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>) * VEC_SIZE);</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(VEC_SIZE)</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    (w4, 0, dst_addr + 4 * <span class="keyword">sizeof</span>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>) * VEC_SIZE);</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(VEC_SIZE)</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    (w5, 0, dst_addr + 5 * <span class="keyword">sizeof</span>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>) * VEC_SIZE);</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(VEC_SIZE)</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    (w6, 0, dst_addr + 6 * <span class="keyword">sizeof</span>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>) * VEC_SIZE);</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(VEC_SIZE)</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    (w7, 0, dst_addr + 7 * <span class="keyword">sizeof</span>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>) * VEC_SIZE);</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(VEC_SIZE)</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    (w8, 0, dst_addr + 8 * <span class="keyword">sizeof</span>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>) * VEC_SIZE);</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;<span class="preprocessor">#endif // defined(TRANSPOSE)</span></div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;}</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;<span class="preprocessor">#endif // defined(VEC_SIZE) &amp;&amp; defined(DATA_TYPE) &amp;&amp; defined(DST_WIDTH)</span></div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;<span class="preprocessor">#if defined(NCHW)</span></div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;<span class="preprocessor">#define in_stride_x src_stride_x</span></div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;<span class="preprocessor">#define in_stride_y src_stride_y</span></div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;<span class="preprocessor">#define in_stride_z src_stride_z</span></div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;<span class="preprocessor">#define out_stride_x dst_stride_x</span></div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;<span class="preprocessor">#define out_stride_y dst_stride_y</span></div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;<span class="preprocessor">#define out_stride_z dst_stride_z</span></div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;<span class="preprocessor">#else //defined(NCHW)</span></div><div class="line"><a name="l00573"></a><span class="lineno"><a class="line" href="depthwise__convolution_8cl.xhtml#a5447e2c4e1aae8fff9290b775fe813ff">  573</a></span>&#160;<span class="preprocessor">#define in_stride_x src_stride_y</span></div><div class="line"><a name="l00574"></a><span class="lineno"><a class="line" href="depthwise__convolution_8cl.xhtml#ac353c0687abd8c71a4fa096d322b39ec">  574</a></span>&#160;<span class="preprocessor">#define in_stride_y src_stride_z</span></div><div class="line"><a name="l00575"></a><span class="lineno"><a class="line" href="depthwise__convolution_8cl.xhtml#a32137dd220c1110408a7b498108de2c5">  575</a></span>&#160;<span class="preprocessor">#define in_stride_z src_stride_x</span></div><div class="line"><a name="l00576"></a><span class="lineno"><a class="line" href="depthwise__convolution_8cl.xhtml#a68fce1f0ee4080ed89c9427496d625f2">  576</a></span>&#160;<span class="preprocessor">#define out_stride_x dst_stride_y</span></div><div class="line"><a name="l00577"></a><span class="lineno"><a class="line" href="depthwise__convolution_8cl.xhtml#ac8b6b732372937bba276e6391944d1e1">  577</a></span>&#160;<span class="preprocessor">#define out_stride_y dst_stride_z</span></div><div class="line"><a name="l00578"></a><span class="lineno"><a class="line" href="depthwise__convolution_8cl.xhtml#a128f47cb6aacde29e07fde2c4b9f5dd2">  578</a></span>&#160;<span class="preprocessor">#define out_stride_z dst_stride_x</span></div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;<span class="preprocessor">#endif //defined(NCHW)</span></div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;<span class="preprocessor">#if defined(SRC_WIDTH) &amp;&amp; defined(DATA_TYPE)</span></div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;__kernel <span class="keywordtype">void</span> depthwise_convolution_reshape_weights_generic(</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>),</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;#ifdef HAS_BIAS</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    ,</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(biases)</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;#endif <span class="comment">/* HAS_BIAS */</span></div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;)</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;{</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;<span class="preprocessor">#ifdef HAS_BIAS</span></div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a> biases = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a64d779f80eeb923e0ab2313433f7b40b">CONVERT_TO_VECTOR_STRUCT_NO_STEP</a>(biases);</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* HAS_BIAS */</span><span class="preprocessor"></span></div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    __global uchar *input_ptr  = src_ptr + src_offset_first_element_in_bytes + get_global_id(1) * <a class="code" href="depthwise__convolution_8cl.xhtml#ac353c0687abd8c71a4fa096d322b39ec">in_stride_y</a> + get_global_id(2) * <a class="code" href="depthwise__convolution_8cl.xhtml#a32137dd220c1110408a7b498108de2c5">in_stride_z</a>;</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    __global uchar *output_ptr = dst_ptr + dst_offset_first_element_in_bytes + get_global_id(1) * SRC_WIDTH * dst_stride_x + get_global_id(2) * dst_stride_y;</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; SRC_WIDTH; ++i, input_ptr += <a class="code" href="depthwise__convolution_8cl.xhtml#a5447e2c4e1aae8fff9290b775fe813ff">in_stride_x</a>)</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    {</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;        *((__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(output_ptr + i * dst_stride_x)) = *((__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)input_ptr);</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    }</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;<span class="preprocessor">#if defined(HAS_BIAS)</span></div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    <span class="keywordflow">if</span>(get_global_id(1) == 0)</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    {</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;        *((__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(output_ptr + SRC_WIDTH * get_global_size(1) * dst_stride_x)) = *((__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(biases.<a class="code" href="struct_vector.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + get_global_id(2) * biases_stride_x));</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    }</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;<span class="preprocessor">#endif // defined(HAS_BIAS)</span></div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;}</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;<span class="preprocessor">#endif //defined(SRC_WIDTH) &amp;&amp; defined(DATA_TYPE)</span></div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;<span class="preprocessor">#if defined(STRIDE_X) &amp;&amp; defined(STRIDE_Y) &amp;&amp; defined(PAD_LEFT) &amp;&amp; defined(PAD_TOP) &amp;&amp; defined(PAD_RIGHT) &amp;&amp; defined(PAD_BOTTOM) &amp;&amp; defined(KERNEL_WIDTH) &amp;&amp; defined(KERNEL_HEIGHT) &amp;&amp; defined(SRC_WIDTH) &amp;&amp; defined(SRC_HEIGHT) &amp;&amp; defined(DATA_TYPE) &amp;&amp; defined(PAD_VALUE) &amp;&amp; defined(DEPTH_MULTIPLIER)</span></div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;__kernel <span class="keywordtype">void</span> depthwise_im2col(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>))</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;{</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a> = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> src_pixel_linear = get_global_id(1) * STRIDE_X;</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> full_length      = SRC_WIDTH + PAD_LEFT + PAD_RIGHT;</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> max_initial_x    = STRIDE_X * (((full_length - KERNEL_WIDTH) / STRIDE_X) + 1);</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> src_x = -PAD_LEFT + src_pixel_linear % max_initial_x;</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> src_y = -PAD_TOP + src_pixel_linear / max_initial_x * STRIDE_Y;</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> src_z = get_global_id(2) / DEPTH_MULTIPLIER;</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    __global uchar *input_ptr      = src_ptr + src_offset_first_element_in_bytes + src_z * <a class="code" href="depthwise__convolution_8cl.xhtml#a32137dd220c1110408a7b498108de2c5">in_stride_z</a>;</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    __global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *output_ptr = ((__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr));</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = src_y; y &lt; src_y + KERNEL_HEIGHT; ++y)</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    {</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = src_x; x &lt; src_x + KERNEL_WIDTH; ++x, ++output_ptr)</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;        {</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;            <span class="keywordflow">if</span>(x &lt; 0 || x &gt;= SRC_WIDTH || y &lt; 0 || y &gt;= SRC_HEIGHT)</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;            {</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;                *output_ptr = PAD_VALUE;</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;            }</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;            {</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;                *output_ptr = *((__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(input_ptr + x * <a class="code" href="depthwise__convolution_8cl.xhtml#a5447e2c4e1aae8fff9290b775fe813ff">in_stride_x</a> + y * <a class="code" href="depthwise__convolution_8cl.xhtml#ac353c0687abd8c71a4fa096d322b39ec">in_stride_y</a>));</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;            }</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;        }</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    }</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;<span class="preprocessor">#if defined(HAS_BIAS)</span></div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    *output_ptr = (<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>)(1);</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;<span class="preprocessor">#endif // defined(HAS_BIAS)</span></div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;}</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;<span class="preprocessor">#endif //defined(STRIDE_X) &amp;&amp; defined(STRIDE_Y) &amp;&amp; defined(PAD_LEFT) &amp;&amp; defined(PAD_TOP) &amp;&amp; defined(PAD_RIGHT) &amp;&amp; defined(PAD_BOTTOM) &amp;&amp; defined(KERNEL_WIDTH) &amp;&amp; defined(KERNEL_HEIGHT) &amp;&amp; defined(SRC_WIDTH) &amp;&amp; defined(DATA_TYPE) &amp;&amp; defined(PAD_VALUE) &amp;&amp; defined(DEPTH_MULTIPLIER)</span></div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;<span class="preprocessor">#if defined(CONV_WIDTH) &amp;&amp; defined(CONV_HEIGHT) &amp;&amp; defined(DATA_TYPE)</span></div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;__kernel <span class="keywordtype">void</span> depthwise_vector_to_tensor(</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>),</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>))</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;{</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a> = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a527bfdf5eeb306f1cf01c4a8e29f38e0">CONVERT_TO_VECTOR_STRUCT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>);</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> patch_size = CONV_WIDTH * CONV_HEIGHT;</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> id0        = get_global_id(0);</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> z          = id0 / patch_size;</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> index2D    = id0 - z * patch_size;</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    __global uchar *out_ptr          = dst_ptr + dst_offset_first_element_in_bytes + index2D % CONV_WIDTH * <a class="code" href="depthwise__convolution_8cl.xhtml#a68fce1f0ee4080ed89c9427496d625f2">out_stride_x</a> + index2D / CONV_WIDTH * <a class="code" href="depthwise__convolution_8cl.xhtml#ac8b6b732372937bba276e6391944d1e1">out_stride_y</a> + z * <a class="code" href="depthwise__convolution_8cl.xhtml#a128f47cb6aacde29e07fde2c4b9f5dd2">out_stride_z</a>;</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    *((__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)out_ptr) = *((__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>.ptr);</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;}</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;<span class="preprocessor">#endif //defined(CONV_WIDTH) &amp;&amp; defined(CONV_HEIGHT) &amp;&amp; defined(DATA_TYPE)</span></div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;<span class="preprocessor">#if defined(ARM_COMPUTE_OPENCL_FP16_ENABLED) &amp;&amp; defined(DEPTH_MULTIPLIER) &amp;&amp; defined(DST_CHANNELS)</span></div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;<span class="preprocessor">#if defined(CONV_STRIDE_X)</span></div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;<span class="preprocessor">#if CONV_STRIDE_X == 1</span></div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;<span class="preprocessor">#define convolution1x3_f16 convolution1x3_stride_1_f16</span></div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;<span class="preprocessor">#elif CONV_STRIDE_X == 2</span></div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;<span class="preprocessor">#define convolution1x3_f16 convolution1x3_stride_2_f16</span></div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;<span class="preprocessor">#elif CONV_STRIDE_X == 3</span></div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;<span class="preprocessor">#define convolution1x3_f16 convolution1x3_stride_3_f16</span></div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;<span class="preprocessor">#else </span><span class="comment">/* CONV_STRIDE_X */</span><span class="preprocessor"></span></div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;<span class="preprocessor">#error &quot;Stride not supported&quot;</span></div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* CONV_STRIDE_X */</span><span class="preprocessor"></span></div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;<span class="keyword">inline</span> half4 convolution1x3_stride_1_f16(__global <span class="keyword">const</span> uchar *left_pixel,</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>            left_coeff,</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>            middle_coeff,</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>            right_coeff)</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;{</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    half8 temp = vload8(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)left_pixel);</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;    half4 left   = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(temp.s0123, half4);</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;    half4 middle = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(temp.s1234, half4);</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;    half4 right  = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(temp.s2345, half4);</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    <span class="keywordflow">return</span> left * (half4)left_coeff + middle * (half4)middle_coeff + right * (half4)right_coeff;</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;}</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;<span class="keyword">inline</span> half4 convolution1x3_stride_2_f16(__global <span class="keyword">const</span> uchar *left_pixel,</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>            left_coeff,</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>            middle_coeff,</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>            right_coeff)</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;{</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;    half8 temp0 = vload8(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)left_pixel);</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> temp1  = *((__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(left_pixel + 8 * <span class="keyword">sizeof</span>(<a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>)));</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    half4 left   = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(temp0.s0246, half4);</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;    half4 middle = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(temp0.s1357, half4);</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;    half4 right  = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>((half4)(temp0.s246, temp1), half4);</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;    <span class="keywordflow">return</span> left * (half4)left_coeff + middle * (half4)middle_coeff + right * (half4)right_coeff;</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;}</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;<span class="keyword">inline</span> half4 convolution1x3_stride_3_f16(__global <span class="keyword">const</span> uchar *left_pixel,</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>            left_coeff,</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>            middle_coeff,</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>            right_coeff)</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;{</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;    half16 temp0 = vload16(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)left_pixel);</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;    half4 left   = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(temp0.s0369, half4);</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;    half4 middle = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(temp0.s147A, half4);</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;    half4 right  = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(temp0.s258B, half4);</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;    <span class="keywordflow">return</span> left * (half4)left_coeff + middle * (half4)middle_coeff + right * (half4)right_coeff;</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;}</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;<span class="keyword">inline</span> half4 convolution3x3_f16(</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>     *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>,</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> mat0, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> mat1, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> mat2,</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> mat3, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> mat4, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> mat5,</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> mat6, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> mat7, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> mat8)</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;{</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;    half4 pixels;</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;    pixels = convolution1x3_f16(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>, 0, 0), mat0, mat1, mat2);</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;    pixels += convolution1x3_f16(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>, 0, 1), mat3, mat4, mat5);</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;    pixels += convolution1x3_f16(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>, 0, 2), mat6, mat7, mat8);</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;    <span class="keywordflow">return</span> pixels;</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;}</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;<span class="preprocessor">#if defined(DEPTH_MULTIPLIER)</span></div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;__kernel <span class="keywordtype">void</span> depthwise_convolution_3x3_f16(</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>),</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>),</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>)</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;    ,</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(biases)</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;#endif <span class="comment">//defined(HAS_BIAS)</span></div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;)</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;{</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>     = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a541f8db866a0fa93ee67d58ea31a7d0c">CONVERT_TENSOR3D_TO_IMAGE_STRUCT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>);</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>     = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a541f8db866a0fa93ee67d58ea31a7d0c">CONVERT_TENSOR3D_TO_IMAGE_STRUCT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a> = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a79e8e562daa6599317d2d1cd86ef1bf2">CONVERT_TO_TENSOR3D_STRUCT_NO_STEP</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>);</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;<span class="preprocessor">#if defined(HAS_BIAS)</span></div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a> biases = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a64d779f80eeb923e0ab2313433f7b40b">CONVERT_TO_VECTOR_STRUCT_NO_STEP</a>(biases);</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;<span class="preprocessor">#endif //defined(HAS_BIAS)</span></div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;    <span class="comment">// Extract channel and linearized batch indices</span></div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> channel = get_global_id(2) % DST_CHANNELS;</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> batch   = get_global_id(2) / DST_CHANNELS;</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;    <span class="comment">// Load relevant input and weights data (Accounts depth multiplier when indexing input, OFM = IFM * DEPTH_MULTIPLIER)</span></div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>.ptr -= batch * (DST_CHANNELS / DEPTH_MULTIPLIER) * (DEPTH_MULTIPLIER - 1) * src_step_z + (channel - (channel / DEPTH_MULTIPLIER)) * src_step_z;</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;    __global uchar *weights_addr = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.ptr + get_global_id(0) * weights_step_x + get_global_id(1) * weights_step_y + channel * weights_step_z;</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;    uchar3 <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>         = (uchar3)(0, 1, 2) * (uchar3)weights_stride_y;</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;    half3 weights_values0 = vload3(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(weights_addr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s0));</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;    half3 weights_values1 = vload3(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(weights_addr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s1));</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;    half3 weights_values2 = vload3(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(weights_addr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s2));</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;    half4 pixels = convolution3x3_f16(&amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>, weights_values0.s0, weights_values0.s1, weights_values0.s2,</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;                                      weights_values1.s0, weights_values1.s1, weights_values1.s2,</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;                                      weights_values2.s0, weights_values2.s1, weights_values2.s2);</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;<span class="preprocessor">#if defined(HAS_BIAS)</span></div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;    pixels += (half4)(*((__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(biases.<a class="code" href="struct_vector.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + channel * biases_stride_x)));</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;<span class="preprocessor">#endif //defined(HAS_BIAS)</span></div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;    vstore4(pixels, 0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr);</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;}</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;<span class="preprocessor">#endif // defined(DEPTH_MULTIPLIER)</span></div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;<span class="preprocessor">#endif // defined(CONV_STRIDE_X)</span></div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;__kernel <span class="keywordtype">void</span> depthwise_convolution_3x3_stridex1_stridey1_bifrost_f16(</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>),</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>),</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>)</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;    ,</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(biases)</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;#endif <span class="comment">//defined(HAS_BIAS)</span></div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;)</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;{</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>     = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a541f8db866a0fa93ee67d58ea31a7d0c">CONVERT_TENSOR3D_TO_IMAGE_STRUCT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>);</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>     = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a541f8db866a0fa93ee67d58ea31a7d0c">CONVERT_TENSOR3D_TO_IMAGE_STRUCT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a> = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a79e8e562daa6599317d2d1cd86ef1bf2">CONVERT_TO_TENSOR3D_STRUCT_NO_STEP</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>);</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;    <span class="comment">// Extract channel and linearized batch indices</span></div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> channel = get_global_id(2) % DST_CHANNELS;</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> batch   = get_global_id(2) / DST_CHANNELS;</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;<span class="preprocessor">#ifdef HAS_BIAS</span></div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a> biases = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a64d779f80eeb923e0ab2313433f7b40b">CONVERT_TO_VECTOR_STRUCT_NO_STEP</a>(biases);</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3a77be8aebd8e00522b32061d46ccdbd">bias</a> = *((__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a7e4940407322d6f0ccb8b6b86b856019">vector_offset</a>(&amp;biases, channel)));</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(HAS_BIAS) */</span><span class="preprocessor"></span></div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;    half4 pixels0 = 0.0f;</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;    half4 pixels1 = 0.0f;</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;    half4 pixels2 = 0.0f;</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;    half4 pixels3 = 0.0f;</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;    <span class="comment">// Load relevant input and weights data (Accounts depth multiplier when indexing input, OFM = IFM * DEPTH_MULTIPLIER)</span></div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;    __global uchar *weights_addr = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.ptr + get_global_id(0) * weights_step_x + get_global_id(1) * weights_step_y + channel * weights_step_z;</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;    __global uchar *src_addr     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>.ptr - batch * (DST_CHANNELS / DEPTH_MULTIPLIER) * (DEPTH_MULTIPLIER - 1) * src_step_z - (channel - (channel / DEPTH_MULTIPLIER)) * src_step_z;</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;    <span class="comment">// Load the weights</span></div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;    half3 weights_row0 = vload3(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(weights_addr + 0 * weights_stride_y));</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;    half3 weights_row1 = vload3(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(weights_addr + 1 * weights_stride_y));</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;    half3 weights_row2 = vload3(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(weights_addr + 2 * weights_stride_y));</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;    <span class="comment">// Note: Since each work-item computes 4x4 elements, we need to load 6 rows from the input tensor</span></div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;    half8 src00 = vload8(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(src_addr + 0 * src_stride_y)); <span class="comment">// Row0</span></div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;    half8 src10 = vload8(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(src_addr + 1 * src_stride_y)); <span class="comment">// Row1</span></div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;    half8 src20 = vload8(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(src_addr + 2 * src_stride_y)); <span class="comment">// Row2</span></div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;    half8 src30 = vload8(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(src_addr + 3 * src_stride_y)); <span class="comment">// Row3</span></div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;    half8 src40 = vload8(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(src_addr + 4 * src_stride_y)); <span class="comment">// Row4</span></div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;    half8 src50 = vload8(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(src_addr + 5 * src_stride_y)); <span class="comment">// Row5</span></div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE1(pixels0, src00, weights_row0);</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE1(pixels0, src10, weights_row1);</div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE1(pixels0, src20, weights_row2);</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE1(pixels1, src10, weights_row0);</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE1(pixels1, src20, weights_row1);</div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE1(pixels1, src30, weights_row2);</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE1(pixels2, src20, weights_row0);</div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE1(pixels2, src30, weights_row1);</div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE1(pixels2, src40, weights_row2);</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE1(pixels3, src30, weights_row0);</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE1(pixels3, src40, weights_row1);</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE1(pixels3, src50, weights_row2);</div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;<span class="preprocessor">#ifdef HAS_BIAS</span></div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;    pixels0 += (half4)<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3a77be8aebd8e00522b32061d46ccdbd">bias</a>;</div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;    pixels1 += (half4)<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3a77be8aebd8e00522b32061d46ccdbd">bias</a>;</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;    pixels2 += (half4)<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3a77be8aebd8e00522b32061d46ccdbd">bias</a>;</div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;    pixels3 += (half4)<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3a77be8aebd8e00522b32061d46ccdbd">bias</a>;</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(HAS_BIAS) */</span><span class="preprocessor"></span></div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;</div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;    vstore4(pixels0, 0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr + 0 * dst_stride_y));</div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;    vstore4(pixels1, 0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr + 1 * dst_stride_y));</div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;    vstore4(pixels2, 0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr + 2 * dst_stride_y));</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;    vstore4(pixels3, 0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr + 3 * dst_stride_y));</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;}</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;</div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;__kernel <span class="keywordtype">void</span> depthwise_convolution_3x3_stridex2_stridey2_bifrost_f16(</div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>),</div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>),</div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>)</div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;    ,</div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(biases)</div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;#endif <span class="comment">//defined(HAS_BIAS)</span></div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;)</div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;{</div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>     = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a541f8db866a0fa93ee67d58ea31a7d0c">CONVERT_TENSOR3D_TO_IMAGE_STRUCT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>);</div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>     = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a541f8db866a0fa93ee67d58ea31a7d0c">CONVERT_TENSOR3D_TO_IMAGE_STRUCT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a> = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a79e8e562daa6599317d2d1cd86ef1bf2">CONVERT_TO_TENSOR3D_STRUCT_NO_STEP</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>);</div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;</div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;    <span class="comment">// Extract channel and linearized batch indices</span></div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> channel = get_global_id(2) % DST_CHANNELS;</div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> batch   = get_global_id(2) / DST_CHANNELS;</div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;</div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;<span class="preprocessor">#ifdef HAS_BIAS</span></div><div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a> biases = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a64d779f80eeb923e0ab2313433f7b40b">CONVERT_TO_VECTOR_STRUCT_NO_STEP</a>(biases);</div><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;</div><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3a77be8aebd8e00522b32061d46ccdbd">bias</a> = *((__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a7e4940407322d6f0ccb8b6b86b856019">vector_offset</a>(&amp;biases, channel)));</div><div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(HAS_BIAS) */</span><span class="preprocessor"></span></div><div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;</div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;    half4 pixels0 = 0.0f;</div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;    half4 pixels1 = 0.0f;</div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;</div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;    <span class="comment">// Load relevant input and weights data ( Accounts depth multiplier when indexing input, OFM = IFM * DEPTH_MULTIPLIER)</span></div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;    __global uchar *weights_addr = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.ptr + get_global_id(0) * weights_step_x + get_global_id(1) * weights_step_y + channel * weights_step_z;</div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;    __global uchar *src_addr     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>.ptr - batch * (DST_CHANNELS / DEPTH_MULTIPLIER) * (DEPTH_MULTIPLIER - 1) * src_step_z - (channel - (channel / DEPTH_MULTIPLIER)) * src_step_z;</div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;</div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;    <span class="comment">// Load the weights</span></div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;    half3 weights_row0 = vload3(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(weights_addr + 0 * weights_stride_y));</div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;    half3 weights_row1 = vload3(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(weights_addr + 1 * weights_stride_y));</div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;    half3 weights_row2 = vload3(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(weights_addr + 2 * weights_stride_y));</div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;</div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;    <span class="comment">// Note: Since each work-item computes 2x4 elements, we need to load 5 rows from the input tensor</span></div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;    half8 src00 = vload8(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(src_addr + 0 * src_stride_y)); <span class="comment">// Row0</span></div><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;    half2 src01 = vload2(4, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(src_addr + 0 * src_stride_y)); <span class="comment">// Row0</span></div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;    half8 src10 = vload8(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(src_addr + 1 * src_stride_y)); <span class="comment">// Row1</span></div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;    half2 src11 = vload2(4, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(src_addr + 1 * src_stride_y)); <span class="comment">// Row1</span></div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;    half8 src20 = vload8(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(src_addr + 2 * src_stride_y)); <span class="comment">// Row2</span></div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;    half2 src21 = vload2(4, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(src_addr + 2 * src_stride_y)); <span class="comment">// Row2</span></div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;    half8 src30 = vload8(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(src_addr + 3 * src_stride_y)); <span class="comment">// Row3</span></div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;    half2 src31 = vload2(4, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(src_addr + 3 * src_stride_y)); <span class="comment">// Row3</span></div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;    half8 src40 = vload8(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(src_addr + 4 * src_stride_y)); <span class="comment">// Row4</span></div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;    half2 src41 = vload2(4, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(src_addr + 4 * src_stride_y)); <span class="comment">// Row4</span></div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;</div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE2(pixels0, src00, src01, weights_row0);</div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE2(pixels0, src10, src11, weights_row1);</div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE2(pixels0, src20, src21, weights_row2);</div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE2(pixels1, src20, src21, weights_row0);</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE2(pixels1, src30, src31, weights_row1);</div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE2(pixels1, src40, src41, weights_row2);</div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;</div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;<span class="preprocessor">#ifdef HAS_BIAS</span></div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;    pixels0 += (half4)<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3a77be8aebd8e00522b32061d46ccdbd">bias</a>;</div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;    pixels1 += (half4)<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3a77be8aebd8e00522b32061d46ccdbd">bias</a>;</div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(HAS_BIAS) */</span><span class="preprocessor"></span></div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;</div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;    vstore4(pixels0, 0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr + 0 * dst_stride_y));</div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;    vstore4(pixels1, 0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr + 1 * dst_stride_y));</div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;}</div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;<span class="preprocessor">#endif // defined(ARM_COMPUTE_OPENCL_FP16_ENABLED) &amp;&amp; defined(DEPTH_MULTIPLIER) &amp;&amp; defined(DST_CHANNELS)</span></div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;</div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;<span class="preprocessor">#if defined(VEC_SIZE) &amp;&amp; defined(SRC_DIM_2) &amp;&amp; defined(CONV_PAD_TOP) &amp;&amp; defined(CONV_PAD_LEFT) &amp;&amp; defined(DATA_TYPE)</span></div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;</div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;<span class="preprocessor">#if DATA_TYPE != float || DATA_TYPE != half</span></div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;<span class="preprocessor">#error &quot;Unsupported data type&quot;</span></div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;<span class="preprocessor">#endif // DATA_TYPE != float || DATA_TYPE != half</span></div><div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;</div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;<span class="preprocessor">#define VEC_FLOAT VEC_DATA_TYPE(DATA_TYPE, VEC_SIZE)</span></div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;</div><div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;<span class="preprocessor">#if defined(CONV_STRIDE_X) &amp;&amp; defined(CONV_STRIDE_Y)</span></div><div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;</div><div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;__kernel <span class="keywordtype">void</span> depthwise_convolution_3x3_nhwc(</div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a481bdc6d61b3df9dcdbdb244f0f97790">TENSOR4D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>),</div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a481bdc6d61b3df9dcdbdb244f0f97790">TENSOR4D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>),</div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>),</div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(biases),</div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;#endif <span class="comment">/* defined(HAS_BIAS) */</span></div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;    <span class="keywordtype">int</span> max_offset)</div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;{</div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;    <span class="keywordtype">int</span> x = get_global_id(0); <span class="comment">// channels</span></div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;    <span class="keywordtype">int</span> y = get_global_id(1); <span class="comment">// spatial coordinate x</span></div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;<span class="preprocessor">#if defined(DST_DEPTH)</span></div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;    <span class="keywordtype">int</span> z = get_global_id(2) % (int)DST_DEPTH; <span class="comment">// spatial coordinate y</span></div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;    <span class="keywordtype">int</span> b = get_global_id(2) / (int)DST_DEPTH; <span class="comment">// batch</span></div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;<span class="preprocessor">#else // defined(DST_DEPTH)</span></div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;    <span class="keywordtype">int</span> z = get_global_id(2); <span class="comment">// spatial coordinate y</span></div><div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;<span class="preprocessor">#endif // defined(DST_DEPTH)</span></div><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;</div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a> = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a527bfdf5eeb306f1cf01c4a8e29f38e0">CONVERT_TO_VECTOR_STRUCT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>);</div><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;</div><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;<span class="preprocessor">#if defined(DST_DEPTH)</span></div><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;    __global uchar *src_addr = src_ptr + src_offset_first_element_in_bytes + x * <span class="keyword">sizeof</span>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>) * VEC_SIZE + b * src_stride_w;</div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;<span class="preprocessor">#else  </span><span class="comment">/* defined(DST_DEPTH) */</span><span class="preprocessor"></span></div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;    __global uchar *src_addr = src_ptr + src_offset_first_element_in_bytes + x * <span class="keyword">sizeof</span>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>) * VEC_SIZE;</div><div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(DST_DEPTH) */</span><span class="preprocessor"></span></div><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;</div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;    <span class="keywordtype">int</span>  z_coord  = 0;</div><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;    int4 <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>   = 0;</div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;    int4 y_offset = ((int4)(y * CONV_STRIDE_X) + (int4)(0, 1, 2, 3) - CONV_PAD_LEFT) * (int4)src_stride_y;</div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;</div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;    <span class="comment">// We compute 2x1x1 [C,W,H] elements</span></div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> acc = 0;</div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;</div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;    <span class="comment">// Load weights</span></div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> w0 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.ptr + 0 * weights_stride_y + 0 * weights_stride_z));</div><div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> w1 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.ptr + 1 * weights_stride_y + 0 * weights_stride_z));</div><div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> w2 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.ptr + 2 * weights_stride_y + 0 * weights_stride_z));</div><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> w3 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.ptr + 0 * weights_stride_y + 1 * weights_stride_z));</div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> w4 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.ptr + 1 * weights_stride_y + 1 * weights_stride_z));</div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> w5 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.ptr + 2 * weights_stride_y + 1 * weights_stride_z));</div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> w6 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.ptr + 0 * weights_stride_y + 2 * weights_stride_z));</div><div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> w7 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.ptr + 1 * weights_stride_y + 2 * weights_stride_z));</div><div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> w8 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.ptr + 2 * weights_stride_y + 2 * weights_stride_z));</div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;</div><div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;    <span class="comment">// Load input values</span></div><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;    <span class="comment">// z == 0</span></div><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;    <span class="comment">// Clamp z_coord as for z = 0, it can be negative</span></div><div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;    <span class="comment">// z_coord is casted to unsigned int in order to use just a min() operation</span></div><div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;    <span class="comment">// A &quot;-1&quot; 32 bit signed variable converted to unsigned gives 4294967295</span></div><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;    z_coord = z * CONV_STRIDE_Y - (int)CONV_PAD_TOP;</div><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;    z_coord = min((uint)z_coord, (uint)SRC_DIM_2);</div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>  = y_offset + (int4)(z_coord * src_stride_z);</div><div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>  = min(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, (int4)max_offset);</div><div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;</div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> values0 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(src_addr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s0));</div><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> values1 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(src_addr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s1));</div><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> values2 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(src_addr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s2));</div><div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;</div><div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;    <span class="comment">// z == 1</span></div><div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;    <span class="comment">// z_coord can be only negative for z = 0 so we do not need to clamp it</span></div><div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;    <span class="comment">// Moreover z_coord cannot be out-of-bound for z = 1 so we do not need to clamp the offset</span></div><div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;    z_coord           = z * CONV_STRIDE_Y - (int)CONV_PAD_TOP + 1;</div><div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>            = y_offset + (int4)(z_coord * src_stride_z);</div><div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> values3 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(src_addr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s0));</div><div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> values4 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(src_addr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s1));</div><div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> values5 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(src_addr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s2));</div><div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;</div><div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;    <span class="comment">// z == 2</span></div><div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;    <span class="comment">// After z = 1 we can simply add src_stride_z to offset without updating z_coord</span></div><div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;    <span class="comment">// However offset can be out-of-bound so we need to check if it is greater than max_offset</span></div><div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> += (int4)src_stride_z;</div><div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>            = min(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, (int4)max_offset);</div><div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> values6 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(src_addr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s0));</div><div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> values7 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(src_addr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s1));</div><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> values8 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(src_addr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s2));</div><div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;</div><div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;    acc = fma(values0, w0, acc);</div><div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;    acc = fma(values1, w1, acc);</div><div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;    acc = fma(values2, w2, acc);</div><div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;</div><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;    acc = fma(values3, w3, acc);</div><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;    acc = fma(values4, w4, acc);</div><div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;    acc = fma(values5, w5, acc);</div><div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;</div><div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;    acc = fma(values6, w6, acc);</div><div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;    acc = fma(values7, w7, acc);</div><div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;    acc = fma(values8, w8, acc);</div><div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;</div><div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;<span class="preprocessor">#if defined(HAS_BIAS)</span></div><div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a>    biases      = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a527bfdf5eeb306f1cf01c4a8e29f38e0">CONVERT_TO_VECTOR_STRUCT</a>(biases);</div><div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> bias_values = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)biases.<a class="code" href="struct_vector.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;    acc += bias_values;</div><div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;<span class="preprocessor">#endif // defined(HAS_BIAS)</span></div><div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;</div><div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;<span class="preprocessor">#if defined(DST_DEPTH)</span></div><div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;    __global uchar *dst_addr = dst_ptr + dst_offset_first_element_in_bytes + x * dst_step_x + y * dst_step_y + z * dst_step_z + b * dst_stride_w;</div><div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;<span class="preprocessor">#else  </span><span class="comment">/* defined(DST_DEPTH) */</span><span class="preprocessor"></span></div><div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;    __global uchar *dst_addr = dst_ptr + dst_offset_first_element_in_bytes + x * dst_step_x + y * dst_step_y + z * dst_step_z;</div><div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(DST_DEPTH) */</span><span class="preprocessor"></span></div><div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;</div><div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(VEC_SIZE)</div><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;    (acc, 0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(dst_addr));</div><div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;}</div><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;<span class="preprocessor">#endif // defined(CONV_STRIDE_X) &amp;&amp; defined(CONV_STRIDE_Y)</span></div><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;</div><div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;<span class="preprocessor">#if defined(NUM_ROWS_PROCESSED) &amp;&amp; defined(NUM_PLANES_PROCESSED)</span></div><div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;</div><div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;__kernel <span class="keywordtype">void</span> depthwise_convolution_3x3_nhwc_stride1(</div><div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a481bdc6d61b3df9dcdbdb244f0f97790">TENSOR4D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">src</a>),</div><div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a481bdc6d61b3df9dcdbdb244f0f97790">TENSOR4D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>),</div><div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>),</div><div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(biases),</div><div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;#endif <span class="comment">/* defined(HAS_BIAS) */</span></div><div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;    <span class="keywordtype">int</span> max_offset)</div><div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;{</div><div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;    <span class="keywordtype">int</span> x = get_global_id(0); <span class="comment">// channels</span></div><div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;    <span class="keywordtype">int</span> y = get_global_id(1); <span class="comment">// spatial coordinate x</span></div><div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;<span class="preprocessor">#if defined(DST_DEPTH)</span></div><div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;    <span class="keywordtype">int</span> z = get_global_id(2) % (int)DST_DEPTH; <span class="comment">// spatial coordinate y</span></div><div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;    <span class="keywordtype">int</span> b = get_global_id(2) / (int)DST_DEPTH; <span class="comment">// batch</span></div><div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;<span class="preprocessor">#else // defined(DST_DEPTH)</span></div><div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;    <span class="keywordtype">int</span> z = get_global_id(2); <span class="comment">// spatial coordinate y</span></div><div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;<span class="preprocessor">#endif // defined(DST_DEPTH)</span></div><div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;</div><div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a> = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a527bfdf5eeb306f1cf01c4a8e29f38e0">CONVERT_TO_VECTOR_STRUCT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>);</div><div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;</div><div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;<span class="preprocessor">#if defined(DST_DEPTH)</span></div><div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;    __global uchar *src_addr = src_ptr + src_offset_first_element_in_bytes + x * <span class="keyword">sizeof</span>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>) * VEC_SIZE + b * src_stride_w;</div><div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;<span class="preprocessor">#else  </span><span class="comment">/* defined(DST_DEPTH) */</span><span class="preprocessor"></span></div><div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;    __global uchar *src_addr = src_ptr + src_offset_first_element_in_bytes + x * <span class="keyword">sizeof</span>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>) * VEC_SIZE;</div><div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(DST_DEPTH) */</span><span class="preprocessor"></span></div><div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;</div><div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;    <span class="keywordtype">int</span>  z_coord  = 0;</div><div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;    int4 <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>   = 0;</div><div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;    int4 y_offset = ((int4)(y * NUM_ROWS_PROCESSED) + (int4)(0, 1, 2, 3) - (int)CONV_PAD_LEFT) * (int4)src_stride_y;</div><div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;</div><div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;    <span class="comment">// We compute 2x2x2 [C,W,H] elements</span></div><div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> acc0 = 0;</div><div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> acc1 = 0;</div><div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> acc2 = 0;</div><div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> acc3 = 0;</div><div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;</div><div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;    <span class="comment">// Load weights</span></div><div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> w0 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.ptr + 0 * weights_stride_y + 0 * weights_stride_z));</div><div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> w1 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.ptr + 1 * weights_stride_y + 0 * weights_stride_z));</div><div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> w2 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.ptr + 2 * weights_stride_y + 0 * weights_stride_z));</div><div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> w3 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.ptr + 0 * weights_stride_y + 1 * weights_stride_z));</div><div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> w4 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.ptr + 1 * weights_stride_y + 1 * weights_stride_z));</div><div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> w5 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.ptr + 2 * weights_stride_y + 1 * weights_stride_z));</div><div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> w6 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.ptr + 0 * weights_stride_y + 2 * weights_stride_z));</div><div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> w7 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.ptr + 1 * weights_stride_y + 2 * weights_stride_z));</div><div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> w8 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.ptr + 2 * weights_stride_y + 2 * weights_stride_z));</div><div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;</div><div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;    <span class="comment">// Load input values</span></div><div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;    <span class="comment">// z == 0</span></div><div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;    <span class="comment">// Clamp z_coord as for z = 0, it can be negative</span></div><div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;    <span class="comment">// z_coord is casted to unsigned int in order to use just a min() operation</span></div><div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;    <span class="comment">// A &quot;-1&quot; 32 bit signed variable converted to unsigned gives 4294967295</span></div><div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;    z_coord = z * (int)NUM_PLANES_PROCESSED - (<span class="keywordtype">int</span>)CONV_PAD_TOP;</div><div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;    z_coord = min((uint)z_coord, (uint)SRC_DIM_2);</div><div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>  = y_offset + (int4)(z_coord * src_stride_z);</div><div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>  = min(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, (int4)max_offset);</div><div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;</div><div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> values0 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(src_addr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s0));</div><div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> values1 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(src_addr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s1));</div><div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> values2 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(src_addr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s2));</div><div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> values3 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(src_addr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s3));</div><div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;</div><div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;    <span class="comment">// z == 1</span></div><div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;    <span class="comment">// z_coord can be only negative for z = 0 so we do not need to clamp it</span></div><div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;    <span class="comment">// Moreover z_coord cannot be out-of-bound for z = 1 so we do not need to clamp the offset</span></div><div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;    z_coord           = z * (int)NUM_PLANES_PROCESSED - (<span class="keywordtype">int</span>)CONV_PAD_TOP + 1;</div><div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>            = y_offset + (int4)(z_coord * src_stride_z);</div><div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> values4 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(src_addr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s0));</div><div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> values5 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(src_addr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s1));</div><div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> values6 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(src_addr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s2));</div><div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> values7 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(src_addr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s3));</div><div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;</div><div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;    <span class="comment">// z == 2</span></div><div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;    <span class="comment">// After z = 1 we can simply add src_stride_z to offset without updating z_coord</span></div><div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;    <span class="comment">// However offset can be out-of-bound so we need to check if it is greater than max_offset</span></div><div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> += (int4)src_stride_z;</div><div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>             = min(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, (int4)max_offset);</div><div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> values8  = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(src_addr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s0));</div><div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> values9  = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(src_addr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s1));</div><div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> values10 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(src_addr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s2));</div><div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> values11 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(src_addr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s3));</div><div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;</div><div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;    <span class="comment">// z == 3</span></div><div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;    <span class="comment">// After z = 1 we can simply add src_stride_z to offset without updating z_coord</span></div><div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;    <span class="comment">// However offset can be out-of-bound so we need to check if it is greater than max_offset</span></div><div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> += (int4)src_stride_z;</div><div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>             = min(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, (int4)max_offset);</div><div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> values12 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(src_addr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s0));</div><div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> values13 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(src_addr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s1));</div><div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> values14 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(src_addr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s2));</div><div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> values15 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(src_addr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s3));</div><div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;</div><div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;    acc0 = fma(values0, w0, acc0);</div><div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;    acc0 = fma(values1, w1, acc0);</div><div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;    acc0 = fma(values2, w2, acc0);</div><div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;    acc1 = fma(values1, w0, acc1);</div><div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;    acc1 = fma(values2, w1, acc1);</div><div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;    acc1 = fma(values3, w2, acc1);</div><div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;</div><div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;    acc0 = fma(values4, w3, acc0);</div><div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;    acc0 = fma(values5, w4, acc0);</div><div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;    acc0 = fma(values6, w5, acc0);</div><div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;    acc1 = fma(values5, w3, acc1);</div><div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;    acc1 = fma(values6, w4, acc1);</div><div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;    acc1 = fma(values7, w5, acc1);</div><div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;</div><div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;    acc0 = fma(values8, w6, acc0);</div><div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;    acc0 = fma(values9, w7, acc0);</div><div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;    acc0 = fma(values10, w8, acc0);</div><div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;    acc1 = fma(values9, w6, acc1);</div><div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;    acc1 = fma(values10, w7, acc1);</div><div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;    acc1 = fma(values11, w8, acc1);</div><div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;</div><div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;    acc2 = fma(values4, w0, acc2);</div><div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;    acc2 = fma(values5, w1, acc2);</div><div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;    acc2 = fma(values6, w2, acc2);</div><div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;    acc3 = fma(values5, w0, acc3);</div><div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;    acc3 = fma(values6, w1, acc3);</div><div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;    acc3 = fma(values7, w2, acc3);</div><div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;</div><div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;    acc2 = fma(values8, w3, acc2);</div><div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;    acc2 = fma(values9, w4, acc2);</div><div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;    acc2 = fma(values10, w5, acc2);</div><div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;    acc3 = fma(values9, w3, acc3);</div><div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;    acc3 = fma(values10, w4, acc3);</div><div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;    acc3 = fma(values11, w5, acc3);</div><div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;</div><div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;    acc2 = fma(values12, w6, acc2);</div><div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;    acc2 = fma(values13, w7, acc2);</div><div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;    acc2 = fma(values14, w8, acc2);</div><div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;    acc3 = fma(values13, w6, acc3);</div><div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;    acc3 = fma(values14, w7, acc3);</div><div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;    acc3 = fma(values15, w8, acc3);</div><div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;</div><div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;<span class="preprocessor">#if defined(HAS_BIAS)</span></div><div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a> biases = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a527bfdf5eeb306f1cf01c4a8e29f38e0">CONVERT_TO_VECTOR_STRUCT</a>(biases);</div><div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;</div><div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;    <a class="code" href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a> bias_values = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VEC_SIZE)(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)biases.<a class="code" href="struct_vector.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;</div><div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;    acc0 += bias_values;</div><div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;    acc1 += bias_values;</div><div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;    acc2 += bias_values;</div><div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;    acc3 += bias_values;</div><div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;<span class="preprocessor">#endif // defined(HAS_BIAS)</span></div><div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;</div><div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;<span class="preprocessor">#if defined(DST_DEPTH)</span></div><div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;    __global uchar *dst_addr = dst_ptr + dst_offset_first_element_in_bytes + x * dst_step_x + y * dst_step_y + (z * NUM_PLANES_PROCESSED) * dst_step_z + b * dst_stride_w;</div><div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;<span class="preprocessor">#else  </span><span class="comment">/* defined(DST_DEPTH) */</span><span class="preprocessor"></span></div><div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;    __global uchar *dst_addr = dst_ptr + dst_offset_first_element_in_bytes + x * dst_step_x + y * dst_step_y + (z * NUM_PLANES_PROCESSED) * dst_step_z;</div><div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(DST_DEPTH) */</span><span class="preprocessor"></span></div><div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;</div><div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(VEC_SIZE)</div><div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;    (acc0, 0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(dst_addr + 0 * dst_stride_y));</div><div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(VEC_SIZE)</div><div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;    (acc1, 0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(dst_addr + 1 * dst_stride_y));</div><div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;</div><div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;<span class="preprocessor">#if((DST_DIM_2 % NUM_PLANES_PROCESSED) != 0)</span></div><div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;    <span class="keywordflow">if</span>((z * NUM_PLANES_PROCESSED + 1) &lt; DST_DIM_2)</div><div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;#endif <span class="comment">// ((DST_DIM_2 % NUM_PLANES_PROCESSED) != 0)</span></div><div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;    {</div><div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;        <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(VEC_SIZE)</div><div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;        (acc2, 0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(dst_addr + 0 * dst_stride_y + 1 * dst_stride_z));</div><div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;        <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(VEC_SIZE)</div><div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;        (acc3, 0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(dst_addr + 1 * dst_stride_y + 1 * dst_stride_z));</div><div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;    }</div><div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;}</div><div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;</div><div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;<span class="preprocessor">#endif // defined(NUM_ROWS_PROCESSED) &amp;&amp; defined(NUM_PLANES_PROCESSED)</span></div><div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;<span class="preprocessor">#endif // defined(VEC_SIZE) &amp;&amp; defined(SRC_DIM_2) &amp;&amp; defined(CONV_PAD_TOP) &amp;&amp; defined(CONV_PAD_LEFT) &amp;&amp; defined(DATA_TYPE)</span></div><div class="ttc" id="struct_vector_xhtml"><div class="ttname"><a href="struct_vector.xhtml">Vector</a></div><div class="ttdoc">Structure to hold Vector information.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00143">helpers.h:143</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00312">helpers.h:312</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_aa8d95ba04fc73845abc6045952cae5be"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a></div><div class="ttdeci">#define CONVERT(x, type)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00063">helpers.h:63</a></div></div>
<div class="ttc" id="convolution3x3_8cl_xhtml_afb8c72ce35c4a1f4a2588d6573e54aa1"><div class="ttname"><a href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a></div><div class="ttdeci">#define DATA_TYPE</div><div class="ttdef"><b>Definition:</b> <a href="convolution3x3_8cl_source.xhtml#l00027">convolution3x3.cl:27</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a73e2825fd61d349c5ca2f5313e3c8ea1"><div class="ttname"><a href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">arm_compute::half</a></div><div class="ttdeci">half_float::half half</div><div class="ttdoc">16-bit floating point type</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00044">Types.h:44</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a22f42fcf2077d951271df83b55c1a71a"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a></div><div class="ttdeci">#define IMAGE_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00077">helpers.h:77</a></div></div>
<div class="ttc" id="struct_tensor3_d_xhtml"><div class="ttname"><a href="struct_tensor3_d.xhtml">Tensor3D</a></div><div class="ttdoc">Structure to hold 3D tensor information.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00160">helpers.h:160</a></div></div>
<div class="ttc" id="depthwise__convolution_8cl_xhtml_ac353c0687abd8c71a4fa096d322b39ec"><div class="ttname"><a href="depthwise__convolution_8cl.xhtml#ac353c0687abd8c71a4fa096d322b39ec">in_stride_y</a></div><div class="ttdeci">#define in_stride_y</div><div class="ttdef"><b>Definition:</b> <a href="depthwise__convolution_8cl_source.xhtml#l00574">depthwise_convolution.cl:574</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a79e8e562daa6599317d2d1cd86ef1bf2"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a79e8e562daa6599317d2d1cd86ef1bf2">CONVERT_TO_TENSOR3D_STRUCT_NO_STEP</a></div><div class="ttdeci">#define CONVERT_TO_TENSOR3D_STRUCT_NO_STEP(name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00132">helpers.h:132</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a527bfdf5eeb306f1cf01c4a8e29f38e0"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a527bfdf5eeb306f1cf01c4a8e29f38e0">CONVERT_TO_VECTOR_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_VECTOR_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00107">helpers.h:107</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a541f8db866a0fa93ee67d58ea31a7d0c"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a541f8db866a0fa93ee67d58ea31a7d0c">CONVERT_TENSOR3D_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TENSOR3D_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00125">helpers.h:125</a></div></div>
<div class="ttc" id="depthwise__convolution_8cl_xhtml_a128f47cb6aacde29e07fde2c4b9f5dd2"><div class="ttname"><a href="depthwise__convolution_8cl.xhtml#a128f47cb6aacde29e07fde2c4b9f5dd2">out_stride_z</a></div><div class="ttdeci">#define out_stride_z</div><div class="ttdef"><b>Definition:</b> <a href="depthwise__convolution_8cl_source.xhtml#l00578">depthwise_convolution.cl:578</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a40a6eb9f2a7712f08d6bb8ff6c9e6ca7"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a></div><div class="ttdeci">#define VECTOR_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00071">helpers.h:71</a></div></div>
<div class="ttc" id="convolution3x3_8cl_xhtml_afc5fefe72e66f0ae5191fd5b708fade9"><div class="ttname"><a href="convolution3x3_8cl.xhtml#afc5fefe72e66f0ae5191fd5b708fade9">convolution3x3</a></div><div class="ttdeci">short8 convolution3x3(Image *src, const short mat0, const short mat1, const short mat2, const short mat3, const short mat4, const short mat5, const short mat6, const short mat7, const short mat8, uint scale)</div><div class="ttdoc">Apply a 3x3 convolution matrix to a single channel U8 input image and return the result.</div><div class="ttdef"><b>Definition:</b> <a href="convolution3x3_8cl_source.xhtml#l00081">convolution3x3.cl:81</a></div></div>
<div class="ttc" id="struct_vector_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_vector.xhtml#acf52c23cbd7424606c10a606524e3e32">Vector::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00145">helpers.h:145</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">CLTensor dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00102">AbsoluteDifference.cpp:102</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a3a77be8aebd8e00522b32061d46ccdbd"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a3a77be8aebd8e00522b32061d46ccdbd">arm_compute::test::validation::bias</a></div><div class="ttdeci">CLTensor bias</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00181">ConvolutionLayer.cpp:181</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ae9d2dc29c2789c253406f9b304cc75a8"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ae9d2dc29c2789c253406f9b304cc75a8">arm_compute::test::validation::src</a></div><div class="ttdeci">cast configure &amp; src</div><div class="ttdef"><b>Definition:</b> <a href="_cast_8cpp_source.xhtml#l00169">Cast.cpp:169</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00151">helpers.h:151</a></div></div>
<div class="ttc" id="depthwise__convolution_8cl_xhtml_a5447e2c4e1aae8fff9290b775fe813ff"><div class="ttname"><a href="depthwise__convolution_8cl.xhtml#a5447e2c4e1aae8fff9290b775fe813ff">in_stride_x</a></div><div class="ttdeci">#define in_stride_x</div><div class="ttdef"><b>Definition:</b> <a href="depthwise__convolution_8cl_source.xhtml#l00573">depthwise_convolution.cl:573</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a31c8c760f08fb1a331b16b7c204321dc"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_TENSOR3D_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00128">helpers.h:128</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a7e4940407322d6f0ccb8b6b86b856019"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a7e4940407322d6f0ccb8b6b86b856019">vector_offset</a></div><div class="ttdeci">__global const uchar * vector_offset(const Vector *vec, int x)</div><div class="ttdoc">Get the pointer position of a Vector.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00301">helpers.h:301</a></div></div>
<div class="ttc" id="depthwise__convolution_8cl_xhtml_a32137dd220c1110408a7b498108de2c5"><div class="ttname"><a href="depthwise__convolution_8cl.xhtml#a32137dd220c1110408a7b498108de2c5">in_stride_z</a></div><div class="ttdeci">#define in_stride_z</div><div class="ttdef"><b>Definition:</b> <a href="depthwise__convolution_8cl_source.xhtml#l00575">depthwise_convolution.cl:575</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml">helpers.h</a></div></div>
<div class="ttc" id="depthwise__convolution_8cl_xhtml_ac8b6b732372937bba276e6391944d1e1"><div class="ttname"><a href="depthwise__convolution_8cl.xhtml#ac8b6b732372937bba276e6391944d1e1">out_stride_y</a></div><div class="ttdeci">#define out_stride_y</div><div class="ttdef"><b>Definition:</b> <a href="depthwise__convolution_8cl_source.xhtml#l00577">depthwise_convolution.cl:577</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a64a08a9fec5aeee8650e7182b6d171d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">arm_compute::test::validation::weights</a></div><div class="ttdeci">CLTensor weights</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00180">ConvolutionLayer.cpp:180</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_acb282042d1edeeaa3cc979a206f78b54"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a></div><div class="ttdeci">#define VSTORE(size)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00051">helpers.h:51</a></div></div>
<div class="ttc" id="depthwise__convolution_8cl_xhtml_a68fce1f0ee4080ed89c9427496d625f2"><div class="ttname"><a href="depthwise__convolution_8cl.xhtml#a68fce1f0ee4080ed89c9427496d625f2">out_stride_x</a></div><div class="ttdeci">#define out_stride_x</div><div class="ttdef"><b>Definition:</b> <a href="depthwise__convolution_8cl_source.xhtml#l00576">depthwise_convolution.cl:576</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a481bdc6d61b3df9dcdbdb244f0f97790"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a481bdc6d61b3df9dcdbdb244f0f97790">TENSOR4D_DECLARATION</a></div><div class="ttdeci">#define TENSOR4D_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00095">helpers.h:95</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a287e2fc366c312b468382c95bb90f91f"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a></div><div class="ttdeci">#define VLOAD(size)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00048">helpers.h:48</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a6b83038822d1ae7ab619b684ed3b7fc0"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a></div><div class="ttdeci">#define TENSOR3D_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00085">helpers.h:85</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a64d779f80eeb923e0ab2313433f7b40b"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a64d779f80eeb923e0ab2313433f7b40b">CONVERT_TO_VECTOR_STRUCT_NO_STEP</a></div><div class="ttdeci">#define CONVERT_TO_VECTOR_STRUCT_NO_STEP(name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00110">helpers.h:110</a></div></div>
<div class="ttc" id="activation__layer__qa8_8cl_xhtml_ade2e33e6f303ce93468eef7e56d95c0c"><div class="ttname"><a href="activation__layer__qa8_8cl.xhtml#ade2e33e6f303ce93468eef7e56d95c0c">VEC_FLOAT</a></div><div class="ttdeci">#define VEC_FLOAT</div><div class="ttdef"><b>Definition:</b> <a href="activation__layer__qa8_8cl_source.xhtml#l00027">activation_layer_qa8.cl:27</a></div></div>
<div class="ttc" id="convolution3x3_8cl_xhtml_a92702074338198e81a46c3e309d9b04f"><div class="ttname"><a href="convolution3x3_8cl.xhtml#a92702074338198e81a46c3e309d9b04f">convolution1x3</a></div><div class="ttdeci">short8 convolution1x3(__global const uchar *left_pixel, const short left_coeff, const short middle_coeff, const short right_coeff)</div><div class="ttdoc">Compute a 1D horizontal convolution of size 3 for 8 bytes assuming the input is made of 1 channel of ...</div><div class="ttdef"><b>Definition:</b> <a href="convolution3x3_8cl_source.xhtml#l00043">convolution3x3.cl:43</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a36f754c05b6fddf6df0d8d0a74f8159f"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a></div><div class="ttdeci">#define VEC_DATA_TYPE(type, size)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00057">helpers.h:57</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_8c278f79c760e5c5fbd911f9870614c1.xhtml">CL</a></li><li class="navelem"><a class="el" href="dir_25885286e9dad4fa105b7b25a8031bbf.xhtml">cl_kernels</a></li><li class="navelem"><a class="el" href="depthwise__convolution_8cl.xhtml">depthwise_convolution.cl</a></li>
    <li class="footer">Generated on Thu Feb 28 2019 12:24:49 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
