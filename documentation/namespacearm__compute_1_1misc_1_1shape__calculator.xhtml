<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute::misc::shape_calculator Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">19.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('namespacearm__compute_1_1misc_1_1shape__calculator.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">arm_compute::misc::shape_calculator Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a951fb0d8dcf2a2a338e26a59ffc9af17"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a951fb0d8dcf2a2a338e26a59ffc9af17">compute_vector_to_tensor_output_shape</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;input, size_t conv_w, size_t conv_h, const <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> &amp;data_layout)</td></tr>
<tr class="memdesc:a951fb0d8dcf2a2a338e26a59ffc9af17"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the output tensor shape of a vector input given the convolution dimensions.  <a href="#a951fb0d8dcf2a2a338e26a59ffc9af17">More...</a><br /></td></tr>
<tr class="separator:a951fb0d8dcf2a2a338e26a59ffc9af17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a593fb7ecc281425b190cd6f20164b1a3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a593fb7ecc281425b190cd6f20164b1a3">compute_permutation_output_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input, const <a class="el" href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">PermutationVector</a> &amp;perm)</td></tr>
<tr class="memdesc:a593fb7ecc281425b190cd6f20164b1a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the permuted shape of an input given a permutation vector.  <a href="#a593fb7ecc281425b190cd6f20164b1a3">More...</a><br /></td></tr>
<tr class="separator:a593fb7ecc281425b190cd6f20164b1a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afbc83cd4145d161da4c026e1f5743e1d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#afbc83cd4145d161da4c026e1f5743e1d">compute_reorg_output_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input, int32_t stride)</td></tr>
<tr class="memdesc:afbc83cd4145d161da4c026e1f5743e1d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the output shape of the reorg layer given a stride.  <a href="#afbc83cd4145d161da4c026e1f5743e1d">More...</a><br /></td></tr>
<tr class="separator:afbc83cd4145d161da4c026e1f5743e1d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6365b505b5c1b98916425bc692b6ea49"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a6365b505b5c1b98916425bc692b6ea49">compute_weights_reshaped_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;weights, bool has_bias=false, unsigned int num_groups=1)</td></tr>
<tr class="memdesc:a6365b505b5c1b98916425bc692b6ea49"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the reshaped shape of the weights.  <a href="#a6365b505b5c1b98916425bc692b6ea49">More...</a><br /></td></tr>
<tr class="separator:a6365b505b5c1b98916425bc692b6ea49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a389f89ab5121dad0906d0b7324fbf73d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a389f89ab5121dad0906d0b7324fbf73d">compute_lhs_reshaped_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;a, const <a class="el" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml">GEMMLHSMatrixInfo</a> &amp;lhs_info, bool reinterpret_input_as_3d=false)</td></tr>
<tr class="memdesc:a389f89ab5121dad0906d0b7324fbf73d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the Left Hand Side matrix reshaped shape.  <a href="#a389f89ab5121dad0906d0b7324fbf73d">More...</a><br /></td></tr>
<tr class="separator:a389f89ab5121dad0906d0b7324fbf73d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09ad10a110d947fd9c444b2ea5e4c127"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a09ad10a110d947fd9c444b2ea5e4c127">compute_rhs_reshaped_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;a, const <a class="el" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml">GEMMRHSMatrixInfo</a> &amp;rhs_info)</td></tr>
<tr class="memdesc:a09ad10a110d947fd9c444b2ea5e4c127"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the Right Hand Side matrix reshaped shape.  <a href="#a09ad10a110d947fd9c444b2ea5e4c127">More...</a><br /></td></tr>
<tr class="separator:a09ad10a110d947fd9c444b2ea5e4c127"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d52adbbcd2c53f837c96b5a3d15c4fb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a8d52adbbcd2c53f837c96b5a3d15c4fb">compute_interleaved_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;a, int mult_interleave4x4_height=1, bool reinterpret_input_as_3d=false)</td></tr>
<tr class="memdesc:a8d52adbbcd2c53f837c96b5a3d15c4fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the interleaved shape of an input tensor.  <a href="#a8d52adbbcd2c53f837c96b5a3d15c4fb">More...</a><br /></td></tr>
<tr class="separator:a8d52adbbcd2c53f837c96b5a3d15c4fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f10bc0f3e2a0126ce8c26e3d6a8fb96"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a3f10bc0f3e2a0126ce8c26e3d6a8fb96">compute_reshaped_depthwise_weights_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input, const <a class="el" href="structarm__compute_1_1_depthwise_convolution_reshape_info.xhtml">DepthwiseConvolutionReshapeInfo</a> &amp;info)</td></tr>
<tr class="memdesc:a3f10bc0f3e2a0126ce8c26e3d6a8fb96"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the reshaped shape of the weights to use in depthwise convolution.  <a href="#a3f10bc0f3e2a0126ce8c26e3d6a8fb96">More...</a><br /></td></tr>
<tr class="separator:a3f10bc0f3e2a0126ce8c26e3d6a8fb96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70a2ef9fd754b5798a0a92656f8b5fcf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a70a2ef9fd754b5798a0a92656f8b5fcf">compute_transpose1xW_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;b)</td></tr>
<tr class="memdesc:a70a2ef9fd754b5798a0a92656f8b5fcf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the transposed 1xW shape.  <a href="#a70a2ef9fd754b5798a0a92656f8b5fcf">More...</a><br /></td></tr>
<tr class="separator:a70a2ef9fd754b5798a0a92656f8b5fcf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5797726a8fbee3b11b92757c2f0031d6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a5797726a8fbee3b11b92757c2f0031d6">compute_transpose1xW_with_element_size_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;b, int mult_transpose1xW_width=1)</td></tr>
<tr class="memdesc:a5797726a8fbee3b11b92757c2f0031d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the transposed 1xW width element shape.  <a href="#a5797726a8fbee3b11b92757c2f0031d6">More...</a><br /></td></tr>
<tr class="separator:a5797726a8fbee3b11b92757c2f0031d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60ce6c017f70d978b48b101ce314969e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a60ce6c017f70d978b48b101ce314969e">compute_reductionA_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;b)</td></tr>
<tr class="memdesc:a60ce6c017f70d978b48b101ce314969e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the reductionA shape used in GEMMLowp.  <a href="#a60ce6c017f70d978b48b101ce314969e">More...</a><br /></td></tr>
<tr class="separator:a60ce6c017f70d978b48b101ce314969e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69f9b3191aafc4905f9d029ff9d48fea"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a69f9b3191aafc4905f9d029ff9d48fea">compute_reductionB_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;a)</td></tr>
<tr class="memdesc:a69f9b3191aafc4905f9d029ff9d48fea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the reductionB shape used in GEMMLowp.  <a href="#a69f9b3191aafc4905f9d029ff9d48fea">More...</a><br /></td></tr>
<tr class="separator:a69f9b3191aafc4905f9d029ff9d48fea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a264e2e6d3ff632e90d450435fce66d54"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a264e2e6d3ff632e90d450435fce66d54">compute_col2im_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;convolved_dims, bool batch_size_on_z, unsigned int num_groups=1)</td></tr>
<tr class="memdesc:a264e2e6d3ff632e90d450435fce66d54"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the Col2Im shape.  <a href="#a264e2e6d3ff632e90d450435fce66d54">More...</a><br /></td></tr>
<tr class="separator:a264e2e6d3ff632e90d450435fce66d54"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69cb11b5b37f94a6bea9eaad9d13cccf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a69cb11b5b37f94a6bea9eaad9d13cccf">compute_transposed_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input)</td></tr>
<tr class="memdesc:a69cb11b5b37f94a6bea9eaad9d13cccf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the transposed shape of a tensor.  <a href="#a69cb11b5b37f94a6bea9eaad9d13cccf">More...</a><br /></td></tr>
<tr class="separator:a69cb11b5b37f94a6bea9eaad9d13cccf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab51afcfdb9caea9e8185ae6a42ba4779"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ab51afcfdb9caea9e8185ae6a42ba4779">compute_depthwise_convolution_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;weights, <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> conv_info, unsigned int depth_multiplier)</td></tr>
<tr class="memdesc:ab51afcfdb9caea9e8185ae6a42ba4779"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the depthwise convolution output shape of a tensor.  <a href="#ab51afcfdb9caea9e8185ae6a42ba4779">More...</a><br /></td></tr>
<tr class="separator:ab51afcfdb9caea9e8185ae6a42ba4779"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a928f49376c42cf52fcff1d615034486f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a928f49376c42cf52fcff1d615034486f">compute_depthwise_convolution_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input, int weights_width, int weights_height, <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> conv_info, unsigned int depth_multiplier)</td></tr>
<tr class="memdesc:a928f49376c42cf52fcff1d615034486f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the depthwise convolution output shape of a tensor.  <a href="#a928f49376c42cf52fcff1d615034486f">More...</a><br /></td></tr>
<tr class="separator:a928f49376c42cf52fcff1d615034486f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c2e95d65407a26489ea38431ad851f5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a5c2e95d65407a26489ea38431ad851f5">compute_deconvolution_upsampled_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;weights, unsigned int sx, unsigned int sy, unsigned int inner_border_right, unsigned int inner_border_top, std::pair&lt; unsigned int, unsigned int &gt; &amp;out_dims, unsigned int &amp;padx, unsigned int &amp;pady)</td></tr>
<tr class="memdesc:a5c2e95d65407a26489ea38431ad851f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the upsampled output shape used for deconvolution.  <a href="#a5c2e95d65407a26489ea38431ad851f5">More...</a><br /></td></tr>
<tr class="separator:a5c2e95d65407a26489ea38431ad851f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae270329cfe3dbab009b700318e8af8b4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ae270329cfe3dbab009b700318e8af8b4">compute_deconvolution_output_shape</a> (const std::pair&lt; unsigned int, unsigned int &gt; &amp;out_dims, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;weights)</td></tr>
<tr class="memdesc:ae270329cfe3dbab009b700318e8af8b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the output shape of the deconvolution layer.  <a href="#ae270329cfe3dbab009b700318e8af8b4">More...</a><br /></td></tr>
<tr class="separator:ae270329cfe3dbab009b700318e8af8b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a9286d053e9f3a958064e4f3cdd02f7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a8a9286d053e9f3a958064e4f3cdd02f7">compute_im2col_conv_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;kernel_dims, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, bool has_bias, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, bool batch_size_on_z, unsigned int num_groups=1)</td></tr>
<tr class="memdesc:a8a9286d053e9f3a958064e4f3cdd02f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the im2col output shape of a tensor.  <a href="#a8a9286d053e9f3a958064e4f3cdd02f7">More...</a><br /></td></tr>
<tr class="separator:a8a9286d053e9f3a958064e4f3cdd02f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83efb6708574e67d13965bcd2059ad75"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a83efb6708574e67d13965bcd2059ad75">compute_flatten_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input)</td></tr>
<tr class="memdesc:a83efb6708574e67d13965bcd2059ad75"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the flattened output shape of a tensor.  <a href="#a83efb6708574e67d13965bcd2059ad75">More...</a><br /></td></tr>
<tr class="separator:a83efb6708574e67d13965bcd2059ad75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad16b366db486fec63b6d962937ec4545"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ad16b366db486fec63b6d962937ec4545">compute_softmax_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input, size_t axis=1)</td></tr>
<tr class="memdesc:ad16b366db486fec63b6d962937ec4545"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the softmax output shape of a tensor.  <a href="#ad16b366db486fec63b6d962937ec4545">More...</a><br /></td></tr>
<tr class="separator:ad16b366db486fec63b6d962937ec4545"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25e3751f07d4b2771a05d8d01a7f7620"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a25e3751f07d4b2771a05d8d01a7f7620">compute_winograd_filter_transform_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input, const <a class="el" href="structarm__compute_1_1_winograd_info.xhtml">WinogradInfo</a> &amp;winograd_info)</td></tr>
<tr class="memdesc:a25e3751f07d4b2771a05d8d01a7f7620"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the winograd filter transform shape.  <a href="#a25e3751f07d4b2771a05d8d01a7f7620">More...</a><br /></td></tr>
<tr class="separator:a25e3751f07d4b2771a05d8d01a7f7620"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04249f91ec2964d21a91bb7038821000"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a04249f91ec2964d21a91bb7038821000">compute_winograd_input_transform_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input, const <a class="el" href="structarm__compute_1_1_winograd_info.xhtml">WinogradInfo</a> &amp;winograd_info)</td></tr>
<tr class="memdesc:a04249f91ec2964d21a91bb7038821000"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the winograd input transform shape.  <a href="#a04249f91ec2964d21a91bb7038821000">More...</a><br /></td></tr>
<tr class="separator:a04249f91ec2964d21a91bb7038821000"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5699c316d27b41f0790827791e88ae26"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a5699c316d27b41f0790827791e88ae26">compute_winograd_output_transform_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input, const <a class="el" href="structarm__compute_1_1_winograd_info.xhtml">WinogradInfo</a> &amp;winograd_info)</td></tr>
<tr class="memdesc:a5699c316d27b41f0790827791e88ae26"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the winograd output transform shape.  <a href="#a5699c316d27b41f0790827791e88ae26">More...</a><br /></td></tr>
<tr class="separator:a5699c316d27b41f0790827791e88ae26"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d320d308c16b8ddda3c9d3f60fad79c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a5d320d308c16b8ddda3c9d3f60fad79c">compute_deep_convolution_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;weights, <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> conv_info)</td></tr>
<tr class="memdesc:a5d320d308c16b8ddda3c9d3f60fad79c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the deep convolution shape output shape of a tensor.  <a href="#a5d320d308c16b8ddda3c9d3f60fad79c">More...</a><br /></td></tr>
<tr class="separator:a5d320d308c16b8ddda3c9d3f60fad79c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b843e3850ed7324d11f77882cc597ae"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a1b843e3850ed7324d11f77882cc597ae">compute_min_max_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input)</td></tr>
<tr class="memdesc:a1b843e3850ed7324d11f77882cc597ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the min/max shape output shape of a tensor.  <a href="#a1b843e3850ed7324d11f77882cc597ae">More...</a><br /></td></tr>
<tr class="separator:a1b843e3850ed7324d11f77882cc597ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad242bedd6845b8fc13ade41cfc062c83"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ad242bedd6845b8fc13ade41cfc062c83">compute_pool_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input, <a class="el" href="classarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> pool_info)</td></tr>
<tr class="memdesc:ad242bedd6845b8fc13ade41cfc062c83"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the output pool shape of a tensor.  <a href="#ad242bedd6845b8fc13ade41cfc062c83">More...</a><br /></td></tr>
<tr class="separator:ad242bedd6845b8fc13ade41cfc062c83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d3eaddfd85c16e7a9a385ba0e6a45b0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a3d3eaddfd85c16e7a9a385ba0e6a45b0">compute_roi_align_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;rois, <a class="el" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">ROIPoolingLayerInfo</a> pool_info)</td></tr>
<tr class="memdesc:a3d3eaddfd85c16e7a9a385ba0e6a45b0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the output roi align shape of a tensor.  <a href="#a3d3eaddfd85c16e7a9a385ba0e6a45b0">More...</a><br /></td></tr>
<tr class="separator:a3d3eaddfd85c16e7a9a385ba0e6a45b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af98bc3ef5c65dbb63bc79700ccdd043b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#af98bc3ef5c65dbb63bc79700ccdd043b">compute_rnn_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input, const unsigned int batch_size)</td></tr>
<tr class="memdesc:af98bc3ef5c65dbb63bc79700ccdd043b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the RNN shape of a tensor.  <a href="#af98bc3ef5c65dbb63bc79700ccdd043b">More...</a><br /></td></tr>
<tr class="separator:af98bc3ef5c65dbb63bc79700ccdd043b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adca241b012a5e00ddfcdc5a8db05a2a3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#adca241b012a5e00ddfcdc5a8db05a2a3">compute_mm_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input0, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input1, bool is_interleaved_transposed, const <a class="el" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml">GEMMReshapeInfo</a> &amp;reshape_info)</td></tr>
<tr class="memdesc:adca241b012a5e00ddfcdc5a8db05a2a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the matrix multiplication output shape of two tensors.  <a href="#adca241b012a5e00ddfcdc5a8db05a2a3">More...</a><br /></td></tr>
<tr class="separator:adca241b012a5e00ddfcdc5a8db05a2a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5076384fc9981ec1b497daab624a555b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a5076384fc9981ec1b497daab624a555b">compute_mm_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input0, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input1, const <a class="el" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml">GEMMReshapeInfo</a> &amp;gemm_info)</td></tr>
<tr class="memdesc:a5076384fc9981ec1b497daab624a555b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the matrix multiplication output shape of two tensors.  <a href="#a5076384fc9981ec1b497daab624a555b">More...</a><br /></td></tr>
<tr class="separator:a5076384fc9981ec1b497daab624a555b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d3b8af21d25d9e6871673565f9f7532"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a1d3b8af21d25d9e6871673565f9f7532">compute_output_stage_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input, unsigned int gemm_3d_depth=1, bool batch_size_on_z=false)</td></tr>
<tr class="memdesc:a1d3b8af21d25d9e6871673565f9f7532"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the matrix multiplication output shape of two tensors.  <a href="#a1d3b8af21d25d9e6871673565f9f7532">More...</a><br /></td></tr>
<tr class="separator:a1d3b8af21d25d9e6871673565f9f7532"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab288dc7ed664925c6f992b0e6aa3bc1b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ab288dc7ed664925c6f992b0e6aa3bc1b">compute_strided_slice_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input, const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;starts, const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;ends, const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;strides, int32_t begin_mask, int32_t end_mask, int32_t shrink_axis_mask)</td></tr>
<tr class="memdesc:ab288dc7ed664925c6f992b0e6aa3bc1b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the strided slice output shape of a tensor.  <a href="#ab288dc7ed664925c6f992b0e6aa3bc1b">More...</a><br /></td></tr>
<tr class="separator:ab288dc7ed664925c6f992b0e6aa3bc1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30c67d11c15378ffe67ca3c31e848917"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a30c67d11c15378ffe67ca3c31e848917">compute_slice_shape</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;input_shape, const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;starts, const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;ends)</td></tr>
<tr class="memdesc:a30c67d11c15378ffe67ca3c31e848917"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the slice output shape of a tensor.  <a href="#a30c67d11c15378ffe67ca3c31e848917">More...</a><br /></td></tr>
<tr class="separator:a30c67d11c15378ffe67ca3c31e848917"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4d688e137d670d209b647ec37592a92"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ac4d688e137d670d209b647ec37592a92">compute_batch_to_space_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input, const int block_x, const int block_y)</td></tr>
<tr class="memdesc:ac4d688e137d670d209b647ec37592a92"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the batch to space output shape of a tensor.  <a href="#ac4d688e137d670d209b647ec37592a92">More...</a><br /></td></tr>
<tr class="separator:ac4d688e137d670d209b647ec37592a92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe10cfa0b480704109fd1a925301f58b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#abe10cfa0b480704109fd1a925301f58b">compute_split_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input, unsigned int axis, unsigned int num_splits)</td></tr>
<tr class="memdesc:abe10cfa0b480704109fd1a925301f58b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the split output shape of a tensor.  <a href="#abe10cfa0b480704109fd1a925301f58b">More...</a><br /></td></tr>
<tr class="separator:abe10cfa0b480704109fd1a925301f58b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a585529133e437dc5f935d33de17c4abb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a585529133e437dc5f935d33de17c4abb">compute_space_to_batch_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input, const int block_x, const int block_y, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;padding_left, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;padding_right)</td></tr>
<tr class="memdesc:a585529133e437dc5f935d33de17c4abb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the space to batch output shape of a tensor.  <a href="#a585529133e437dc5f935d33de17c4abb">More...</a><br /></td></tr>
<tr class="separator:a585529133e437dc5f935d33de17c4abb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3f672f124e4228db364bb811e770226"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ae3f672f124e4228db364bb811e770226">compute_prior_box_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input, const <a class="el" href="classarm__compute_1_1_prior_box_layer_info.xhtml">PriorBoxLayerInfo</a> &amp;info)</td></tr>
<tr class="memdesc:ae3f672f124e4228db364bb811e770226"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the prior box output shape of a tensor.  <a href="#ae3f672f124e4228db364bb811e770226">More...</a><br /></td></tr>
<tr class="separator:ae3f672f124e4228db364bb811e770226"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e7f3187350db69156c1026860ace4e5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a4e7f3187350db69156c1026860ace4e5">compute_padded_shape</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;input_shape, const <a class="el" href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">PaddingList</a> &amp;padding)</td></tr>
<tr class="memdesc:a4e7f3187350db69156c1026860ace4e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the padded shape of a tensor.  <a href="#a4e7f3187350db69156c1026860ace4e5">More...</a><br /></td></tr>
<tr class="separator:a4e7f3187350db69156c1026860ace4e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a626cdfbacb377ee26462155d421717d3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a626cdfbacb377ee26462155d421717d3">compute_tiled_shape</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;input_shape, const <a class="el" href="namespacearm__compute.xhtml#afe9e10e5fdfd1e2665ac17c75c0cacd8">Multiples</a> &amp;multiples)</td></tr>
<tr class="memdesc:a626cdfbacb377ee26462155d421717d3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the tiled shape of a tensor.  <a href="#a626cdfbacb377ee26462155d421717d3">More...</a><br /></td></tr>
<tr class="separator:a626cdfbacb377ee26462155d421717d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b0f2e38b65473f68561e0598c3107ff"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a0b0f2e38b65473f68561e0598c3107ff">compute_reduced_shape</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;input, unsigned int axis)</td></tr>
<tr class="memdesc:a0b0f2e38b65473f68561e0598c3107ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the reduced shape of a tensor given an axis.  <a href="#a0b0f2e38b65473f68561e0598c3107ff">More...</a><br /></td></tr>
<tr class="separator:a0b0f2e38b65473f68561e0598c3107ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3173d90757ec6ff31441b55883eafbca"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a3173d90757ec6ff31441b55883eafbca">compute_upsample_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;info)</td></tr>
<tr class="memdesc:a3173d90757ec6ff31441b55883eafbca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the upsampled shape of a tensor.  <a href="#a3173d90757ec6ff31441b55883eafbca">More...</a><br /></td></tr>
<tr class="separator:a3173d90757ec6ff31441b55883eafbca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb3f0c947411cfe1d8c5f67af2cad851"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:acb3f0c947411cfe1d8c5f67af2cad851"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#acb3f0c947411cfe1d8c5f67af2cad851">extract_shape</a> (T *data)</td></tr>
<tr class="memdesc:acb3f0c947411cfe1d8c5f67af2cad851"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the tensor shape.  <a href="#acb3f0c947411cfe1d8c5f67af2cad851">More...</a><br /></td></tr>
<tr class="separator:acb3f0c947411cfe1d8c5f67af2cad851"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af79493c6c07a3eb2b3a27712221b66b8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#af79493c6c07a3eb2b3a27712221b66b8">extract_shape</a> (<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *data)</td></tr>
<tr class="separator:af79493c6c07a3eb2b3a27712221b66b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7f0e5491e0f43e371f7db047a03dd4c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ae7f0e5491e0f43e371f7db047a03dd4c">extract_shape</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> *data)</td></tr>
<tr class="separator:ae7f0e5491e0f43e371f7db047a03dd4c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acedb0877d41f2ae0591a2d4e84318140"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#acedb0877d41f2ae0591a2d4e84318140">calculate_unstack_shape</a> (<a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> input_shape, unsigned int axis)</td></tr>
<tr class="memdesc:acedb0877d41f2ae0591a2d4e84318140"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the unstack shape of a tensor.  <a href="#acedb0877d41f2ae0591a2d4e84318140">More...</a><br /></td></tr>
<tr class="separator:acedb0877d41f2ae0591a2d4e84318140"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4acdd230226c5888e773bbac3be74941"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a4acdd230226c5888e773bbac3be74941"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a4acdd230226c5888e773bbac3be74941">calculate_depth_concatenate_shape</a> (const std::vector&lt; T * &gt; &amp;inputs_vector)</td></tr>
<tr class="memdesc:a4acdd230226c5888e773bbac3be74941"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the depth concatenate output shape of a vector of tensors.  <a href="#a4acdd230226c5888e773bbac3be74941">More...</a><br /></td></tr>
<tr class="separator:a4acdd230226c5888e773bbac3be74941"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a333e4da262f8d985e8f9ab2c39a9c3f3"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a333e4da262f8d985e8f9ab2c39a9c3f3"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a333e4da262f8d985e8f9ab2c39a9c3f3">calculate_width_concatenate_shape</a> (const std::vector&lt; T * &gt; &amp;inputs_vector)</td></tr>
<tr class="memdesc:a333e4da262f8d985e8f9ab2c39a9c3f3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the width concatenate output shape of a vector of tensors.  <a href="#a333e4da262f8d985e8f9ab2c39a9c3f3">More...</a><br /></td></tr>
<tr class="separator:a333e4da262f8d985e8f9ab2c39a9c3f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32c692ab35f40f9ce6e27e1f4016e921"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a32c692ab35f40f9ce6e27e1f4016e921">compute_stack_shape</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;a, unsigned int axis, unsigned int num_tensors)</td></tr>
<tr class="memdesc:a32c692ab35f40f9ce6e27e1f4016e921"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the stack output shape of a tensor.  <a href="#a32c692ab35f40f9ce6e27e1f4016e921">More...</a><br /></td></tr>
<tr class="separator:a32c692ab35f40f9ce6e27e1f4016e921"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6578c8df1088c90dfa0d1be6bca605d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ae6578c8df1088c90dfa0d1be6bca605d">compute_gather_shape</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;input_shape, const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;indices_shape, uint32_t actual_axis)</td></tr>
<tr class="separator:ae6578c8df1088c90dfa0d1be6bca605d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a4acdd230226c5888e773bbac3be74941"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4acdd230226c5888e773bbac3be74941">&#9670;&nbsp;</a></span>calculate_depth_concatenate_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::calculate_depth_concatenate_shape </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; T * &gt; &amp;&#160;</td>
          <td class="paramname"><em>inputs_vector</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the depth concatenate output shape of a vector of tensors. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">inputs_vector</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information.">Vector</a> containing the shapes of the inputs</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l01196">1196</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;{</div><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;    TensorShape out_shape = <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ae7f0e5491e0f43e371f7db047a03dd4c">extract_shape</a>(inputs_vector[0]);</div><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;</div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;    <span class="keywordtype">size_t</span> max_x = 0;</div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;    <span class="keywordtype">size_t</span> max_y = 0;</div><div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;    <span class="keywordtype">size_t</span> depth = 0;</div><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;</div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;tensor : inputs_vector)</div><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;    {</div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(tensor == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;        <span class="keyword">const</span> TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a> = <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ae7f0e5491e0f43e371f7db047a03dd4c">extract_shape</a>(tensor);</div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;        max_x                   = std::max(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.x(), max_x);</div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;        max_y                   = std::max(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.y(), max_y);</div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;        depth += <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.z();</div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;    }</div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;</div><div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;    out_shape.set(0, max_x);</div><div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;    out_shape.set(1, max_y);</div><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;    out_shape.set(2, depth);</div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;</div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;    <span class="keywordflow">return</span> out_shape;</div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00097">AbsoluteDifference.cpp:97</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00337">Error.h:337</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_ae7f0e5491e0f43e371f7db047a03dd4c"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ae7f0e5491e0f43e371f7db047a03dd4c">arm_compute::misc::shape_calculator::extract_shape</a></div><div class="ttdeci">TensorShape extract_shape(const TensorShape *data)</div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l01170">ShapeCalculator.h:1170</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00337">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01160">extract_shape()</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00078">TensorShape::set()</a>, and <a class="el" href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00097">arm_compute::test::validation::shape</a>.</p>

<p class="reference">Referenced by <a class="el" href="_concatenate_layer_node_8cpp_source.xhtml#l00059">ConcatenateLayerNode::compute_output_descriptor()</a>, <a class="el" href="_n_e_depth_concatenate_layer_8cpp_source.xhtml#l00046">NEDepthConcatenateLayer::configure()</a>, <a class="el" href="_c_l_depth_concatenate_layer_8cpp_source.xhtml#l00046">CLDepthConcatenateLayer::configure()</a>, <a class="el" href="_n_e_depth_concatenate_layer_8cpp_source.xhtml#l00076">NEDepthConcatenateLayer::validate()</a>, and <a class="el" href="_c_l_depth_concatenate_layer_8cpp_source.xhtml#l00078">CLDepthConcatenateLayer::validate()</a>.</p>

</div>
</div>
<a id="acedb0877d41f2ae0591a2d4e84318140"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acedb0877d41f2ae0591a2d4e84318140">&#9670;&nbsp;</a></span>calculate_unstack_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::calculate_unstack_shape </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td>
          <td class="paramname"><em>input_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>axis</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the unstack shape of a tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input_shape</td><td>Input tensor shape </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">axis</td><td>Axis on which to perform the unstack operation</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l01182">1182</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;{</div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#accc088009d44c521706aa98d6387ee21">axis</a> &gt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">input_shape</a>.num_dimensions());</div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">input_shape</a>.remove_dimension(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#accc088009d44c521706aa98d6387ee21">axis</a>);</div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">input_shape</a>;</div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a865514e30baa11b11c8fa65f944532fb"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">arm_compute::test::validation::input_shape</a></div><div class="ttdeci">input_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00337">Error.h:337</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_accc088009d44c521706aa98d6387ee21"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#accc088009d44c521706aa98d6387ee21">arm_compute::test::validation::axis</a></div><div class="ttdeci">axis</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_stack_layer_8cpp_source.xhtml#l00226">StackLayer.cpp:226</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00337">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_n_e_o_n_2_stack_layer_8cpp_source.xhtml#l00226">arm_compute::test::validation::axis</a>, and <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::input_shape</a>.</p>

</div>
</div>
<a id="a333e4da262f8d985e8f9ab2c39a9c3f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a333e4da262f8d985e8f9ab2c39a9c3f3">&#9670;&nbsp;</a></span>calculate_width_concatenate_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::calculate_width_concatenate_shape </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; T * &gt; &amp;&#160;</td>
          <td class="paramname"><em>inputs_vector</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the width concatenate output shape of a vector of tensors. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">inputs_vector</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information.">Vector</a> containing the shapes of the inputs</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l01227">1227</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;{</div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;    TensorShape out_shape = <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ae7f0e5491e0f43e371f7db047a03dd4c">extract_shape</a>(inputs_vector[0]);</div><div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;</div><div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;    <span class="keywordtype">size_t</span> width = 0;</div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;tensor : inputs_vector)</div><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;    {</div><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(tensor == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;        <span class="keyword">const</span> TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a> = <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ae7f0e5491e0f43e371f7db047a03dd4c">extract_shape</a>(tensor);</div><div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;        width += <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.x();</div><div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;    }</div><div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;</div><div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;    out_shape.set(0, width);</div><div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;</div><div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;    <span class="keywordflow">return</span> out_shape;</div><div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00097">AbsoluteDifference.cpp:97</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00337">Error.h:337</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_ae7f0e5491e0f43e371f7db047a03dd4c"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ae7f0e5491e0f43e371f7db047a03dd4c">arm_compute::misc::shape_calculator::extract_shape</a></div><div class="ttdeci">TensorShape extract_shape(const TensorShape *data)</div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l01170">ShapeCalculator.h:1170</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00337">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01160">extract_shape()</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00078">TensorShape::set()</a>, and <a class="el" href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00097">arm_compute::test::validation::shape</a>.</p>

<p class="reference">Referenced by <a class="el" href="_concatenate_layer_node_8cpp_source.xhtml#l00059">ConcatenateLayerNode::compute_output_descriptor()</a>, <a class="el" href="_n_e_width_concatenate_layer_8cpp_source.xhtml#l00064">NEWidthConcatenateLayer::configure()</a>, <a class="el" href="_c_l_width_concatenate_layer_8cpp_source.xhtml#l00084">CLWidthConcatenateLayer::configure()</a>, <a class="el" href="_n_e_width_concatenate_layer_8cpp_source.xhtml#l00043">NEWidthConcatenateLayer::validate()</a>, and <a class="el" href="_c_l_width_concatenate_layer_8cpp_source.xhtml#l00045">CLWidthConcatenateLayer::validate()</a>.</p>

</div>
</div>
<a id="ac4d688e137d670d209b647ec37592a92"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac4d688e137d670d209b647ec37592a92">&#9670;&nbsp;</a></span>compute_batch_to_space_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_batch_to_space_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>block_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>block_y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the batch to space output shape of a tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">block_x</td><td>Block shape x value </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">block_y</td><td>Block shape y value</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00983">983</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;{</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(block_x &lt;= 0 || block_y &lt;= 0);</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> data_layout = input-&gt;data_layout();</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        idx_width   = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::WIDTH);</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        idx_height  = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::HEIGHT);</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        idx_batch   = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::BATCHES);</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;    TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>{ input-&gt;tensor_shape() };</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(idx_width, input-&gt;tensor_shape()[idx_width] * block_x);</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(idx_height, input-&gt;tensor_shape()[idx_height] * block_y);</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(idx_batch, input-&gt;tensor_shape()[idx_batch] / (block_x * block_y));</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>;</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00337">Error.h:337</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7fc93f37dac131a1a40b7921f9df3a9a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">output_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a46e938020a3ac8c926d0590b7fe957db"><div class="ttname"><a href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout data_layout, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00326">Helpers.inl:326</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition]</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00111">Types.h:111</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00337">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a628bcf7e10fc1c2a984f379a1ec3393a">arm_compute::BATCHES</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">ITensorInfo::data_layout()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00326">arm_compute::get_data_layout_dimension_index()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::HEIGHT</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::output_shape</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, and <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::WIDTH</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_batch_to_space_layer_kernel_8cpp_source.xhtml#l00107">CLBatchToSpaceLayerKernel::configure()</a>.</p>

</div>
</div>
<a id="a264e2e6d3ff632e90d450435fce66d54"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a264e2e6d3ff632e90d450435fce66d54">&#9670;&nbsp;</a></span>compute_col2im_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_col2im_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>convolved_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>batch_size_on_z</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_groups</em> = <code>1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the Col2Im shape. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">convolved_dims</td><td>Convolved dimensions </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">batch_size_on_z</td><td>True if batch size is on z axis </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_groups</td><td>(Optional) Number of groups when performing a grouped convolution</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00358">358</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;{</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(num_groups == 0);</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input.tensor_shape()[1] != (convolved_dims.area()));</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>((num_groups &gt; 1) &amp;&amp; input.tensor_shape()[2] != num_groups);</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> data_layout = input.data_layout();</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        width_idx   = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::WIDTH);</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        height_idx  = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::HEIGHT);</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        channel_idx = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::CHANNEL);</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    TensorShape col2im_shape{ input.tensor_shape() };</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <span class="comment">// If batches start on 3rd dimension shift dimensions right by 1 to retain upper tensor shape,</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    <span class="comment">// as first three will be override by H,W,C data</span></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="keywordflow">if</span>(batch_size_on_z &amp;&amp; num_groups == 1)</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    {</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        col2im_shape.shift_right(1);</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    }</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    col2im_shape.set(width_idx, convolved_dims.width);</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    col2im_shape.set(height_idx, convolved_dims.height);</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    col2im_shape.set(channel_idx, input.tensor_shape()[0] * num_groups);</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="keywordflow">return</span> col2im_shape;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00337">Error.h:337</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a46e938020a3ac8c926d0590b7fe957db"><div class="ttname"><a href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout data_layout, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00326">Helpers.inl:326</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition]</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00111">Types.h:111</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_size2_d_8h_source.xhtml#l00053">Size2D::area()</a>, <a class="el" href="_error_8h_source.xhtml#l00337">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::CHANNEL</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">ITensorInfo::data_layout()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00326">arm_compute::get_data_layout_dimension_index()</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00093">Size2D::height</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::HEIGHT</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00143">TensorShape::shift_right()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00092">Size2D::width</a>, and <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::WIDTH</a>.</p>

</div>
</div>
<a id="ae270329cfe3dbab009b700318e8af8b4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae270329cfe3dbab009b700318e8af8b4">&#9670;&nbsp;</a></span>compute_deconvolution_output_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_deconvolution_output_shape </td>
          <td>(</td>
          <td class="paramtype">const std::pair&lt; unsigned int, unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>out_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the output shape of the deconvolution layer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">out_dims</td><td>Output x and y shape dimensions </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">weights</td><td>Weights tensor shape</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00511">511</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;{</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <span class="keyword">const</span> TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">input_shape</a>{ input.tensor_shape() };</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    <span class="keyword">const</span> TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae8f0126f051c787279a8c9ee3c3a5d55">weights_shape</a>{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.tensor_shape() };</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> data_layout = input.data_layout();</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        width_idx   = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::WIDTH);</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        height_idx  = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::HEIGHT);</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        channel_idx = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::CHANNEL);</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        batch_idx   = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::BATCHES);</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    TensorShape out_shape{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">input_shape</a> };</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    out_shape.set(width_idx, out_dims.first);</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    out_shape.set(height_idx, out_dims.second);</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    out_shape.set(channel_idx, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae8f0126f051c787279a8c9ee3c3a5d55">weights_shape</a>[batch_idx]);</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="keywordflow">return</span> out_shape;</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a865514e30baa11b11c8fa65f944532fb"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">arm_compute::test::validation::input_shape</a></div><div class="ttdeci">input_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ae8f0126f051c787279a8c9ee3c3a5d55"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ae8f0126f051c787279a8c9ee3c3a5d55">arm_compute::test::validation::weights_shape</a></div><div class="ttdeci">weights_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a64a08a9fec5aeee8650e7182b6d171d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">arm_compute::test::validation::weights</a></div><div class="ttdeci">CLTensor weights</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00180">ConvolutionLayer.cpp:180</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a46e938020a3ac8c926d0590b7fe957db"><div class="ttname"><a href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout data_layout, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00326">Helpers.inl:326</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition]</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00111">Types.h:111</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a628bcf7e10fc1c2a984f379a1ec3393a">arm_compute::BATCHES</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::CHANNEL</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">ITensorInfo::data_layout()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00326">arm_compute::get_data_layout_dimension_index()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::HEIGHT</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::input_shape</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00180">arm_compute::test::validation::weights</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::weights_shape</a>, and <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::WIDTH</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_deconvolution_layer_8cpp_source.xhtml#l00110">CLDeconvolutionLayer::configure()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00103">NEDeconvolutionLayer::configure()</a>, <a class="el" href="_n_e_o_n_2_deconvolution_layer_8cpp_source.xhtml#l00066">arm_compute::test::validation::DATA_TEST_CASE()</a>, <a class="el" href="_c_l_deconvolution_layer_8cpp_source.xhtml#l00051">CLDeconvolutionLayer::validate()</a>, and <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00050">NEDeconvolutionLayer::validate()</a>.</p>

</div>
</div>
<a id="a5c2e95d65407a26489ea38431ad851f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c2e95d65407a26489ea38431ad851f5">&#9670;&nbsp;</a></span>compute_deconvolution_upsampled_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_deconvolution_upsampled_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>sx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>sy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>inner_border_right</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>inner_border_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::pair&lt; unsigned int, unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>out_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>padx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>pady</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the upsampled output shape used for deconvolution. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">weights</td><td>Weights tensor shape </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sx</td><td>Stride on x axis </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sy</td><td>Stride on y axis </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">inner_border_right</td><td>The number of zeros added to right edge of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">inner_border_top</td><td>The number of zeros added to top edge of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">out_dims</td><td>Output shape dimensions </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">padx</td><td>Padding on x axis </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pady</td><td>Padding on y axis</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00478">478</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;{</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> data_layout = input.data_layout();</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>     idx_w       = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::WIDTH);</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>     idx_h       = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::HEIGHT);</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    <span class="comment">// Find the upsampled dimensions</span></div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> out_x = (input.dimension(idx_w) - 1) * sx + inner_border_right + 1;</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> out_y = (input.dimension(idx_h) - 1) * sy + inner_border_top + 1;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    <span class="comment">// Find the padding needed for the convolution with stride 1 in order to match output shape</span></div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    padx = out_dims.first - (out_x - <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.dimension(idx_w) + 1);</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    pady = out_dims.second - (out_y - <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.dimension(idx_h) + 1);</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    out_x += padx;</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    out_y += pady;</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    TensorShape scale_out_shape(input.tensor_shape());</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    scale_out_shape.set(idx_w, out_x);</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    scale_out_shape.set(idx_h, out_y);</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    <span class="keywordflow">return</span> scale_out_shape;</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a64a08a9fec5aeee8650e7182b6d171d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">arm_compute::test::validation::weights</a></div><div class="ttdeci">CLTensor weights</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00180">ConvolutionLayer.cpp:180</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a46e938020a3ac8c926d0590b7fe957db"><div class="ttname"><a href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout data_layout, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00326">Helpers.inl:326</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition]</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00111">Types.h:111</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">ITensorInfo::data_layout()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00326">arm_compute::get_data_layout_dimension_index()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::HEIGHT</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00078">TensorShape::set()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00180">arm_compute::test::validation::weights</a>, and <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::WIDTH</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_deconvolution_layer_8cpp_source.xhtml#l00110">CLDeconvolutionLayer::configure()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00103">NEDeconvolutionLayer::configure()</a>, <a class="el" href="_c_l_deconvolution_layer_8cpp_source.xhtml#l00051">CLDeconvolutionLayer::validate()</a>, and <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00050">NEDeconvolutionLayer::validate()</a>.</p>

</div>
</div>
<a id="a5d320d308c16b8ddda3c9d3f60fad79c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d320d308c16b8ddda3c9d3f60fad79c">&#9670;&nbsp;</a></span>compute_deep_convolution_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_deep_convolution_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>&#160;</td>
          <td class="paramname"><em>conv_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the deep convolution shape output shape of a tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">weights</td><td>Weights tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">conv_info</td><td>Contains padding and stride information</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00730">730</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;{</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    <span class="keyword">const</span> TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">input_shape</a>{ input.tensor_shape() };</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    <span class="keyword">const</span> TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae8f0126f051c787279a8c9ee3c3a5d55">weights_shape</a>{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.tensor_shape() };</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> idx_width   = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(input.data_layout(), DataLayoutDimension::WIDTH);</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> idx_height  = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(input.data_layout(), DataLayoutDimension::HEIGHT);</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> idx_channel = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(input.data_layout(), DataLayoutDimension::CHANNEL);</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> input_width         = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">input_shape</a>[idx_width];</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> input_height        = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">input_shape</a>[idx_height];</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weights_width       = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae8f0126f051c787279a8c9ee3c3a5d55">weights_shape</a>[idx_width];</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weights_height      = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae8f0126f051c787279a8c9ee3c3a5d55">weights_shape</a>[idx_height];</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weights_out_channel = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae8f0126f051c787279a8c9ee3c3a5d55">weights_shape</a>[3];</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>       output_width        = 0;</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>       output_height       = 0;</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    std::tie(output_width, output_height) = <a class="code" href="namespacearm__compute.xhtml#a546c6bed3c307414e8d0934bc13259e5">scaled_dimensions</a>(input_width, input_height, weights_width, weights_height, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acbf8f8a6dd185de04c1981c57a8963cf">conv_info</a>);</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;    TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">input_shape</a> };</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(idx_width, output_width);</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(idx_height, output_height);</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(idx_channel, weights_out_channel);</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>;</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a865514e30baa11b11c8fa65f944532fb"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">arm_compute::test::validation::input_shape</a></div><div class="ttdeci">input_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ae8f0126f051c787279a8c9ee3c3a5d55"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ae8f0126f051c787279a8c9ee3c3a5d55">arm_compute::test::validation::weights_shape</a></div><div class="ttdeci">weights_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7fc93f37dac131a1a40b7921f9df3a9a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">output_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_acbf8f8a6dd185de04c1981c57a8963cf"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#acbf8f8a6dd185de04c1981c57a8963cf">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00571">Winograd.cpp:571</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a64a08a9fec5aeee8650e7182b6d171d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">arm_compute::test::validation::weights</a></div><div class="ttdeci">CLTensor weights</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00180">ConvolutionLayer.cpp:180</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a46e938020a3ac8c926d0590b7fe957db"><div class="ttname"><a href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout data_layout, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00326">Helpers.inl:326</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a546c6bed3c307414e8d0934bc13259e5"><div class="ttname"><a href="namespacearm__compute.xhtml#a546c6bed3c307414e8d0934bc13259e5">arm_compute::scaled_dimensions</a></div><div class="ttdeci">const std::pair&lt; unsigned int, unsigned int &gt; scaled_dimensions(unsigned int width, unsigned int height, unsigned int kernel_width, unsigned int kernel_height, const PadStrideInfo &amp;pad_stride_info, const Size2D &amp;dilation=Size2D(1U, 1U))</div><div class="ttdoc">Returns expected width and height of output scaled tensor depending on dimensions rounding mode.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00359">Utils.cpp:359</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::CHANNEL</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00571">arm_compute::test::validation::conv_info</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">ITensorInfo::data_layout()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00326">arm_compute::get_data_layout_dimension_index()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::HEIGHT</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::input_shape</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::output_shape</a>, <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00359">arm_compute::scaled_dimensions()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00180">arm_compute::test::validation::weights</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::weights_shape</a>, and <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::WIDTH</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_direct_convolution_layer_kernel_8cpp_source.xhtml#l01155">NEDirectConvolutionLayerKernel::configure()</a>, and <a class="el" href="_c_l_direct_convolution_layer_kernel_8cpp_source.xhtml#l00350">CLDirectConvolutionLayerKernel::configure()</a>.</p>

</div>
</div>
<a id="ab51afcfdb9caea9e8185ae6a42ba4779"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab51afcfdb9caea9e8185ae6a42ba4779">&#9670;&nbsp;</a></span>compute_depthwise_convolution_shape() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_depthwise_convolution_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>depth_multiplier</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the depthwise convolution output shape of a tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">weights</td><td>Weights tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">conv_info</td><td>Padding and stride information to use for the convolution. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">depth_multiplier</td><td>Multiplier to apply to the input's depth in order to retrieve the output's depth.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00408">408</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;{</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <span class="keyword">const</span> TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">input_shape</a>{ input.tensor_shape() };</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <span class="keyword">const</span> TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae8f0126f051c787279a8c9ee3c3a5d55">weights_shape</a>{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.tensor_shape() };</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> data_layout = input.data_layout();</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        width_idx   = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::WIDTH);</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        height_idx  = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::HEIGHT);</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        channel_idx = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::CHANNEL);</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_width  = 0;</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_height = 0;</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    std::tie(output_width, output_height) = <a class="code" href="namespacearm__compute.xhtml#a546c6bed3c307414e8d0934bc13259e5">scaled_dimensions</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">input_shape</a>[width_idx], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">input_shape</a>[height_idx],</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                                                              <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae8f0126f051c787279a8c9ee3c3a5d55">weights_shape</a>[width_idx], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae8f0126f051c787279a8c9ee3c3a5d55">weights_shape</a>[height_idx],</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                                                              <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acbf8f8a6dd185de04c1981c57a8963cf">conv_info</a>);</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">input_shape</a> };</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(width_idx, output_width);</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(height_idx, output_height);</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(channel_idx, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">input_shape</a>[channel_idx] * depth_multiplier);</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a865514e30baa11b11c8fa65f944532fb"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">arm_compute::test::validation::input_shape</a></div><div class="ttdeci">input_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ae8f0126f051c787279a8c9ee3c3a5d55"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ae8f0126f051c787279a8c9ee3c3a5d55">arm_compute::test::validation::weights_shape</a></div><div class="ttdeci">weights_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7fc93f37dac131a1a40b7921f9df3a9a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">output_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_acbf8f8a6dd185de04c1981c57a8963cf"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#acbf8f8a6dd185de04c1981c57a8963cf">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00571">Winograd.cpp:571</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a64a08a9fec5aeee8650e7182b6d171d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">arm_compute::test::validation::weights</a></div><div class="ttdeci">CLTensor weights</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00180">ConvolutionLayer.cpp:180</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a46e938020a3ac8c926d0590b7fe957db"><div class="ttname"><a href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout data_layout, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00326">Helpers.inl:326</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition]</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00111">Types.h:111</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a546c6bed3c307414e8d0934bc13259e5"><div class="ttname"><a href="namespacearm__compute.xhtml#a546c6bed3c307414e8d0934bc13259e5">arm_compute::scaled_dimensions</a></div><div class="ttdeci">const std::pair&lt; unsigned int, unsigned int &gt; scaled_dimensions(unsigned int width, unsigned int height, unsigned int kernel_width, unsigned int kernel_height, const PadStrideInfo &amp;pad_stride_info, const Size2D &amp;dilation=Size2D(1U, 1U))</div><div class="ttdoc">Returns expected width and height of output scaled tensor depending on dimensions rounding mode.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00359">Utils.cpp:359</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::CHANNEL</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00571">arm_compute::test::validation::conv_info</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">ITensorInfo::data_layout()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00326">arm_compute::get_data_layout_dimension_index()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::HEIGHT</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::input_shape</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::output_shape</a>, <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00359">arm_compute::scaled_dimensions()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00180">arm_compute::test::validation::weights</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::weights_shape</a>, and <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::WIDTH</a>.</p>

<p class="reference">Referenced by <a class="el" href="_g_c_depthwise_convolution_layer3x3_kernel_8cpp_source.xhtml#l00051">GCDepthwiseConvolutionLayer3x3Kernel::configure()</a>, <a class="el" href="_n_e_depthwise_convolution_layer_8cpp_source.xhtml#l00268">NEDepthwiseConvolutionLayer::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00231">CLDepthwiseConvolutionLayer::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00128">CLDepthwiseConvolutionLayer3x3::validate()</a>, <a class="el" href="_n_e_depthwise_convolution_layer_8cpp_source.xhtml#l00401">NEDepthwiseConvolutionLayer::validate()</a>, and <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00347">CLDepthwiseConvolutionLayer::validate()</a>.</p>

</div>
</div>
<a id="a928f49376c42cf52fcff1d615034486f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a928f49376c42cf52fcff1d615034486f">&#9670;&nbsp;</a></span>compute_depthwise_convolution_shape() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_depthwise_convolution_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>weights_width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>weights_height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>depth_multiplier</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the depthwise convolution output shape of a tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">weights_width</td><td>Weights width </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">weights_height</td><td>Weights height </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">conv_info</td><td>Padding and stride information to use for the convolution. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">depth_multiplier</td><td>Multiplier to apply to the input's depth in order to retrieve the output's depth.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00442">442</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;{</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <span class="keyword">const</span> TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">input_shape</a>{ input.tensor_shape() };</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> data_layout = input.data_layout();</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        width_idx   = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::WIDTH);</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        height_idx  = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::HEIGHT);</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        channel_idx = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::CHANNEL);</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_width  = 0;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_height = 0;</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    std::tie(output_width, output_height) = <a class="code" href="namespacearm__compute.xhtml#a546c6bed3c307414e8d0934bc13259e5">scaled_dimensions</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">input_shape</a>[width_idx], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">input_shape</a>[height_idx],</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                                                              weights_width, weights_width, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acbf8f8a6dd185de04c1981c57a8963cf">conv_info</a>);</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">input_shape</a> };</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(width_idx, output_width);</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(height_idx, output_height);</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(channel_idx, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">input_shape</a>[channel_idx] * depth_multiplier);</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a865514e30baa11b11c8fa65f944532fb"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">arm_compute::test::validation::input_shape</a></div><div class="ttdeci">input_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7fc93f37dac131a1a40b7921f9df3a9a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">output_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_acbf8f8a6dd185de04c1981c57a8963cf"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#acbf8f8a6dd185de04c1981c57a8963cf">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00571">Winograd.cpp:571</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a46e938020a3ac8c926d0590b7fe957db"><div class="ttname"><a href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout data_layout, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00326">Helpers.inl:326</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition]</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00111">Types.h:111</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a546c6bed3c307414e8d0934bc13259e5"><div class="ttname"><a href="namespacearm__compute.xhtml#a546c6bed3c307414e8d0934bc13259e5">arm_compute::scaled_dimensions</a></div><div class="ttdeci">const std::pair&lt; unsigned int, unsigned int &gt; scaled_dimensions(unsigned int width, unsigned int height, unsigned int kernel_width, unsigned int kernel_height, const PadStrideInfo &amp;pad_stride_info, const Size2D &amp;dilation=Size2D(1U, 1U))</div><div class="ttdoc">Returns expected width and height of output scaled tensor depending on dimensions rounding mode.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00359">Utils.cpp:359</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::CHANNEL</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00571">arm_compute::test::validation::conv_info</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">ITensorInfo::data_layout()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00326">arm_compute::get_data_layout_dimension_index()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::HEIGHT</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::input_shape</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::output_shape</a>, <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00359">arm_compute::scaled_dimensions()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, and <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::WIDTH</a>.</p>

</div>
</div>
<a id="a83efb6708574e67d13965bcd2059ad75"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a83efb6708574e67d13965bcd2059ad75">&#9670;&nbsp;</a></span>compute_flatten_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_flatten_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>input</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the flattened output shape of a tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input tensor info</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00579">579</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;{</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    <span class="comment">// The output shape will be the flatten version of the input (i.e. [ width * height * channels, num_batches, ... ] ). Used for FlattenLayer and FullyConnectedLayer.</span></div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>{ input-&gt;tensor_shape() };</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.collapse(3);</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>;</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7fc93f37dac131a1a40b7921f9df3a9a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">output_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::output_shape</a>, and <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_fully_connected_layer_8cpp_source.xhtml#l00240">NEFullyConnectedLayer::validate()</a>, and <a class="el" href="_c_l_fully_connected_layer_8cpp_source.xhtml#l00241">CLFullyConnectedLayer::validate()</a>.</p>

</div>
</div>
<a id="ae6578c8df1088c90dfa0d1be6bca605d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae6578c8df1088c90dfa0d1be6bca605d">&#9670;&nbsp;</a></span>compute_gather_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_gather_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>input_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>indices_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>actual_axis</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l01274">1274</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;{</div><div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(indices_shape.num_dimensions() &gt; 1);</div><div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">input_shape</a>.num_dimensions() &gt; 4);</div><div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(actual_axis &gt;= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">input_shape</a>.num_dimensions());</div><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;</div><div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;    TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">input_shape</a>;</div><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>[actual_axis] = indices_shape[0];</div><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;</div><div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>;</div><div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a865514e30baa11b11c8fa65f944532fb"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">arm_compute::test::validation::input_shape</a></div><div class="ttdeci">input_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00337">Error.h:337</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7fc93f37dac131a1a40b7921f9df3a9a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">output_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00337">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::input_shape</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00122">Dimensions&lt; T &gt;::num_dimensions()</a>, and <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::output_shape</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_gather_kernel_8cpp_source.xhtml#l00107">NEGatherKernel::configure()</a>, <a class="el" href="reference_2_gather_8cpp_source.xhtml#l00040">arm_compute::test::validation::reference::gather()</a>, and <a class="el" href="_n_e_gather_kernel_8cpp_source.xhtml#l00166">NEGatherKernel::validate()</a>.</p>

</div>
</div>
<a id="a8a9286d053e9f3a958064e4f3cdd02f7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a9286d053e9f3a958064e4f3cdd02f7">&#9670;&nbsp;</a></span>compute_im2col_conv_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_im2col_conv_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>dilation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>batch_size_on_z</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_groups</em> = <code>1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the im2col output shape of a tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel_dims</td><td>The kernel dimensions (width and height). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">conv_info</td><td>Contains padding and stride information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">has_bias</td><td>In case biases are provided expands the matrix with 1 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dilation</td><td>Dilation, in elements, across x and y </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">batch_size_on_z</td><td>True if batch size is on z axis </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_groups</td><td>(Optional) Number of groups when performing a grouped convolution</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00541">541</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;{</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    <span class="comment">// The output shape will be the 3D shape [ out_channels * kernel_area, num_elems_per_out_channel, batches ]                           if batch_size_on_z == true</span></div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    <span class="comment">//                       or the 4D shape [ out_channels * kernel_area / num_groups, num_elems_per_out_channel, num_groups, batches ]  if batch_size_on_z == false</span></div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(num_groups == 0);</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(num_groups &gt; 1 &amp;&amp; input-&gt;data_layout() != DataLayout::NCHW);</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(num_groups &gt; 1 &amp;&amp; batch_size_on_z);</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>{ input-&gt;tensor_shape() };</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> data_layout = input-&gt;data_layout();</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        width_idx   = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::WIDTH);</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        height_idx  = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::HEIGHT);</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        channel_idx = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::CHANNEL);</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    std::pair&lt;unsigned int, unsigned int&gt; out_dims = <a class="code" href="namespacearm__compute.xhtml#a546c6bed3c307414e8d0934bc13259e5">scaled_dimensions</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>[width_idx], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>[height_idx], kernel_dims.width, kernel_dims.height, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acbf8f8a6dd185de04c1981c57a8963cf">conv_info</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad3fd4136244e42ad89b01c02b904336d">dilation</a>);</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(0, (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>[channel_idx] / num_groups * kernel_dims.area() + (has_bias ? 1 : 0))); <span class="comment">// NOLINT</span></div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(1, (out_dims.first * out_dims.second));</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    <span class="keywordflow">if</span>(batch_size_on_z &amp;&amp; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.num_dimensions() &gt;= 3)</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    {</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.remove_dimension(2);</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    }</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    {</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(2, num_groups);</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    }</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>;</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ad3fd4136244e42ad89b01c02b904336d"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad3fd4136244e42ad89b01c02b904336d">arm_compute::test::validation::dilation</a></div><div class="ttdeci">dilation</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00337">Error.h:337</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7fc93f37dac131a1a40b7921f9df3a9a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">output_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_acbf8f8a6dd185de04c1981c57a8963cf"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#acbf8f8a6dd185de04c1981c57a8963cf">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00571">Winograd.cpp:571</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a46e938020a3ac8c926d0590b7fe957db"><div class="ttname"><a href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout data_layout, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00326">Helpers.inl:326</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition]</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00111">Types.h:111</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a546c6bed3c307414e8d0934bc13259e5"><div class="ttname"><a href="namespacearm__compute.xhtml#a546c6bed3c307414e8d0934bc13259e5">arm_compute::scaled_dimensions</a></div><div class="ttdeci">const std::pair&lt; unsigned int, unsigned int &gt; scaled_dimensions(unsigned int width, unsigned int height, unsigned int kernel_width, unsigned int kernel_height, const PadStrideInfo &amp;pad_stride_info, const Size2D &amp;dilation=Size2D(1U, 1U))</div><div class="ttdoc">Returns expected width and height of output scaled tensor depending on dimensions rounding mode.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00359">Utils.cpp:359</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_size2_d_8h_source.xhtml#l00053">Size2D::area()</a>, <a class="el" href="_error_8h_source.xhtml#l00337">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::CHANNEL</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00571">arm_compute::test::validation::conv_info</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">ITensorInfo::data_layout()</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::dilation</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00326">arm_compute::get_data_layout_dimension_index()</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00093">Size2D::height</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::HEIGHT</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">arm_compute::NCHW</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::output_shape</a>, <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00359">arm_compute::scaled_dimensions()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00092">Size2D::width</a>, and <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::WIDTH</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00353">CLGEMMConvolutionLayer::validate()</a>.</p>

</div>
</div>
<a id="a8d52adbbcd2c53f837c96b5a3d15c4fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8d52adbbcd2c53f837c96b5a3d15c4fb">&#9670;&nbsp;</a></span>compute_interleaved_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_interleaved_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>mult_interleave4x4_height</em> = <code>1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>reinterpret_input_as_3d</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the interleaved shape of an input tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>Input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mult_interleave4x4_height</td><td>(Optional) Interleave4x4 height </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">reinterpret_input_as_3d</td><td>(Optional) Set to true if the input need to be interpreted as 3d</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00223">223</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;{</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="comment">// The interleaved output matrix will have the following shape: [ a_height * W, ceil(a_width / W) ] where W = 4 * mult_interleave4x4_height</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(mult_interleave4x4_height &lt; 1);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>   interleave_width = 4 * mult_interleave4x4_height;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    TensorShape shape_interleaved_a{ a.tensor_shape() };</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    shape_interleaved_a.set(0, a.dimension(0) * interleave_width);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keywordflow">if</span>(reinterpret_input_as_3d)</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    {</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> M      = a.dimension(1) * a.dimension(2);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> height = std::ceil(M / static_cast&lt;float&gt;(interleave_width));</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        shape_interleaved_a.set(1, height);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        <span class="comment">// When the data format is NHWC and the shapes are Nx1x1</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <span class="comment">// the tensor shape num_dimensions is automatically set to 1 instead of 3.</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <span class="comment">// To avoid failures by removing a dimension that doesn&#39;t exist</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        <span class="comment">// check if the number of dimensions is greater than 2.</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        <span class="keywordflow">if</span>(shape_interleaved_a.num_dimensions() &gt; 2)</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        {</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            shape_interleaved_a.remove_dimension(2);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        }</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    }</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    {</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        shape_interleaved_a.set(1, std::ceil(a.dimension(1) / static_cast&lt;float&gt;(interleave_width)));</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    }</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordflow">return</span> shape_interleaved_a;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00337">Error.h:337</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00337">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00078">TensorShape::set()</a>, and <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_g_e_m_m_interleave4x4_kernel_8cpp_source.xhtml#l00179">NEGEMMInterleave4x4Kernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_interleave4x4_kernel_8cpp_source.xhtml#l00119">CLGEMMInterleave4x4Kernel::configure()</a>, <a class="el" href="_n_e_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00050">NEGEMMLowpMatrixMultiplyCore::configure()</a>, and <a class="el" href="_n_e_g_e_m_m_8cpp_source.xhtml#l00137">NEGEMM::validate()</a>.</p>

</div>
</div>
<a id="a389f89ab5121dad0906d0b7324fbf73d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a389f89ab5121dad0906d0b7324fbf73d">&#9670;&nbsp;</a></span>compute_lhs_reshaped_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_lhs_reshaped_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml">GEMMLHSMatrixInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>reinterpret_input_as_3d</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the Left Hand Side matrix reshaped shape. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>Input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs_info</td><td>Left Hand Side matrix information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">reinterpret_input_as_3d</td><td>(Optional) Set to true if the input need to be interpreted as 3d</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00143">143</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;{</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(lhs_info.m0 == 0);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(lhs_info.k0 == 0);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(lhs_info.v0 == 0);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="comment">// Input width/height</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> input_width  = a.dimension(0);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> input_height = reinterpret_input_as_3d ? a.dimension(1) * a.dimension(2) : a.dimension(1);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="comment">// Number of horizontal/vertical blocks in the input tensor</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_horiz_blocks = std::ceil(input_width / static_cast&lt;float&gt;(lhs_info.k0));</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_vert_blocks  = std::ceil(input_height / static_cast&lt;float&gt;(lhs_info.m0));</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="comment">// Block size</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> block_size = lhs_info.m0 * lhs_info.k0;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="comment">// Output width/height</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_width  = block_size * num_horiz_blocks * lhs_info.v0;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_height = std::ceil(num_vert_blocks / static_cast&lt;float&gt;(lhs_info.v0));</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    TensorShape lhs_shape{ a.tensor_shape() };</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    lhs_shape.set(0, output_width);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    lhs_shape.set(1, output_height);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordflow">if</span>((reinterpret_input_as_3d) &amp;&amp; (lhs_shape.num_dimensions() &gt; 2))</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    {</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="comment">// When the data format is NHWC and the shapes are Nx1x1</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="comment">// the tensor shape num_dimensions is automatically set to 1 instead of 3.</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="comment">// To avoid failures by removing a dimension that doesn&#39;t exist</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="comment">// check if the number of dimensions is greater than 2.</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        lhs_shape.remove_dimension(2);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    }</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordflow">return</span> lhs_shape;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00337">Error.h:337</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00337">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01778">GEMMLHSMatrixInfo::k0</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01777">GEMMLHSMatrixInfo::m0</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00110">TensorShape::remove_dimension()</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00078">TensorShape::set()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01779">GEMMLHSMatrixInfo::v0</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00221">CLGEMMLowpMatrixMultiplyCore::validate()</a>, and <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml#l00233">CLGEMM::validate()</a>.</p>

</div>
</div>
<a id="a1b843e3850ed7324d11f77882cc597ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1b843e3850ed7324d11f77882cc597ae">&#9670;&nbsp;</a></span>compute_min_max_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_min_max_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>input</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the min/max shape output shape of a tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input tensor info</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00762">762</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;{</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>{ input-&gt;tensor_shape() };</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(Window::DimX, 2);</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.remove_dimension(1);</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.remove_dimension(1);</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>;</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7fc93f37dac131a1a40b7921f9df3a9a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">output_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::output_shape</a>, and <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>.</p>

</div>
</div>
<a id="adca241b012a5e00ddfcdc5a8db05a2a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adca241b012a5e00ddfcdc5a8db05a2a3">&#9670;&nbsp;</a></span>compute_mm_shape() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_mm_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_interleaved_transposed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml">GEMMReshapeInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>reshape_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the matrix multiplication output shape of two tensors. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input0</td><td>First input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input1</td><td>Second input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_interleaved_transposed</td><td>True if the input is interleaved transposed </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">reshape_info</td><td>GEMM reshape info</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00850">850</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;{</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;    <a class="code" href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a>(input0.num_dimensions() &gt; 4, <span class="stringliteral">&quot;The number of dimensions for the matrix A must be &lt;= 4&quot;</span>);</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    <a class="code" href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a>(is_interleaved_transposed &amp;&amp; reshape_info.reinterpret_input_as_3d(), <span class="stringliteral">&quot;The first input tensor cannot be reinterpreted as 3D if is_interleaved_transposed is true&quot;</span>);</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> reinterpret_input_as_3d  = reshape_info.reinterpret_input_as_3d();</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> reinterpret_output_as_3d = reshape_info.depth_output_gemm3d() != 0;</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  depth_output_gemm3d      = reinterpret_output_as_3d ? reshape_info.depth_output_gemm3d() : 1;</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  m                        = reshape_info.reinterpret_input_as_3d() ? input0.dimension(1) * input0.dimension(2) : input0.dimension(1);</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;    <span class="comment">// If the output of GEMM has to be reinterpreted as 3D, the number of input0 rows (M) is obtained collapsing the second and third</span></div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;    <span class="comment">// dimension of the output tensor</span></div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> dim0 = is_interleaved_transposed ? reshape_info.n() : input1.dimension(0);</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> dim1 = is_interleaved_transposed ? reshape_info.m() / depth_output_gemm3d : m / depth_output_gemm3d;</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> dim2 = reinterpret_input_as_3d ? input0.tensor_shape()[3] : input0.tensor_shape()[2];</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> dim3 = reinterpret_input_as_3d ? 1 : input0.tensor_shape()[3];</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;    TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>{ input0.tensor_shape() };</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(0, dim0);</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(1, dim1);</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(2, reinterpret_output_as_3d ? depth_output_gemm3d : dim2);</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(3, reinterpret_output_as_3d ? dim2 : dim3);</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(4, reinterpret_output_as_3d ? dim3 : 1);</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>;</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7fc93f37dac131a1a40b7921f9df3a9a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">output_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a5bbdcf574d3f5e412fa6a1117911e67b"><div class="ttname"><a href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond,...)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00328">Error.h:328</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00328">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01725">GEMMReshapeInfo::depth_output_gemm3d()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01682">GEMMReshapeInfo::m()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01690">GEMMReshapeInfo::n()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">ITensorInfo::num_dimensions()</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::output_shape</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01733">GEMMReshapeInfo::reinterpret_input_as_3d()</a>, and <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_g_e_m_m_8cpp_source.xhtml#l00137">NEGEMM::validate()</a>, and <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00221">CLGEMMLowpMatrixMultiplyCore::validate()</a>.</p>

</div>
</div>
<a id="a5076384fc9981ec1b497daab624a555b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5076384fc9981ec1b497daab624a555b">&#9670;&nbsp;</a></span>compute_mm_shape() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_mm_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml">GEMMReshapeInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>gemm_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the matrix multiplication output shape of two tensors. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input0</td><td>First input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input1</td><td>Second input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gemm_info</td><td>GEMM reshape info</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00886">886</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;{</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;    <a class="code" href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a>(input0.num_dimensions() &gt; 4, <span class="stringliteral">&quot;The number of dimensions for the matrix A must be &lt;= 4&quot;</span>);</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> reinterpret_output_as_3d = gemm_info.depth_output_gemm3d() != 0;</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  depth_output_gemm3d      = reinterpret_output_as_3d ? gemm_info.depth_output_gemm3d() : 1;</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;    <span class="comment">// If the output of GEMM has to be reinterpreted as 3D, the number of input0 rows (M) is obtained collapsing the second and third</span></div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;    <span class="comment">// dimension of the output tensor</span></div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> dim0 = gemm_info.n();</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> dim1 = gemm_info.m() / depth_output_gemm3d;</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> dim2 = input0.tensor_shape()[2];</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> dim3 = input0.tensor_shape()[3];</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;    TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>{ input0.tensor_shape() };</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(0, dim0);</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(1, dim1);</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(2, reinterpret_output_as_3d ? depth_output_gemm3d : dim2);</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(3, reinterpret_output_as_3d ? dim2 : dim3);</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(4, reinterpret_output_as_3d ? dim3 : 1);</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>;</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7fc93f37dac131a1a40b7921f9df3a9a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">output_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a5bbdcf574d3f5e412fa6a1117911e67b"><div class="ttname"><a href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond,...)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00328">Error.h:328</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00328">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01725">GEMMReshapeInfo::depth_output_gemm3d()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01682">GEMMReshapeInfo::m()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01690">GEMMReshapeInfo::n()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">ITensorInfo::num_dimensions()</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::output_shape</a>, and <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>.</p>

</div>
</div>
<a id="a1d3b8af21d25d9e6871673565f9f7532"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1d3b8af21d25d9e6871673565f9f7532">&#9670;&nbsp;</a></span>compute_output_stage_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_output_stage_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>gemm_3d_depth</em> = <code>1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>batch_size_on_z</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the matrix multiplication output shape of two tensors. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gemm_3d_depth</td><td>(Optional) GEMM 3d depth </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">batch_size_on_z</td><td>(Optional) True if batch size is on z axis</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00919">919</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;{</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input.data_layout() != DataLayout::NHWC &amp;&amp; gemm_3d_depth &gt; 1);</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;    TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a> = input.tensor_shape();</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;    <span class="keywordflow">if</span>(gemm_3d_depth &gt; 1)</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;    {</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;        <span class="keywordflow">if</span>(batch_size_on_z)</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;        {</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.shift_right(1);</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;        }</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(0, input.tensor_shape().x());</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(1, input.tensor_shape().y() / gemm_3d_depth);</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(2, gemm_3d_depth);</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;    }</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>;</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00337">Error.h:337</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7fc93f37dac131a1a40b7921f9df3a9a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">output_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00337">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">ITensorInfo::data_layout()</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::NHWC</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::output_shape</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00081">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00086">Dimensions&lt; T &gt;::y()</a>.</p>

</div>
</div>
<a id="a4e7f3187350db69156c1026860ace4e5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e7f3187350db69156c1026860ace4e5">&#9670;&nbsp;</a></span>compute_padded_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_padded_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>input_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">PaddingList</a> &amp;&#160;</td>
          <td class="paramname"><em>padding</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the padded shape of a tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input_shape</td><td>Input tensor shape </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">padding</td><td>Paddings list</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l01087">1087</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;{</div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;    TensorShape padded_shape = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">input_shape</a>;</div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> dim = 0; dim &lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a735a025fce26c1ef147b54426df18181">padding</a>.size(); ++dim)</div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;    {</div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>    &amp;padding_pair   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a735a025fce26c1ef147b54426df18181">padding</a>[dim];</div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;        <span class="keyword">const</span> uint32_t shape_on_index = (padded_shape.num_dimensions() &lt;= dim) ? 1 : <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">input_shape</a>[dim];</div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;        padded_shape.set(dim, padding_pair.first + shape_on_index + padding_pair.second);</div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;    }</div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;    <span class="keywordflow">return</span> padded_shape;</div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a865514e30baa11b11c8fa65f944532fb"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">arm_compute::test::validation::input_shape</a></div><div class="ttdeci">input_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a735a025fce26c1ef147b54426df18181"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a735a025fce26c1ef147b54426df18181">arm_compute::test::validation::padding</a></div><div class="ttdeci">const PaddingSize padding</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00113">AbsoluteDifference.cpp:113</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::input_shape</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00122">Dimensions&lt; T &gt;::num_dimensions()</a>, <a class="el" href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00113">arm_compute::test::validation::padding</a>, and <a class="el" href="_tensor_shape_8h_source.xhtml#l00078">TensorShape::set()</a>.</p>

<p class="reference">Referenced by <a class="el" href="reference_2_pad_layer_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::pad_layer()</a>.</p>

</div>
</div>
<a id="a593fb7ecc281425b190cd6f20164b1a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a593fb7ecc281425b190cd6f20164b1a3">&#9670;&nbsp;</a></span>compute_permutation_output_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_permutation_output_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">PermutationVector</a> &amp;&#160;</td>
          <td class="paramname"><em>perm</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the permuted shape of an input given a permutation vector. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">perm</td><td>Permutation vector</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00071">71</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;{</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a> = input.tensor_shape();</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a21c3e11887f3acf9284ca763372c7da0">permute</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>, perm);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a21c3e11887f3acf9284ca763372c7da0"><div class="ttname"><a href="namespacearm__compute.xhtml#a21c3e11887f3acf9284ca763372c7da0">arm_compute::permute</a></div><div class="ttdeci">void permute(Dimensions&lt; T &gt; &amp;dimensions, const PermutationVector &amp;perm)</div><div class="ttdoc">Permutes given Dimensions according to a permutation vector.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00570">Helpers.h:570</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7fc93f37dac131a1a40b7921f9df3a9a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">output_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::output_shape</a>, <a class="el" href="arm__compute_2core_2_helpers_8h_source.xhtml#l00570">arm_compute::permute()</a>, and <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_p_p_permute_kernel_8cpp_source.xhtml#l00108">CPPPermuteKernel::configure()</a>, and <a class="el" href="_n_e_permute_kernel_8cpp_source.xhtml#l00242">NEPermuteKernel::configure()</a>.</p>

</div>
</div>
<a id="ad242bedd6845b8fc13ade41cfc062c83"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad242bedd6845b8fc13ade41cfc062c83">&#9670;&nbsp;</a></span>compute_pool_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_pool_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a>&#160;</td>
          <td class="paramname"><em>pool_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the output pool shape of a tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pool_info</td><td>Pooling layer info</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00779">779</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;{</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pooled_w = 0;</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pooled_h = 0;</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;    TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>{ input.tensor_shape() };</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>         is_global_pooling = pool_info.is_global_pooling();</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> idx_width         = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(input.data_layout(), DataLayoutDimension::WIDTH);</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> idx_height        = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(input.data_layout(), DataLayoutDimension::HEIGHT);</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pool_size_x       = is_global_pooling ? <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>[idx_width] : pool_info.pool_size().width;</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pool_size_y       = is_global_pooling ? <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>[idx_height] : pool_info.pool_size().height;</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;    std::tie(pooled_w, pooled_h) = <a class="code" href="namespacearm__compute.xhtml#a546c6bed3c307414e8d0934bc13259e5">scaled_dimensions</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>[idx_width],</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;                                                     <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>[idx_height],</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;                                                     pool_size_x,</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;                                                     pool_size_y,</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;                                                     pool_info.pad_stride_info());</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(idx_width, pooled_w);</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(idx_height, pooled_h);</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>;</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7fc93f37dac131a1a40b7921f9df3a9a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">output_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a46e938020a3ac8c926d0590b7fe957db"><div class="ttname"><a href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout data_layout, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00326">Helpers.inl:326</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a546c6bed3c307414e8d0934bc13259e5"><div class="ttname"><a href="namespacearm__compute.xhtml#a546c6bed3c307414e8d0934bc13259e5">arm_compute::scaled_dimensions</a></div><div class="ttdeci">const std::pair&lt; unsigned int, unsigned int &gt; scaled_dimensions(unsigned int width, unsigned int height, unsigned int kernel_width, unsigned int kernel_height, const PadStrideInfo &amp;pad_stride_info, const Size2D &amp;dilation=Size2D(1U, 1U))</div><div class="ttdoc">Returns expected width and height of output scaled tensor depending on dimensions rounding mode.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00359">Utils.cpp:359</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">ITensorInfo::data_layout()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00326">arm_compute::get_data_layout_dimension_index()</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00093">Size2D::height</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::HEIGHT</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01192">PoolingLayerInfo::is_global_pooling()</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::output_shape</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01182">PoolingLayerInfo::pad_stride_info()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01177">PoolingLayerInfo::pool_size()</a>, <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00359">arm_compute::scaled_dimensions()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00092">Size2D::width</a>, and <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::WIDTH</a>.</p>

<p class="reference">Referenced by <a class="el" href="validation_2reference_2_pooling_layer_8cpp_source.xhtml#l00041">arm_compute::test::validation::reference::pooling_layer()</a>.</p>

</div>
</div>
<a id="ae3f672f124e4228db364bb811e770226"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae3f672f124e4228db364bb811e770226">&#9670;&nbsp;</a></span>compute_prior_box_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_prior_box_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_prior_box_layer_info.xhtml">PriorBoxLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the prior box output shape of a tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>PriorBoxLayer info</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l01066">1066</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;{</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>   data_layout = input.data_layout();</div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> idx_w       = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::WIDTH);</div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> idx_h       = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::HEIGHT);</div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    num_priors  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.aspect_ratios().size() * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.min_sizes().size() + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.max_sizes().size();</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;</div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;    TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>{};</div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(0, input.dimension(idx_w) * input.dimension(idx_h) * num_priors * 4);</div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(1, 2);</div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;</div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>;</div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7fc93f37dac131a1a40b7921f9df3a9a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">output_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a46e938020a3ac8c926d0590b7fe957db"><div class="ttname"><a href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout data_layout, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00326">Helpers.inl:326</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f4125dba5283887b34f889b1c615c0c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">arm_compute::test::validation::info</a></div><div class="ttdeci">info</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition]</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00111">Types.h:111</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">ITensorInfo::data_layout()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00326">arm_compute::get_data_layout_dimension_index()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::HEIGHT</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::info</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::output_shape</a>, and <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::WIDTH</a>.</p>

</div>
</div>
<a id="a0b0f2e38b65473f68561e0598c3107ff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0b0f2e38b65473f68561e0598c3107ff">&#9670;&nbsp;</a></span>compute_reduced_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_reduced_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>axis</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the reduced shape of a tensor given an axis. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">axis</td><td>Axis on which to perform reduction</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l01123">1123</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;{</div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;    TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>{ input };</div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#accc088009d44c521706aa98d6387ee21">axis</a>, 1);</div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;</div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>;</div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7fc93f37dac131a1a40b7921f9df3a9a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">output_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_accc088009d44c521706aa98d6387ee21"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#accc088009d44c521706aa98d6387ee21">arm_compute::test::validation::axis</a></div><div class="ttdeci">axis</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_stack_layer_8cpp_source.xhtml#l00226">StackLayer.cpp:226</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_o_n_2_stack_layer_8cpp_source.xhtml#l00226">arm_compute::test::validation::axis</a>, and <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::output_shape</a>.</p>

</div>
</div>
<a id="a60ce6c017f70d978b48b101ce314969e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a60ce6c017f70d978b48b101ce314969e">&#9670;&nbsp;</a></span>compute_reductionA_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_reductionA_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the reductionA shape used in GEMMLowp. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">b</td><td>Input tensor info</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00320">320</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;{</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    TensorShape shape_vector_sum_col{ b.tensor_shape() };</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keywordflow">if</span>(shape_vector_sum_col.num_dimensions() &gt; 1)</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    {</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        shape_vector_sum_col.remove_dimension(1);</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    }</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="keywordflow">return</span> shape_vector_sum_col;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;}</div></div><!-- fragment -->
<p class="reference">References <a class="el" href="_tensor_shape_8h_source.xhtml#l00110">TensorShape::remove_dimension()</a>, and <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00050">NEGEMMLowpMatrixMultiplyCore::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00074">CLGEMMLowpMatrixMultiplyCore::configure()</a>, <a class="el" href="_n_e_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00185">NEGEMMLowpMatrixMultiplyCore::validate()</a>, and <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00221">CLGEMMLowpMatrixMultiplyCore::validate()</a>.</p>

</div>
</div>
<a id="a69f9b3191aafc4905f9d029ff9d48fea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a69f9b3191aafc4905f9d029ff9d48fea">&#9670;&nbsp;</a></span>compute_reductionB_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_reductionB_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the reductionB shape used in GEMMLowp. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>Input tensor info</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00337">337</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;{</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    TensorShape shape_vector_sum_row{ a.tensor_shape() };</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    shape_vector_sum_row.set(Window::DimX, a.dimension(1));</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keywordflow">if</span>(shape_vector_sum_row.num_dimensions() &gt; 1)</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    {</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        shape_vector_sum_row.remove_dimension(1);</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    }</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="keywordflow">return</span> shape_vector_sum_row;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;}</div></div><!-- fragment -->
<p class="reference">References <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00110">TensorShape::remove_dimension()</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00078">TensorShape::set()</a>, and <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00050">NEGEMMLowpMatrixMultiplyCore::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00074">CLGEMMLowpMatrixMultiplyCore::configure()</a>, <a class="el" href="_n_e_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00185">NEGEMMLowpMatrixMultiplyCore::validate()</a>, and <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00221">CLGEMMLowpMatrixMultiplyCore::validate()</a>.</p>

</div>
</div>
<a id="afbc83cd4145d161da4c026e1f5743e1d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afbc83cd4145d161da4c026e1f5743e1d">&#9670;&nbsp;</a></span>compute_reorg_output_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_reorg_output_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>stride</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the output shape of the reorg layer given a stride. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">stride</td><td>Stride</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00085">85</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;{</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> idx_width   = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(input.data_layout(), DataLayoutDimension::WIDTH);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> idx_height  = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(input.data_layout(), DataLayoutDimension::HEIGHT);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> idx_channel = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(input.data_layout(), DataLayoutDimension::CHANNEL);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(stride &lt;= 0);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <a class="code" href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a>((input.tensor_shape()[idx_width] % stride != 0), <span class="stringliteral">&quot;The width of the input tensor must be a multiple of stride&quot;</span>);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <a class="code" href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a>((input.tensor_shape()[idx_height] % stride != 0), <span class="stringliteral">&quot;The height of the input tensor must be a multiple of stride&quot;</span>);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>{ input.tensor_shape() };</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(idx_width, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>[idx_width] / stride);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(idx_height, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>[idx_height] / stride);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(idx_channel, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>[idx_channel] * stride * stride);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00337">Error.h:337</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7fc93f37dac131a1a40b7921f9df3a9a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">output_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a46e938020a3ac8c926d0590b7fe957db"><div class="ttname"><a href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout data_layout, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00326">Helpers.inl:326</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a5bbdcf574d3f5e412fa6a1117911e67b"><div class="ttname"><a href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond,...)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00328">Error.h:328</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00337">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_error_8h_source.xhtml#l00328">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::CHANNEL</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">ITensorInfo::data_layout()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00326">arm_compute::get_data_layout_dimension_index()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::HEIGHT</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::output_shape</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, and <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::WIDTH</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_reorg_layer_kernel_8cpp_source.xhtml#l00076">CLReorgLayerKernel::configure()</a>, <a class="el" href="_n_e_reorg_layer_kernel_8cpp_source.xhtml#l00114">NEReorgLayerKernel::configure()</a>, and <a class="el" href="reference_2_reorg_layer_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::reorg_layer()</a>.</p>

</div>
</div>
<a id="a3f10bc0f3e2a0126ce8c26e3d6a8fb96"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f10bc0f3e2a0126ce8c26e3d6a8fb96">&#9670;&nbsp;</a></span>compute_reshaped_depthwise_weights_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_reshaped_depthwise_weights_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_depthwise_convolution_reshape_info.xhtml">DepthwiseConvolutionReshapeInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the reshaped shape of the weights to use in depthwise convolution. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Depthwise convolution information to be used for reshaping.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00260">260</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;{</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>  data_layout = input.data_layout();</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae8f0126f051c787279a8c9ee3c3a5d55">weights_shape</a>{};</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    width_idx    = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::WIDTH);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    height_idx   = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::HEIGHT);</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    channel_idx  = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::CHANNEL);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> num_channels = input.dimension(channel_idx);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> num_rows     = input.dimension(height_idx);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> num_cols     = input.dimension(width_idx);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae8f0126f051c787279a8c9ee3c3a5d55">weights_shape</a>.set(0, num_rows * num_cols * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.c0);</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae8f0126f051c787279a8c9ee3c3a5d55">weights_shape</a>.set(1, <a class="code" href="namespacearm__compute.xhtml#acac1575c0edd329ceb4a54d9fe8dcb08">DIV_CEIL</a>(num_channels, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.c0));</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae8f0126f051c787279a8c9ee3c3a5d55">weights_shape</a>;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_acac1575c0edd329ceb4a54d9fe8dcb08"><div class="ttname"><a href="namespacearm__compute.xhtml#acac1575c0edd329ceb4a54d9fe8dcb08">arm_compute::DIV_CEIL</a></div><div class="ttdeci">constexpr auto DIV_CEIL(S val, T m) -&gt; decltype((val+m - 1)/m)</div><div class="ttdoc">Calculate the rounded up quotient of val / m.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l00052">Utils.h:52</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ae8f0126f051c787279a8c9ee3c3a5d55"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ae8f0126f051c787279a8c9ee3c3a5d55">arm_compute::test::validation::weights_shape</a></div><div class="ttdeci">weights_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a46e938020a3ac8c926d0590b7fe957db"><div class="ttname"><a href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout data_layout, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00326">Helpers.inl:326</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f4125dba5283887b34f889b1c615c0c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">arm_compute::test::validation::info</a></div><div class="ttdeci">info</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::CHANNEL</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">ITensorInfo::data_layout()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l00052">arm_compute::DIV_CEIL()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00326">arm_compute::get_data_layout_dimension_index()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::HEIGHT</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::info</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::weights_shape</a>, and <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::WIDTH</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00128">CLDepthwiseConvolutionLayer3x3::validate()</a>.</p>

</div>
</div>
<a id="a09ad10a110d947fd9c444b2ea5e4c127"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a09ad10a110d947fd9c444b2ea5e4c127">&#9670;&nbsp;</a></span>compute_rhs_reshaped_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_rhs_reshaped_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml">GEMMRHSMatrixInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the Right Hand Side matrix reshaped shape. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>Input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs_info</td><td>Right Hand Side matrix information</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00187">187</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;{</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(rhs_info.n0 == 0);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(rhs_info.k0 == 0);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(rhs_info.h0 == 0);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="comment">// Input width/height</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> input_width  = a.dimension(0);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> input_height = a.dimension(1);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="comment">// Number of horizontal/vertical blocks in the input tensor</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_horiz_blocks = std::ceil(input_width / static_cast&lt;float&gt;(rhs_info.n0));</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_vert_blocks  = std::ceil(input_height / static_cast&lt;float&gt;(rhs_info.k0));</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="comment">// Block size</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> block_size = rhs_info.n0 * rhs_info.k0;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="comment">// Output width/height</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_width  = block_size * num_vert_blocks * rhs_info.h0;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_height = std::ceil(num_horiz_blocks / static_cast&lt;float&gt;(rhs_info.h0));</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    TensorShape rhs_shape{ a.tensor_shape() };</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    rhs_shape.set(0, output_width);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    rhs_shape.set(1, output_height);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keywordflow">return</span> rhs_shape;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00337">Error.h:337</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00337">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01789">GEMMRHSMatrixInfo::h0</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01788">GEMMRHSMatrixInfo::k0</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01787">GEMMRHSMatrixInfo::n0</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00078">TensorShape::set()</a>, and <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_2_g_e_m_m_reshape_r_h_s_matrix_8cpp_source.xhtml#l00093">arm_compute::test::validation::DATA_TEST_CASE()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00221">CLGEMMLowpMatrixMultiplyCore::validate()</a>, and <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml#l00233">CLGEMM::validate()</a>.</p>

</div>
</div>
<a id="af98bc3ef5c65dbb63bc79700ccdd043b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af98bc3ef5c65dbb63bc79700ccdd043b">&#9670;&nbsp;</a></span>compute_rnn_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_rnn_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>batch_size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the RNN shape of a tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">batch_size</td><td>Batch size</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00833">833</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;{</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;    TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>{ input-&gt;tensor_shape() };</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(1, batch_size);</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>;</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7fc93f37dac131a1a40b7921f9df3a9a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">output_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::output_shape</a>, and <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_r_n_n_layer_8cpp_source.xhtml#l00069">CLRNNLayer::configure()</a>, <a class="el" href="_n_e_r_n_n_layer_8cpp_source.xhtml#l00067">NERNNLayer::configure()</a>, <a class="el" href="_c_l_r_n_n_layer_8cpp_source.xhtml#l00044">CLRNNLayer::validate()</a>, and <a class="el" href="_n_e_r_n_n_layer_8cpp_source.xhtml#l00042">NERNNLayer::validate()</a>.</p>

</div>
</div>
<a id="a3d3eaddfd85c16e7a9a385ba0e6a45b0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d3eaddfd85c16e7a9a385ba0e6a45b0">&#9670;&nbsp;</a></span>compute_roi_align_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_roi_align_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>rois</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">ROIPoolingLayerInfo</a>&#160;</td>
          <td class="paramname"><em>pool_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the output roi align shape of a tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rois</td><td>Rois tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pool_info</td><td>Pooling layer info</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00812">812</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;{</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;    TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>{ input.tensor_shape() };</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> idx_width  = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(input.data_layout(), DataLayoutDimension::WIDTH);</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> idx_height = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(input.data_layout(), DataLayoutDimension::HEIGHT);</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(idx_width, pool_info.pooled_width());</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(idx_height, pool_info.pooled_height());</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(3, rois.dimension(1));</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>;</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7fc93f37dac131a1a40b7921f9df3a9a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">output_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a46e938020a3ac8c926d0590b7fe957db"><div class="ttname"><a href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout data_layout, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00326">Helpers.inl:326</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">ITensorInfo::data_layout()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00326">arm_compute::get_data_layout_dimension_index()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::HEIGHT</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::output_shape</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01226">ROIPoolingLayerInfo::pooled_height()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01221">ROIPoolingLayerInfo::pooled_width()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, and <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::WIDTH</a>.</p>

</div>
</div>
<a id="a30c67d11c15378ffe67ca3c31e848917"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a30c67d11c15378ffe67ca3c31e848917">&#9670;&nbsp;</a></span>compute_slice_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_slice_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>input_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>starts</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>ends</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the slice output shape of a tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input_shape</td><td>Input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">starts</td><td>The starts of the dimensions of the input tensor to be sliced </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ends</td><td>The ends of the dimensions of the input tensor to be sliced</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00966">966</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;{</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml">arm_compute::helpers::tensor_transform</a>;</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml#adb1ed814b11a751017250143fb1a9174">compute_strided_slice_output_shape</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">input_shape</a>,</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;                                              starts, ends, <a class="code" href="namespacearm__compute.xhtml#a11916d4148a39a67794050373f54825a">BiStrides</a>(),</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;                                              0, <a class="code" href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml#a396d80389277ad8cd13a5e0567776191">construct_slice_end_mask</a>(ends), 0);</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a865514e30baa11b11c8fa65f944532fb"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">arm_compute::test::validation::input_shape</a></div><div class="ttdeci">input_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a11916d4148a39a67794050373f54825a"><div class="ttname"><a href="namespacearm__compute.xhtml#a11916d4148a39a67794050373f54825a">arm_compute::BiStrides</a></div><div class="ttdeci">Coordinates BiStrides</div><div class="ttdoc">Bidirectional strides.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00049">Types.h:49</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1helpers_1_1tensor__transform_xhtml"><div class="ttname"><a href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml">arm_compute::helpers::tensor_transform</a></div><div class="ttdef"><b>Definition:</b> <a href="tensor__transform_8h_source.xhtml#l00033">tensor_transform.h:33</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1helpers_1_1tensor__transform_xhtml_a396d80389277ad8cd13a5e0567776191"><div class="ttname"><a href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml#a396d80389277ad8cd13a5e0567776191">arm_compute::helpers::tensor_transform::construct_slice_end_mask</a></div><div class="ttdeci">int32_t construct_slice_end_mask(Coordinates ends)</div><div class="ttdoc">Constructs end mask in case we want to perform a slice operation using the strided slice interface.</div><div class="ttdef"><b>Definition:</b> <a href="tensor__transform_8cpp_source.xhtml#l00162">tensor_transform.cpp:162</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1helpers_1_1tensor__transform_xhtml_adb1ed814b11a751017250143fb1a9174"><div class="ttname"><a href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml#adb1ed814b11a751017250143fb1a9174">arm_compute::helpers::tensor_transform::compute_strided_slice_output_shape</a></div><div class="ttdeci">TensorShape compute_strided_slice_output_shape(TensorShape input_shape, Coordinates starts, Coordinates ends, Coordinates strides, int32_t begin_mask=0, int32_t end_mask=0, int32_t shrink_axis_mask=0, bool return_unshrinked=false)</div><div class="ttdoc">Computes output shape of strided slice.</div><div class="ttdef"><b>Definition:</b> <a href="tensor__transform_8cpp_source.xhtml#l00129">tensor_transform.cpp:129</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="tensor__transform_8cpp_source.xhtml#l00129">arm_compute::helpers::tensor_transform::compute_strided_slice_output_shape()</a>, <a class="el" href="tensor__transform_8cpp_source.xhtml#l00162">arm_compute::helpers::tensor_transform::construct_slice_end_mask()</a>, and <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::input_shape</a>.</p>

<p class="reference">Referenced by <a class="el" href="_slice_layer_node_8cpp_source.xhtml#l00052">SliceLayerNode::compute_output_descriptor()</a>, and <a class="el" href="_slice_operations_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::slice()</a>.</p>

</div>
</div>
<a id="ad16b366db486fec63b6d962937ec4545"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad16b366db486fec63b6d962937ec4545">&#9670;&nbsp;</a></span>compute_softmax_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_softmax_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>axis</em> = <code>1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the softmax output shape of a tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">axis</td><td>(Optional) Softmax axis</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00597">597</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;{</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    <span class="comment">// The output shape will be a 2D version of the input. For instance:</span></div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    <span class="comment">// - [x,y,z] and axis 1 will return [x, y*z]</span></div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    <span class="comment">// - [x,y,z,w] and axis 2 will return [x*y, w*z]</span></div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    <span class="comment">// - [x,y,z,w] and axis 3 will return [x*y*z, w]</span></div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    TensorShape shape2D = input-&gt;tensor_shape();</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    <span class="keywordflow">if</span>(axis &lt; input-&gt;num_dimensions())</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    {</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;        <span class="comment">// Collapse from axis onward (this changes the shape)</span></div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;        shape2D.collapse_from(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#accc088009d44c521706aa98d6387ee21">axis</a>);</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;        <span class="comment">// Collapse the rest (collapse is inclusive)</span></div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;        shape2D.collapse(shape2D.num_dimensions() - 1);</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    }</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    {</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;        <span class="comment">// Collapse everything</span></div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;        shape2D.collapse(shape2D.num_dimensions());</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    }</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#accc088009d44c521706aa98d6387ee21">axis</a> == 0)</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    {</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;        <span class="comment">// If axis is zero the first dim should be one. Since</span></div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;        <span class="comment">// collapse is an inclusive operation we need to shift</span></div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;        shape2D.shift_right(1);</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    }</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    <span class="keywordflow">return</span> shape2D;</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_accc088009d44c521706aa98d6387ee21"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#accc088009d44c521706aa98d6387ee21">arm_compute::test::validation::axis</a></div><div class="ttdeci">axis</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_stack_layer_8cpp_source.xhtml#l00226">StackLayer.cpp:226</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_o_n_2_stack_layer_8cpp_source.xhtml#l00226">arm_compute::test::validation::axis</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00132">TensorShape::collapse()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00162">Dimensions&lt; T &gt;::collapse_from()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00122">Dimensions&lt; T &gt;::num_dimensions()</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00143">TensorShape::shift_right()</a>, and <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_softmax_layer_8cpp_source.xhtml#l00148">CLSoftmaxLayer::validate()</a>, and <a class="el" href="_n_e_softmax_layer_8cpp_source.xhtml#l00141">NESoftmaxLayer::validate()</a>.</p>

</div>
</div>
<a id="a585529133e437dc5f935d33de17c4abb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a585529133e437dc5f935d33de17c4abb">&#9670;&nbsp;</a></span>compute_space_to_batch_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_space_to_batch_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>block_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>block_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>padding_left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>padding_right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the space to batch output shape of a tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">block_x</td><td>Block shape x value </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">block_y</td><td>Block shape y value </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">padding_left</td><td>Left padding values </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">padding_right</td><td>Right padding values</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l01043">1043</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;{</div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;    TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>{ input-&gt;tensor_shape() };</div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;</div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> data_layout = input-&gt;data_layout();</div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        idx_width   = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::WIDTH);</div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        idx_height  = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::HEIGHT);</div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        idx_batch   = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::BATCHES);</div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(idx_width, input-&gt;tensor_shape()[idx_width] * block_x + padding_left.x() + padding_right.x());</div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(idx_height, input-&gt;tensor_shape()[idx_height] * block_y + padding_left.y() + padding_right.y());</div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(idx_batch, input-&gt;tensor_shape()[idx_batch] / (block_x * block_y));</div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;</div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>;</div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7fc93f37dac131a1a40b7921f9df3a9a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">output_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a46e938020a3ac8c926d0590b7fe957db"><div class="ttname"><a href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout data_layout, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00326">Helpers.inl:326</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition]</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00111">Types.h:111</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a628bcf7e10fc1c2a984f379a1ec3393a">arm_compute::BATCHES</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">ITensorInfo::data_layout()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00326">arm_compute::get_data_layout_dimension_index()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::HEIGHT</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::output_shape</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::WIDTH</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00077">Size2D::x()</a>, and <a class="el" href="_size2_d_8h_source.xhtml#l00086">Size2D::y()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00120">CLSpaceToBatchLayerKernel::configure()</a>.</p>

</div>
</div>
<a id="abe10cfa0b480704109fd1a925301f58b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe10cfa0b480704109fd1a925301f58b">&#9670;&nbsp;</a></span>compute_split_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_split_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_splits</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the split output shape of a tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">axis</td><td>Axis on which to split the input </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_splits</td><td>Number of splits</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l01008">1008</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;{</div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;    TensorShape empty_shape;</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;    empty_shape.set(0, 0);</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;    TensorShape out_shape{ input-&gt;tensor_shape() };</div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;    <span class="comment">// Return empty shape if axis is invalid</span></div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#accc088009d44c521706aa98d6387ee21">axis</a> &gt; input-&gt;tensor_shape().num_dimensions())</div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;    {</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;        <span class="keywordflow">return</span> empty_shape;</div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;    }</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;</div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;    <span class="keywordtype">size_t</span> axis_size = out_shape[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#accc088009d44c521706aa98d6387ee21">axis</a>];</div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;</div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;    <span class="comment">// Return empty shape if num_split is not valid</span></div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;    <span class="keywordflow">if</span>(axis_size % num_splits)</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;    {</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;        <span class="keywordflow">return</span> empty_shape;</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;    }</div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;</div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;    out_shape[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#accc088009d44c521706aa98d6387ee21">axis</a>] = axis_size / num_splits;</div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;    <span class="keywordflow">return</span> out_shape;</div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_accc088009d44c521706aa98d6387ee21"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#accc088009d44c521706aa98d6387ee21">arm_compute::test::validation::axis</a></div><div class="ttdeci">axis</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_stack_layer_8cpp_source.xhtml#l00226">StackLayer.cpp:226</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_o_n_2_stack_layer_8cpp_source.xhtml#l00226">arm_compute::test::validation::axis</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00122">Dimensions&lt; T &gt;::num_dimensions()</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00078">TensorShape::set()</a>, and <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_split_8cpp_source.xhtml#l00042">CLSplit::configure()</a>, <a class="el" href="_n_e_split_8cpp_source.xhtml#l00042">NESplit::configure()</a>, <a class="el" href="_n_e_split_8cpp_source.xhtml#l00090">NESplit::validate()</a>, and <a class="el" href="_c_l_split_8cpp_source.xhtml#l00090">CLSplit::validate()</a>.</p>

</div>
</div>
<a id="a32c692ab35f40f9ce6e27e1f4016e921"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a32c692ab35f40f9ce6e27e1f4016e921">&#9670;&nbsp;</a></span>compute_stack_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_stack_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_tensors</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the stack output shape of a tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>Input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">axis</td><td>Axis on which to perform the stack operation </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_tensors</td><td>Number of tensors to stack</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l01252">1252</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;{</div><div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#accc088009d44c521706aa98d6387ee21">axis</a> &gt; a.num_dimensions());</div><div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(a.num_dimensions() &gt; 4);</div><div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;</div><div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;    TensorShape shape_out{ a.tensor_shape() };</div><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;    shape_out.set(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#accc088009d44c521706aa98d6387ee21">axis</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f2a0a7758d36198492af046c46ddbf5">num_tensors</a>);</div><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;</div><div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i_shift = 0;</div><div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;</div><div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; a.num_dimensions(); ++i)</div><div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;    {</div><div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;        <span class="keywordflow">if</span>(i == <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#accc088009d44c521706aa98d6387ee21">axis</a>)</div><div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;        {</div><div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;            i_shift++;</div><div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;        }</div><div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;</div><div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;        shape_out.set(i + i_shift, a.tensor_shape()[i]);</div><div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;    }</div><div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;    <span class="keywordflow">return</span> shape_out;</div><div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00337">Error.h:337</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f2a0a7758d36198492af046c46ddbf5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f2a0a7758d36198492af046c46ddbf5">arm_compute::test::validation::num_tensors</a></div><div class="ttdeci">num_tensors</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_stack_layer_8cpp_source.xhtml#l00227">StackLayer.cpp:227</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_accc088009d44c521706aa98d6387ee21"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#accc088009d44c521706aa98d6387ee21">arm_compute::test::validation::axis</a></div><div class="ttdeci">axis</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_stack_layer_8cpp_source.xhtml#l00226">StackLayer.cpp:226</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00337">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_n_e_o_n_2_stack_layer_8cpp_source.xhtml#l00226">arm_compute::test::validation::axis</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">ITensorInfo::num_dimensions()</a>, <a class="el" href="_n_e_o_n_2_stack_layer_8cpp_source.xhtml#l00227">arm_compute::test::validation::num_tensors</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00078">TensorShape::set()</a>, and <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>.</p>

</div>
</div>
<a id="ab288dc7ed664925c6f992b0e6aa3bc1b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab288dc7ed664925c6f992b0e6aa3bc1b">&#9670;&nbsp;</a></span>compute_strided_slice_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_strided_slice_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>starts</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>ends</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>strides</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>begin_mask</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>end_mask</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>shrink_axis_mask</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the strided slice output shape of a tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">starts</td><td>The starts of the dimensions of the input tensor to be sliced </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ends</td><td>The ends of the dimensions of the input tensor to be sliced </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">strides</td><td>The strides of the dimensions of the input tensor to be sliced </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">begin_mask</td><td>If the ith bit of begin_mask is set, starts[i] is ignored and the fullest possible range in that dimension is used instead. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">end_mask</td><td>If the ith bit of end_mask is set, ends[i] is ignored and the fullest possible range in that dimension is used instead. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">shrink_axis_mask</td><td>If the ith bit of shrink_axis_mask is set, it implies that the ith specification shrinks the dimensionality by 1</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00950">950</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;{</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml">arm_compute::helpers::tensor_transform</a>;</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml#adb1ed814b11a751017250143fb1a9174">compute_strided_slice_output_shape</a>(input.tensor_shape(), starts, ends, strides, begin_mask, end_mask, shrink_axis_mask);</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1helpers_1_1tensor__transform_xhtml"><div class="ttname"><a href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml">arm_compute::helpers::tensor_transform</a></div><div class="ttdef"><b>Definition:</b> <a href="tensor__transform_8h_source.xhtml#l00033">tensor_transform.h:33</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1helpers_1_1tensor__transform_xhtml_adb1ed814b11a751017250143fb1a9174"><div class="ttname"><a href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml#adb1ed814b11a751017250143fb1a9174">arm_compute::helpers::tensor_transform::compute_strided_slice_output_shape</a></div><div class="ttdeci">TensorShape compute_strided_slice_output_shape(TensorShape input_shape, Coordinates starts, Coordinates ends, Coordinates strides, int32_t begin_mask=0, int32_t end_mask=0, int32_t shrink_axis_mask=0, bool return_unshrinked=false)</div><div class="ttdoc">Computes output shape of strided slice.</div><div class="ttdef"><b>Definition:</b> <a href="tensor__transform_8cpp_source.xhtml#l00129">tensor_transform.cpp:129</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="tensor__transform_8cpp_source.xhtml#l00129">arm_compute::helpers::tensor_transform::compute_strided_slice_output_shape()</a>, and <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>.</p>

</div>
</div>
<a id="a626cdfbacb377ee26462155d421717d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a626cdfbacb377ee26462155d421717d3">&#9670;&nbsp;</a></span>compute_tiled_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_tiled_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>input_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#afe9e10e5fdfd1e2665ac17c75c0cacd8">Multiples</a> &amp;&#160;</td>
          <td class="paramname"><em>multiples</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the tiled shape of a tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input_shape</td><td>Input tensor shape </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">multiples</td><td>Paddings list</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l01106">1106</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;{</div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;    TensorShape tiled_shape = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">input_shape</a>;</div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> dim = 0; dim &lt; multiples.size(); ++dim)</div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;    {</div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;        tiled_shape.set(dim, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">input_shape</a>[dim] * multiples[dim]);</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;    }</div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;    <span class="keywordflow">return</span> tiled_shape;</div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a865514e30baa11b11c8fa65f944532fb"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a865514e30baa11b11c8fa65f944532fb">arm_compute::test::validation::input_shape</a></div><div class="ttdeci">input_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::input_shape</a>, and <a class="el" href="_tensor_shape_8h_source.xhtml#l00078">TensorShape::set()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_tile_kernel_8cpp_source.xhtml#l00068">CLTileKernel::configure()</a>, <a class="el" href="_n_e_tile_kernel_8cpp_source.xhtml#l00064">NETileKernel::configure()</a>, and <a class="el" href="reference_2_tile_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::tile()</a>.</p>

</div>
</div>
<a id="a70a2ef9fd754b5798a0a92656f8b5fcf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a70a2ef9fd754b5798a0a92656f8b5fcf">&#9670;&nbsp;</a></span>compute_transpose1xW_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_transpose1xW_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the transposed 1xW shape. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">b</td><td>Input tensor info</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00283">283</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;{</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="comment">// The transpose1xW output matrix will have the following shape: [ b_height * 16, ceil(b_width / 16.0f) ]</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    TensorShape shape_transposed1xW_b{ b.tensor_shape() };</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    shape_transposed1xW_b.set(0, b.dimension(1) * 16);</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    shape_transposed1xW_b.set(1, std::ceil(b.dimension(0) / 16.f));</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="keywordflow">return</span> shape_transposed1xW_b;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;}</div></div><!-- fragment -->
<p class="reference">References <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00078">TensorShape::set()</a>, and <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00050">NEGEMMLowpMatrixMultiplyCore::configure()</a>.</p>

</div>
</div>
<a id="a5797726a8fbee3b11b92757c2f0031d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5797726a8fbee3b11b92757c2f0031d6">&#9670;&nbsp;</a></span>compute_transpose1xW_with_element_size_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_transpose1xW_with_element_size_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>mult_transpose1xW_width</em> = <code>1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the transposed 1xW width element shape. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">b</td><td>Input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mult_transpose1xW_width</td><td>(Optional) Transpose1xW width</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00300">300</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;{</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="comment">// Note: mult_transpose1xW_width expresses the number of chunks with size 1x(W) we want to store on the same row</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="comment">//       The transpose1xW output matrix will have the following shape:</span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="comment">//       [ b_height * W, ceil(b_width / W) ] where W = (16 / element size of the tensor) * mult_transpose1xW_width</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(mult_transpose1xW_width &lt; 1);</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    TensorShape  shape_transposed1xW_b{ b.tensor_shape() };</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> transpose_width = (16 / b.element_size()) * mult_transpose1xW_width;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    shape_transposed1xW_b.set(0, b.dimension(1) * transpose_width);</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    shape_transposed1xW_b.set(1, static_cast&lt;size_t&gt;(std::ceil(b.dimension(0) / static_cast&lt;float&gt;(transpose_width))));</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <span class="keywordflow">return</span> shape_transposed1xW_b;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00337">Error.h:337</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00337">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#aa459796b5489eca8a9160cb5dcf1a103">ITensorInfo::element_size()</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00078">TensorShape::set()</a>, and <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_g_e_m_m_transpose1x_w_kernel_8cpp_source.xhtml#l00092">CLGEMMTranspose1xWKernel::configure()</a>, and <a class="el" href="_n_e_g_e_m_m_8cpp_source.xhtml#l00137">NEGEMM::validate()</a>.</p>

</div>
</div>
<a id="a69cb11b5b37f94a6bea9eaad9d13cccf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a69cb11b5b37f94a6bea9eaad9d13cccf">&#9670;&nbsp;</a></span>compute_transposed_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_transposed_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the transposed shape of a tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input tensor info</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00389">389</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;{</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    TensorShape shape_transposed{ input.tensor_shape() };</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    shape_transposed.set(0, input.dimension(1));</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    shape_transposed.set(1, input.dimension(0));</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <span class="keywordflow">return</span> shape_transposed;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;}</div></div><!-- fragment -->
<p class="reference">References <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00078">TensorShape::set()</a>, and <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_l_s_t_m_layer_8cpp_source.xhtml#l00053">NELSTMLayer::configure()</a>, <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00053">CLLSTMLayer::configure()</a>, <a class="el" href="_n_e_fully_connected_layer_8cpp_source.xhtml#l00240">NEFullyConnectedLayer::validate()</a>, <a class="el" href="_c_l_fully_connected_layer_8cpp_source.xhtml#l00241">CLFullyConnectedLayer::validate()</a>, <a class="el" href="_n_e_l_s_t_m_layer_8cpp_source.xhtml#l00306">NELSTMLayer::validate()</a>, and <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00305">CLLSTMLayer::validate()</a>.</p>

</div>
</div>
<a id="a3173d90757ec6ff31441b55883eafbca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3173d90757ec6ff31441b55883eafbca">&#9670;&nbsp;</a></span>compute_upsample_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_upsample_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the upsampled shape of a tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Contains stride information (x and y)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l01138">1138</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;{</div><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> data_layout = input.data_layout();</div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        idx_width   = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::WIDTH);</div><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        idx_height  = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::HEIGHT);</div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;</div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;    TensorShape        scale_out_shape(input.tensor_shape());</div><div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> out_x = input.dimension(idx_width) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.x();</div><div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> out_y = input.dimension(idx_height) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.y();</div><div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;    scale_out_shape.set(idx_width, out_x);</div><div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;    scale_out_shape.set(idx_height, out_y);</div><div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;</div><div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;    <span class="keywordflow">return</span> scale_out_shape;</div><div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a46e938020a3ac8c926d0590b7fe957db"><div class="ttname"><a href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout data_layout, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00326">Helpers.inl:326</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f4125dba5283887b34f889b1c615c0c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">arm_compute::test::validation::info</a></div><div class="ttdeci">info</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition]</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00111">Types.h:111</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">ITensorInfo::data_layout()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00326">arm_compute::get_data_layout_dimension_index()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::HEIGHT</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::info</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, and <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::WIDTH</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_upsample_layer_kernel_8cpp_source.xhtml#l00066">CLUpsampleLayerKernel::configure()</a>, and <a class="el" href="_n_e_upsample_layer_kernel_8cpp_source.xhtml#l00295">NEUpsampleLayerKernel::configure()</a>.</p>

</div>
</div>
<a id="a951fb0d8dcf2a2a338e26a59ffc9af17"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a951fb0d8dcf2a2a338e26a59ffc9af17">&#9670;&nbsp;</a></span>compute_vector_to_tensor_output_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_vector_to_tensor_output_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>conv_w</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>conv_h</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> &amp;&#160;</td>
          <td class="paramname"><em>data_layout</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the output tensor shape of a vector input given the convolution dimensions. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input tensor shape </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">conv_w</td><td>Convolution width </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">conv_h</td><td>Convolution height </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_layout</td><td>Data layout</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00050">50</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> idx_w = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::WIDTH);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> idx_h = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::HEIGHT);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> idx_c = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::CHANNEL);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>(input);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(idx_w, conv_w);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(idx_h, conv_h);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(idx_c, input.x() / (conv_w * conv_h));</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7fc93f37dac131a1a40b7921f9df3a9a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">output_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a46e938020a3ac8c926d0590b7fe957db"><div class="ttname"><a href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout data_layout, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00326">Helpers.inl:326</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::CHANNEL</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00326">arm_compute::get_data_layout_dimension_index()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::HEIGHT</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::output_shape</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::WIDTH</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00081">Dimensions&lt; T &gt;::x()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_depthwise_vector_to_tensor_kernel_8cpp_source.xhtml#l00064">CLDepthwiseVectorToTensorKernel::configure()</a>, and <a class="el" href="_n_e_depthwise_vector_to_tensor_kernel_8cpp_source.xhtml#l00098">NEDepthwiseVectorToTensorKernel::configure()</a>.</p>

</div>
</div>
<a id="a6365b505b5c1b98916425bc692b6ea49"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6365b505b5c1b98916425bc692b6ea49">&#9670;&nbsp;</a></span>compute_weights_reshaped_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_weights_reshaped_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_bias</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_groups</em> = <code>1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the reshaped shape of the weights. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">weights</td><td>Weights tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">has_bias</td><td>(Optional) Set to true if there is bias </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_groups</td><td>(Optional) Number of groups</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape of the reshaped weights </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00112">112</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;{</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="comment">// Number of groups greater than one are only supported for NCHW data layout, and the number of weights must be a multiple of it.</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(num_groups == 0);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.data_layout() == DataLayout::NHWC &amp;&amp; num_groups &gt; 1);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>((<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.dimension(3) % num_groups) != 0);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="comment">// Calculate output shape</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    TensorShape weights_reshaped{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.tensor_shape() };</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    weights_reshaped.set(3, weights_reshaped[3] / num_groups);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    weights_reshaped.collapse(3);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> tmp_dim = weights_reshaped[0];</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    weights_reshaped.set(0, weights_reshaped[1]);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    weights_reshaped.set(1, tmp_dim + (has_bias ? 1 : 0));</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">weights</a>.num_dimensions() &lt; 5)</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        weights_reshaped.set(2, num_groups);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    }</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keywordflow">return</span> weights_reshaped;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00337">Error.h:337</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a64a08a9fec5aeee8650e7182b6d171d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a64a08a9fec5aeee8650e7182b6d171d0">arm_compute::test::validation::weights</a></div><div class="ttdeci">CLTensor weights</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00180">ConvolutionLayer.cpp:180</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00337">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::NHWC</a>, and <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00180">arm_compute::test::validation::weights</a>.</p>

<p class="reference">Referenced by <a class="el" href="_g_c_weights_reshape_kernel_8cpp_source.xhtml#l00046">GCWeightsReshapeKernel::configure()</a>, <a class="el" href="_c_l_weights_reshape_kernel_8cpp_source.xhtml#l00078">CLWeightsReshapeKernel::configure()</a>, <a class="el" href="_n_e_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00377">NEGEMMConvolutionLayer::validate()</a>, and <a class="el" href="_c_l_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00353">CLGEMMConvolutionLayer::validate()</a>.</p>

</div>
</div>
<a id="a25e3751f07d4b2771a05d8d01a7f7620"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a25e3751f07d4b2771a05d8d01a7f7620">&#9670;&nbsp;</a></span>compute_winograd_filter_transform_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_winograd_filter_transform_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_winograd_info.xhtml">WinogradInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>winograd_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the winograd filter transform shape. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">winograd_info</td><td>Winograd information</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00636">636</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;{</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    TensorShape tensor_shape{ input.tensor_shape() };</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;    <span class="keyword">const</span> Size2D kernel_size      = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a809d18ccde99d938a68cb90ef53aa749">winograd_info</a>.kernel_size;</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    <span class="keyword">const</span> Size2D output_tile_size = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a809d18ccde99d938a68cb90ef53aa749">winograd_info</a>.output_tile_size;</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    <span class="keyword">const</span> Size2D input_tile_size  = Size2D(output_tile_size.width + kernel_size.width - 1, output_tile_size.height + kernel_size.height - 1);</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    tensor_shape.remove_dimension(<a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(input.data_layout(), DataLayoutDimension::WIDTH));</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    tensor_shape.set(Window::DimX, input.dimension(3));</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    tensor_shape.set(Window::DimY, input.dimension(<a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(input.data_layout(), DataLayoutDimension::CHANNEL)));</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    tensor_shape.set(Window::DimZ, input_tile_size.area());</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    <span class="keywordflow">return</span> tensor_shape;</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a809d18ccde99d938a68cb90ef53aa749"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a809d18ccde99d938a68cb90ef53aa749">arm_compute::test::validation::winograd_info</a></div><div class="ttdeci">winograd_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00302">Winograd.cpp:302</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a46e938020a3ac8c926d0590b7fe957db"><div class="ttname"><a href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout data_layout, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00326">Helpers.inl:326</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_size2_d_8h_source.xhtml#l00053">Size2D::area()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::CHANNEL</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">ITensorInfo::data_layout()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>, <a class="el" href="_window_8h_source.xhtml#l00047">Window::DimZ</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00326">arm_compute::get_data_layout_dimension_index()</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00093">Size2D::height</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00092">Size2D::width</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::WIDTH</a>, and <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00302">arm_compute::test::validation::winograd_info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_winograd_filter_transform_kernel_8cpp_source.xhtml#l00102">CLWinogradFilterTransformKernel::configure()</a>, <a class="el" href="_n_e_winograd_convolution_layer_8cpp_source.xhtml#l00546">NEWinogradConvolutionLayer::validate()</a>, and <a class="el" href="_c_l_winograd_convolution_layer_8cpp_source.xhtml#l00143">CLWinogradConvolutionLayer::validate()</a>.</p>

</div>
</div>
<a id="a04249f91ec2964d21a91bb7038821000"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a04249f91ec2964d21a91bb7038821000">&#9670;&nbsp;</a></span>compute_winograd_input_transform_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_winograd_input_transform_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_winograd_info.xhtml">WinogradInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>winograd_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the winograd input transform shape. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">winograd_info</td><td>Winograd information</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00659">659</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;{</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    <span class="keyword">const</span> PadStrideInfo <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acbf8f8a6dd185de04c1981c57a8963cf">conv_info</a>        = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a809d18ccde99d938a68cb90ef53aa749">winograd_info</a>.convolution_info;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    <span class="keyword">const</span> Size2D        kernel_size      = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a809d18ccde99d938a68cb90ef53aa749">winograd_info</a>.kernel_size;</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    <span class="keyword">const</span> Size2D        output_tile_size = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a809d18ccde99d938a68cb90ef53aa749">winograd_info</a>.output_tile_size;</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    <span class="keyword">const</span> Size2D        input_tile_size  = Size2D(output_tile_size.width + kernel_size.width - 1, output_tile_size.height + kernel_size.height - 1);</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> idx_w = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(input.data_layout(), DataLayoutDimension::WIDTH);</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> idx_h = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(input.data_layout(), DataLayoutDimension::HEIGHT);</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> idx_c = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(input.data_layout(), DataLayoutDimension::CHANNEL);</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    <span class="comment">// Compute the number of output tiles along the x and y direction of size &quot;output_tile_size&quot;</span></div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    <span class="keyword">const</span> Size2D num_tiles = <a class="code" href="namespacearm__compute.xhtml#a3b0c016b53e97663b39c2f3875f46c24">compute_winograd_convolution_tiles</a>(Size2D(input.tensor_shape()[idx_w], input.tensor_shape()[idx_h]),</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;                                                                kernel_size,</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;                                                                output_tile_size,</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;                                                                <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acbf8f8a6dd185de04c1981c57a8963cf">conv_info</a>);</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width  = input.tensor_shape()[idx_c];</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height = num_tiles.area();</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> depth  = input_tile_size.area();</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>{ input.tensor_shape() };</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(0, width);</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(1, height);</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>.set(2, depth);</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>;</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a809d18ccde99d938a68cb90ef53aa749"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a809d18ccde99d938a68cb90ef53aa749">arm_compute::test::validation::winograd_info</a></div><div class="ttdeci">winograd_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00302">Winograd.cpp:302</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a3b0c016b53e97663b39c2f3875f46c24"><div class="ttname"><a href="namespacearm__compute.xhtml#a3b0c016b53e97663b39c2f3875f46c24">arm_compute::compute_winograd_convolution_tiles</a></div><div class="ttdeci">Size2D compute_winograd_convolution_tiles(const Size2D &amp;in_dims, const Size2D &amp;kernel_size, const Size2D &amp;output_tile_size, const PadStrideInfo &amp;conv_info)</div><div class="ttdoc">Calculate the number of output tiles required by Winograd Convolution layer.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00735">Helpers.h:735</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7fc93f37dac131a1a40b7921f9df3a9a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">output_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_acbf8f8a6dd185de04c1981c57a8963cf"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#acbf8f8a6dd185de04c1981c57a8963cf">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00571">Winograd.cpp:571</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a46e938020a3ac8c926d0590b7fe957db"><div class="ttname"><a href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout data_layout, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00326">Helpers.inl:326</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_size2_d_8h_source.xhtml#l00053">Size2D::area()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::CHANNEL</a>, <a class="el" href="arm__compute_2core_2_helpers_8h_source.xhtml#l00735">arm_compute::compute_winograd_convolution_tiles()</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00571">arm_compute::test::validation::conv_info</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">ITensorInfo::data_layout()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00326">arm_compute::get_data_layout_dimension_index()</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00093">Size2D::height</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::HEIGHT</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::output_shape</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00092">Size2D::width</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::WIDTH</a>, and <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00302">arm_compute::test::validation::winograd_info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_winograd_input_transform_kernel_8cpp_source.xhtml#l00111">CLWinogradInputTransformKernel::configure()</a>, <a class="el" href="_n_e_winograd_convolution_layer_8cpp_source.xhtml#l00546">NEWinogradConvolutionLayer::validate()</a>, and <a class="el" href="_c_l_winograd_convolution_layer_8cpp_source.xhtml#l00143">CLWinogradConvolutionLayer::validate()</a>.</p>

</div>
</div>
<a id="a5699c316d27b41f0790827791e88ae26"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5699c316d27b41f0790827791e88ae26">&#9670;&nbsp;</a></span>compute_winograd_output_transform_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::compute_winograd_output_transform_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_winograd_info.xhtml">WinogradInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>winograd_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the winograd output transform shape. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input tensor info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">winograd_info</td><td>Winograd information</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the calculated shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l00695">695</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;{</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    <span class="keyword">const</span> PadStrideInfo <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acbf8f8a6dd185de04c1981c57a8963cf">conv_info</a>        = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a809d18ccde99d938a68cb90ef53aa749">winograd_info</a>.convolution_info;</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    <span class="keyword">const</span> Size2D        kernel_size      = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a809d18ccde99d938a68cb90ef53aa749">winograd_info</a>.kernel_size;</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    <span class="keyword">const</span> Size2D        input_dimensions = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a809d18ccde99d938a68cb90ef53aa749">winograd_info</a>.input_dimensions;</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>    data_layout      = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a809d18ccde99d938a68cb90ef53aa749">winograd_info</a>.output_data_layout;</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    <span class="comment">// Compute output shape</span></div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_width  = 0;</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_height = 0;</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    std::tie(output_width, output_height) = <a class="code" href="namespacearm__compute.xhtml#a546c6bed3c307414e8d0934bc13259e5">scaled_dimensions</a>(input_dimensions.width, input_dimensions.height,</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                                                              kernel_size.width, kernel_size.height, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acbf8f8a6dd185de04c1981c57a8963cf">conv_info</a>);</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    TensorShape tensor_shape{ input.tensor_shape() };</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;    <span class="comment">// Output dimension</span></div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> out_w = output_width;</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> out_h = output_height;</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> out_c = input.dimension(0);</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    tensor_shape.set(<a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::WIDTH), out_w);</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    tensor_shape.set(<a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::HEIGHT), out_h);</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    tensor_shape.set(<a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, DataLayoutDimension::CHANNEL), out_c);</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    <span class="keywordflow">return</span> tensor_shape;</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a809d18ccde99d938a68cb90ef53aa749"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a809d18ccde99d938a68cb90ef53aa749">arm_compute::test::validation::winograd_info</a></div><div class="ttdeci">winograd_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00302">Winograd.cpp:302</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_acbf8f8a6dd185de04c1981c57a8963cf"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#acbf8f8a6dd185de04c1981c57a8963cf">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00571">Winograd.cpp:571</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a46e938020a3ac8c926d0590b7fe957db"><div class="ttname"><a href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout data_layout, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00326">Helpers.inl:326</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition]</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00111">Types.h:111</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a546c6bed3c307414e8d0934bc13259e5"><div class="ttname"><a href="namespacearm__compute.xhtml#a546c6bed3c307414e8d0934bc13259e5">arm_compute::scaled_dimensions</a></div><div class="ttdeci">const std::pair&lt; unsigned int, unsigned int &gt; scaled_dimensions(unsigned int width, unsigned int height, unsigned int kernel_width, unsigned int kernel_height, const PadStrideInfo &amp;pad_stride_info, const Size2D &amp;dilation=Size2D(1U, 1U))</div><div class="ttdoc">Returns expected width and height of output scaled tensor depending on dimensions rounding mode.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00359">Utils.cpp:359</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::CHANNEL</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00571">arm_compute::test::validation::conv_info</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00326">arm_compute::get_data_layout_dimension_index()</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00093">Size2D::height</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::HEIGHT</a>, <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00359">arm_compute::scaled_dimensions()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00092">Size2D::width</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::WIDTH</a>, and <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00302">arm_compute::test::validation::winograd_info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_winograd_output_transform_kernel_8cpp_source.xhtml#l00146">CLWinogradOutputTransformKernel::configure()</a>.</p>

</div>
</div>
<a id="acb3f0c947411cfe1d8c5f67af2cad851"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb3f0c947411cfe1d8c5f67af2cad851">&#9670;&nbsp;</a></span>extract_shape() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::extract_shape </td>
          <td>(</td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>data</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the tensor shape. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data</td><td>Input data</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the extracted tensor shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l01160">1160</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;{</div><div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;    <span class="keywordflow">return</span> data-&gt;info()-&gt;tensor_shape();</div><div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_shape_calculator_8h_source.xhtml#l01196">calculate_depth_concatenate_shape()</a>, and <a class="el" href="_shape_calculator_8h_source.xhtml#l01227">calculate_width_concatenate_shape()</a>.</p>

</div>
</div>
<a id="af79493c6c07a3eb2b3a27712221b66b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af79493c6c07a3eb2b3a27712221b66b8">&#9670;&nbsp;</a></span>extract_shape() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::extract_shape </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>data</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l01165">1165</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;{</div><div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;    <span class="keywordflow">return</span> data-&gt;tensor_shape();</div><div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;}</div></div><!-- fragment -->
<p class="reference">References <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>.</p>

</div>
</div>
<a id="ae7f0e5491e0f43e371f7db047a03dd4c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae7f0e5491e0f43e371f7db047a03dd4c">&#9670;&nbsp;</a></span>extract_shape() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> arm_compute::misc::shape_calculator::extract_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> *&#160;</td>
          <td class="paramname"><em>data</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_shape_calculator_8h_source.xhtml#l01170">1170</a> of file <a class="el" href="_shape_calculator_8h_source.xhtml">ShapeCalculator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;{</div><div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;    <span class="keywordflow">return</span> *data;</div><div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1misc.xhtml">misc</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml">shape_calculator</a></li>
    <li class="footer">Generated on Thu Feb 28 2019 12:25:05 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
