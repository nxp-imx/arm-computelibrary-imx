<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: CLGEMM Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">19.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1_c_l_g_e_m_m.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">CLGEMM Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Basic function to execute GEMM on OpenCL.  
 <a href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_c_l_g_e_m_m_8h_source.xhtml">CLGEMM.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for CLGEMM:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__compute_1_1_c_l_g_e_m_m__coll__graph.svg" width="90" height="112"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a07dc013cbab881bdebe30f07204dbde3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#a07dc013cbab881bdebe30f07204dbde3">CLGEMM</a> (std::shared_ptr&lt; <a class="el" href="classarm__compute_1_1_i_memory_manager.xhtml">IMemoryManager</a> &gt; memory_manager=nullptr)</td></tr>
<tr class="memdesc:a07dc013cbab881bdebe30f07204dbde3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#a07dc013cbab881bdebe30f07204dbde3">More...</a><br /></td></tr>
<tr class="separator:a07dc013cbab881bdebe30f07204dbde3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d6349f009b4f8b0cede0b6bd0a65e71"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#a3d6349f009b4f8b0cede0b6bd0a65e71">CLGEMM</a> (const <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a> &amp;)=delete</td></tr>
<tr class="memdesc:a3d6349f009b4f8b0cede0b6bd0a65e71"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copied (As this class contains pointers)  <a href="#a3d6349f009b4f8b0cede0b6bd0a65e71">More...</a><br /></td></tr>
<tr class="separator:a3d6349f009b4f8b0cede0b6bd0a65e71"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19d221206d1e442f4b5dd29ecb582a70"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#a19d221206d1e442f4b5dd29ecb582a70">CLGEMM</a> (<a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:a19d221206d1e442f4b5dd29ecb582a70"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default move constructor.  <a href="#a19d221206d1e442f4b5dd29ecb582a70">More...</a><br /></td></tr>
<tr class="separator:a19d221206d1e442f4b5dd29ecb582a70"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebefa7576807b8b316ea46c242949039"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#aebefa7576807b8b316ea46c242949039">operator=</a> (const <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a> &amp;)=delete</td></tr>
<tr class="memdesc:aebefa7576807b8b316ea46c242949039"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copied (As this class contains pointers)  <a href="#aebefa7576807b8b316ea46c242949039">More...</a><br /></td></tr>
<tr class="separator:aebefa7576807b8b316ea46c242949039"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83a121357a2121ef7f0670b3f81e4645"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#a83a121357a2121ef7f0670b3f81e4645">operator=</a> (<a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:a83a121357a2121ef7f0670b3f81e4645"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default move assignment operator.  <a href="#a83a121357a2121ef7f0670b3f81e4645">More...</a><br /></td></tr>
<tr class="separator:a83a121357a2121ef7f0670b3f81e4645"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34e7b882208ff6720bad2e4f2c7565c5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#a34e7b882208ff6720bad2e4f2c7565c5">configure</a> (const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *a, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *b, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *c, <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output, float alpha, float beta, const <a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml">GEMMInfo</a> &amp;gemm_info=<a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml">GEMMInfo</a>())</td></tr>
<tr class="memdesc:a34e7b882208ff6720bad2e4f2c7565c5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialise the kernel's inputs and output.  <a href="#a34e7b882208ff6720bad2e4f2c7565c5">More...</a><br /></td></tr>
<tr class="separator:a34e7b882208ff6720bad2e4f2c7565c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1717410afd0be936c6213a63c8005fb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a> () override</td></tr>
<tr class="memdesc:ad1717410afd0be936c6213a63c8005fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Run the kernels contained in the function.  <a href="#ad1717410afd0be936c6213a63c8005fb">More...</a><br /></td></tr>
<tr class="separator:ad1717410afd0be936c6213a63c8005fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9b93ef660fc3c5b4b19d3fc7b891b77"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#aa9b93ef660fc3c5b4b19d3fc7b891b77">prepare</a> () override</td></tr>
<tr class="memdesc:aa9b93ef660fc3c5b4b19d3fc7b891b77"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepare the function for executing.  <a href="#aa9b93ef660fc3c5b4b19d3fc7b891b77">More...</a><br /></td></tr>
<tr class="separator:aa9b93ef660fc3c5b4b19d3fc7b891b77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1_i_function"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1_i_function')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a></td></tr>
<tr class="memitem:ab921ecc3f3f6ae2b4bd61f3e1998d8c4 inherit pub_methods_classarm__compute_1_1_i_function"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_function.xhtml#ab921ecc3f3f6ae2b4bd61f3e1998d8c4">~IFunction</a> ()=default</td></tr>
<tr class="memdesc:ab921ecc3f3f6ae2b4bd61f3e1998d8c4 inherit pub_methods_classarm__compute_1_1_i_function"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="classarm__compute_1_1_i_function.xhtml#ab921ecc3f3f6ae2b4bd61f3e1998d8c4">More...</a><br /></td></tr>
<tr class="separator:ab921ecc3f3f6ae2b4bd61f3e1998d8c4 inherit pub_methods_classarm__compute_1_1_i_function"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a3493ba7d1f2057740ff5931fa00a44ac"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#a3493ba7d1f2057740ff5931fa00a44ac">validate</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *a, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *b, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *c, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output, float alpha, float beta, const <a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml">GEMMInfo</a> &amp;gemm_info=<a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml">GEMMInfo</a>())</td></tr>
<tr class="memdesc:a3493ba7d1f2057740ff5931fa00a44ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Static function to check if given info will lead to a valid configuration of <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a>.  <a href="#a3493ba7d1f2057740ff5931fa00a44ac">More...</a><br /></td></tr>
<tr class="separator:a3493ba7d1f2057740ff5931fa00a44ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Basic function to execute GEMM on OpenCL. </p>
<p>This function calls the following OpenCL kernels:</p>
<ol type="1">
<li><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_reshape_l_h_s_matrix_kernel.xhtml">CLGEMMReshapeLHSMatrixKernel</a> (only if the reshaped GEMM is selected by the heuristic model)</li>
<li><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_reshape_r_h_s_matrix_kernel.xhtml">CLGEMMReshapeRHSMatrixKernel</a> (only if the reshaped GEMM is selected by the heuristic model)</li>
<li><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_matrix_multiply_kernel.xhtml">CLGEMMMatrixMultiplyKernel</a> (if GPU target is NOT G76 or if the reshaped GEMM is NOT selected)</li>
<li><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_matrix_multiply_reshaped_kernel.xhtml">CLGEMMMatrixMultiplyReshapedKernel</a> (only if the reshaped GEMM is selected by the heuristic model and the GPU target IS Mali-G76)</li>
<li><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_matrix_addition_kernel.xhtml">CLGEMMMatrixAdditionKernel</a> (if c != nullptr and beta != 0.0) </li>
</ol>

<p class="definition">Definition at line <a class="el" href="_c_l_g_e_m_m_8h_source.xhtml#l00050">50</a> of file <a class="el" href="_c_l_g_e_m_m_8h_source.xhtml">CLGEMM.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a07dc013cbab881bdebe30f07204dbde3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a07dc013cbab881bdebe30f07204dbde3">&#9670;&nbsp;</a></span>CLGEMM() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a> </td>
          <td>(</td>
          <td class="paramtype">std::shared_ptr&lt; <a class="el" href="classarm__compute_1_1_i_memory_manager.xhtml">IMemoryManager</a> &gt;&#160;</td>
          <td class="paramname"><em>memory_manager</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">memory_manager</td><td>(Optional) <a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> manager. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml#l00084">84</a> of file <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml">CLGEMM.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    : _memory_group(std::move(memory_manager)),</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;      _mm_kernel(),</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;      _ma_kernel(),</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;      _reshape_lhs_kernel(),</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;      _reshape_rhs_kernel(),</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;      _mm_reshaped_kernel(),</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;      _tmp_a(),</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;      _tmp_b(),</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;      _original_b(<span class="keyword">nullptr</span>),</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;      _is_interleaved_transposed(<span class="keyword">false</span>),</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;      _run_addition(<span class="keyword">false</span>),</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;      _reshape_b_only_on_first_run(<span class="keyword">false</span>),</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;      _is_prepared(<span class="keyword">false</span>),</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;      _is_new_gemm_reshaped(<span class="keyword">false</span>)</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;{</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a3d6349f009b4f8b0cede0b6bd0a65e71"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d6349f009b4f8b0cede0b6bd0a65e71">&#9670;&nbsp;</a></span>CLGEMM() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class from being copied (As this class contains pointers) </p>

</div>
</div>
<a id="a19d221206d1e442f4b5dd29ecb582a70"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a19d221206d1e442f4b5dd29ecb582a70">&#9670;&nbsp;</a></span>CLGEMM() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default move constructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a34e7b882208ff6720bad2e4f2c7565c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a34e7b882208ff6720bad2e4f2c7565c5">&#9670;&nbsp;</a></span>configure()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void configure </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>alpha</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml">GEMMInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>gemm_info</em> = <code><a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml">GEMMInfo</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialise the kernel's inputs and output. </p>
<dl class="section note"><dt>Note</dt><dd>GEMM: General Matrix Multiply - [alpha * A * B + beta * C].</dd>
<dd>
All tensors must have the same data type.</dd>
<dd>
Whilst the first input tensor can be a vector, the second input tensor must be at least a matrix</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>First input tensor (Matrix or <a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information.">Vector</a> A). Data types supported: F16/F32 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">b</td><td>Second input tensor (Matrix B). Data type supported: same as <code>a</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">c</td><td>Third input tensor (Matrix C). It can be a nullptr if just the multiplication between <code>a</code> and <code>b</code> is needed. Data type supported: same as <code>a</code>. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output</td><td>Output tensor. Data type supported: same as <code>a</code> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">alpha</td><td>Weight of the matrix product </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">beta</td><td>Weight of matrix C </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gemm_info</td><td>(Optional) Specifies if the matrix A and/or matrix B have been reshaped and if the reshape of matrix B should happen only for the first run. <a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml" title="GEMM information class.">GEMMInfo</a> also contains information about the reshaping in case matrix A and matrix B have been already transformed. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml#l00102">102</a> of file <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml">CLGEMM.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;{</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <a class="code" href="_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(a, b, output);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="comment">// Perform validation step</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <a class="code" href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a>(<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#a3493ba7d1f2057740ff5931fa00a44ac">validate</a>(a-&gt;info(), b-&gt;info(), c != <span class="keyword">nullptr</span> ? c-&gt;info() : <span class="keyword">nullptr</span>, output-&gt;info(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3161c2c93c655dd30953372064ec627b">alpha</a>, beta, gemm_info));</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="comment">// Check if we need to reshape the matrix B only on the first run</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    _reshape_b_only_on_first_run = gemm_info.reshape_b_only_on_first_run();</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    _is_prepared                 = gemm_info.retain_internal_weights();</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    _original_b                  = b;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keyword">const</span> ICLTensor *matrix_a = a;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keyword">const</span> ICLTensor *matrix_b = b;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="comment">// Get the GPU target</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> gpu_target = <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a27561688e2fc60176608ef725a4ecb30">target</a>();</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="comment">// Set the target for the kernels</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    _reshape_lhs_kernel.<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ad5ba9d34a3a855bf1dd2e36316ff550a">set_target</a>(gpu_target);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    _mm_kernel.<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ad5ba9d34a3a855bf1dd2e36316ff550a">set_target</a>(gpu_target);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="comment">// Arguments used by GEMMReshapeInfo</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="comment">// If we pass the matrix A and matrix B reshaped to CLGEMMMatrixMultiplyKernel, we need to pass m, n, k, mult_transpose1xW_width and mult_interleave4x4_height to CLGEMMReshapeInfo</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="comment">// in order to know how the matrices have been reshaped</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>           <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2ad7f431e3446fddcd9b6b9f93c4c14">data_type</a>                 = a-&gt;info()-&gt;data_type();</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordtype">bool</span>               reinterpret_input_as_3d   = gemm_info.reinterpret_input_as_3d();</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m                         = reinterpret_input_as_3d ? (a-&gt;info()-&gt;dimension(1) * a-&gt;info()-&gt;dimension(2)) : a-&gt;info()-&gt;dimension(1);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n                         = b-&gt;info()-&gt;dimension(0);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k                         = a-&gt;info()-&gt;dimension(0);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch_size                = reinterpret_input_as_3d ? a-&gt;info()-&gt;dimension(3) : a-&gt;info()-&gt;dimension(2);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          depth_output_gemm3d       = gemm_info.depth_output_gemm3d();</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordtype">int</span>                mult_transpose1xW_width   = 1;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordtype">int</span>                mult_interleave4x4_height = 1;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#a2355c2bf5d1950088937416baea24fe6">get_arch_from_target</a>(gpu_target) == <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aa78cc0fd1cab24af0fad71dc4c256f8e">GPUTarget::BIFROST</a>)</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        mult_transpose1xW_width   = 4;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        mult_interleave4x4_height = 2;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    GEMMRHSMatrixInfo rhs_info;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    rhs_info.n0         = 16 / b-&gt;info()-&gt;element_size();</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    rhs_info.k0         = 1;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    rhs_info.h0         = mult_transpose1xW_width;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    rhs_info.interleave = <span class="keyword">false</span>;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    rhs_info.transpose  = <span class="keyword">false</span>;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    GEMMLHSMatrixInfo lhs_info;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    lhs_info.m0         = 4;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    lhs_info.k0         = 4;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    lhs_info.v0         = mult_interleave4x4_height;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    lhs_info.interleave = <span class="keyword">true</span>;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    lhs_info.transpose  = <span class="keyword">true</span>;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="comment">// Check if we need to reshape the matrix A and matrix B</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    _is_interleaved_transposed = is_interleaved_transposed(m, n, k, a-&gt;info()-&gt;data_type(), _reshape_b_only_on_first_run, gpu_target);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="comment">// Check if we can run the new reshaped GEMM</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> workload   = static_cast&lt;float&gt;((m * n) / 20.0f);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    _is_new_gemm_reshaped = (workload &gt; 1600.0f) &amp;&amp; (<a class="code" href="namespacearm__compute.xhtml#a2355c2bf5d1950088937416baea24fe6">get_arch_from_target</a>(gpu_target) == <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aa78cc0fd1cab24af0fad71dc4c256f8e">GPUTarget::BIFROST</a>) &amp;&amp; _is_interleaved_transposed &amp;&amp; (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2ad7f431e3446fddcd9b6b9f93c4c14">data_type</a> == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> add_matrix_c  = (beta != 0.f &amp;&amp; c != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_beta_one   = std::abs(1.0f - beta) &lt; 0.00001f;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> use_fused_add = is_beta_one &amp;&amp; (c != <span class="keyword">nullptr</span> &amp;&amp; c-&gt;info()-&gt;num_dimensions() == 1) &amp;&amp; !_is_new_gemm_reshaped;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="comment">// if _is_interleaved_transposed is set, force reinterpret_input_as_3d to be false as the output of CLGEMMInterleaveKernel will be 2D</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordflow">if</span>(_is_interleaved_transposed)</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    {</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        reinterpret_input_as_3d = <span class="keyword">false</span>;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        matrix_a = &amp;_tmp_a;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        matrix_b = &amp;_tmp_b;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="comment">// Manage intermediate buffers</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        _memory_group.<a class="code" href="classarm__compute_1_1_memory_group_base.xhtml#ac1f67376afb7822f262a0174ef4a3104">manage</a>(&amp;_tmp_a);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="keywordflow">if</span>(!_reshape_b_only_on_first_run)</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        {</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            _memory_group.<a class="code" href="classarm__compute_1_1_memory_group_base.xhtml#ac1f67376afb7822f262a0174ef4a3104">manage</a>(&amp;_tmp_b);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        }</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <span class="comment">// _tmp_a and _tmp_b will be auto configured in _interleave_kernel and in _transpose_kernel</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="keywordflow">if</span>(_is_new_gemm_reshaped)</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        {</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            GEMMLHSMatrixInfo lhs_info;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            <span class="comment">// Pick up the GEMM configuration</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            std::tie(lhs_info, rhs_info) = <a class="code" href="classarm__compute_1_1cl__gemm_1_1_c_l_g_e_m_m_reshaped_configuration_factory.xhtml#add9adb2d4e6b12ac04f461bcbf0a17d2">CLGEMMReshapedConfigurationFactory::create</a>()-&gt;configure(m, n, k, batch_size, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2ad7f431e3446fddcd9b6b9f93c4c14">data_type</a>);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            _reshape_lhs_kernel.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_reshape_l_h_s_matrix_kernel.xhtml#aa65a9cf45dc5c7c2c96fd57ecc8d2ec8">configure</a>(a, &amp;_tmp_a, lhs_info, gemm_info.reinterpret_input_as_3d());</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            _reshape_rhs_kernel.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_reshape_r_h_s_matrix_kernel.xhtml#aa0b0eaffc9a83e1a6495d957b63bbccc">configure</a>(b, &amp;_tmp_b, rhs_info);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            <span class="comment">// Configure and tune matrix multiply kernel</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            _mm_reshaped_kernel.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_matrix_multiply_reshaped_kernel.xhtml#a4724e2ca299180476c2fd66bb92d3ba5">configure</a>(matrix_a, matrix_b, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3161c2c93c655dd30953372064ec627b">alpha</a>, lhs_info, rhs_info, GEMMReshapeInfo(m, n, k, 1, 1,</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                                                                                                                 depth_output_gemm3d, reinterpret_input_as_3d));</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        }</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        {</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            <span class="comment">// Configure interleave kernel</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            _reshape_lhs_kernel.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_reshape_l_h_s_matrix_kernel.xhtml#aa65a9cf45dc5c7c2c96fd57ecc8d2ec8">configure</a>(a, &amp;_tmp_a, lhs_info, gemm_info.reinterpret_input_as_3d());</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            <span class="comment">// Configure transpose kernel</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            _reshape_rhs_kernel.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_reshape_r_h_s_matrix_kernel.xhtml#aa0b0eaffc9a83e1a6495d957b63bbccc">configure</a>(b, &amp;_tmp_b, rhs_info);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        }</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    }</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keywordflow">if</span>(!_is_new_gemm_reshaped)</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    {</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="comment">// Configure and tune matrix multiply kernel</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        _mm_kernel.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_matrix_multiply_kernel.xhtml#a0942a675b9d4670f019d2c538eb46f2d">configure</a>(matrix_a, matrix_b, (add_matrix_c &amp;&amp; !use_fused_add) ? <span class="keyword">nullptr</span> : c, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3161c2c93c655dd30953372064ec627b">alpha</a>, beta, _is_interleaved_transposed,</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                             GEMMReshapeInfo(m, n, k, mult_transpose1xW_width, mult_interleave4x4_height, depth_output_gemm3d, reinterpret_input_as_3d),</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                             gemm_info.fp_mixed_precision());</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a6c2059df991a75abef4eb643510c9544">tune_kernel_static</a>(_mm_kernel);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    }</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keywordflow">if</span>(_is_interleaved_transposed)</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    {</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="comment">// Allocate intermediate tensors</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        _tmp_a.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        <span class="keywordflow">if</span>(!_reshape_b_only_on_first_run)</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        {</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            _tmp_b.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        }</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    }</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="comment">// Configure matrix addition kernel</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keywordflow">if</span>(add_matrix_c &amp;&amp; !use_fused_add)</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    {</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        _ma_kernel.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_matrix_addition_kernel.xhtml#a00ca198bac061a1fdfbb4246e7048e63">configure</a>(c, output, beta);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        _run_addition = <span class="keyword">true</span>;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    }</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_g_e_m_m_reshape_l_h_s_matrix_kernel_xhtml_aa65a9cf45dc5c7c2c96fd57ecc8d2ec8"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m_reshape_l_h_s_matrix_kernel.xhtml#aa65a9cf45dc5c7c2c96fd57ecc8d2ec8">arm_compute::CLGEMMReshapeLHSMatrixKernel::configure</a></div><div class="ttdeci">void configure(const ICLTensor *input, ICLTensor *output, const GEMMLHSMatrixInfo &amp;lhs_info, bool reinterpret_input_as_3d=false)</div><div class="ttdoc">Initialise the kernel's input and output.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_reshape_l_h_s_matrix_kernel_8cpp_source.xhtml#l00121">CLGEMMReshapeLHSMatrixKernel.cpp:121</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a9b58d0eb9a2af8e6d7908695e1557d6c"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">arm_compute::CLScheduler::get</a></div><div class="ttdeci">static CLScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00041">CLScheduler.cpp:41</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a27561688e2fc60176608ef725a4ecb30"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a27561688e2fc60176608ef725a4ecb30">arm_compute::CLScheduler::target</a></div><div class="ttdeci">GPUTarget target() const</div><div class="ttdoc">Get the target GPU.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8h_source.xhtml#l00112">CLScheduler.h:112</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::Format::F32</a></div><div class="ttdoc">1 channel, 1 F32 per channel</div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml_a4083de30daebd6bdee6b35d9c8262108"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">arm_compute::CLTensor::allocator</a></div><div class="ttdeci">CLTensorAllocator * allocator()</div><div class="ttdoc">Return a pointer to the tensor's allocator.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_8cpp_source.xhtml#l00050">CLTensor.cpp:50</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a938dcd406ce611ef5345ad2531cdb948"><div class="ttname"><a href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_THROW_ON(status)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00327">Error.h:327</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_g_e_m_m_matrix_addition_kernel_xhtml_a00ca198bac061a1fdfbb4246e7048e63"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m_matrix_addition_kernel.xhtml#a00ca198bac061a1fdfbb4246e7048e63">arm_compute::CLGEMMMatrixAdditionKernel::configure</a></div><div class="ttdeci">void configure(const ICLTensor *input, ICLTensor *output, float beta)</div><div class="ttdoc">Initialise the kernel's input, output and beta value.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_matrix_addition_kernel_8cpp_source.xhtml#l00079">CLGEMMMatrixAdditionKernel.cpp:79</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a2355c2bf5d1950088937416baea24fe6"><div class="ttname"><a href="namespacearm__compute.xhtml#a2355c2bf5d1950088937416baea24fe6">arm_compute::get_arch_from_target</a></div><div class="ttdeci">GPUTarget get_arch_from_target(GPUTarget target)</div><div class="ttdoc">Helper function to get the GPU arch.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_g_p_u_target_8cpp_source.xhtml#l00160">GPUTarget.cpp:160</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac2ad7f431e3446fddcd9b6b9f93c4c14"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2ad7f431e3446fddcd9b6b9f93c4c14">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_g_e_m_m_matrix_multiply_kernel_xhtml_a0942a675b9d4670f019d2c538eb46f2d"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m_matrix_multiply_kernel.xhtml#a0942a675b9d4670f019d2c538eb46f2d">arm_compute::CLGEMMMatrixMultiplyKernel::configure</a></div><div class="ttdeci">void configure(const ICLTensor *input0, const ICLTensor *input1, const ICLTensor *input2, ICLTensor *output, float alpha, float beta=0.f, bool is_interleaved_transposed=true, const GEMMReshapeInfo &amp;reshape_info=GEMMReshapeInfo(), bool fp_mixed_precision=false)</div><div class="ttdoc">Initialise the kernel's input, output and alpha.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_matrix_multiply_kernel_8cpp_source.xhtml#l00263">CLGEMMMatrixMultiplyKernel.cpp:263</a></div></div>
<div class="ttc" id="classarm__compute_1_1_memory_group_base_xhtml_ac1f67376afb7822f262a0174ef4a3104"><div class="ttname"><a href="classarm__compute_1_1_memory_group_base.xhtml#ac1f67376afb7822f262a0174ef4a3104">arm_compute::MemoryGroupBase::manage</a></div><div class="ttdeci">void manage(TensorType *obj)</div><div class="ttdoc">Sets a object to be managed by the given memory group.</div><div class="ttdef"><b>Definition:</b> <a href="_memory_group_base_8h_source.xhtml#l00102">MemoryGroupBase.h:102</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a3161c2c93c655dd30953372064ec627b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a3161c2c93c655dd30953372064ec627b">arm_compute::test::validation::alpha</a></div><div class="ttdeci">const float alpha</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_accumulate_8cpp_source.xhtml#l00103">Accumulate.cpp:103</a></div></div>
<div class="ttc" id="classarm__compute_1_1cl__gemm_1_1_c_l_g_e_m_m_reshaped_configuration_factory_xhtml_add9adb2d4e6b12ac04f461bcbf0a17d2"><div class="ttname"><a href="classarm__compute_1_1cl__gemm_1_1_c_l_g_e_m_m_reshaped_configuration_factory.xhtml#add9adb2d4e6b12ac04f461bcbf0a17d2">arm_compute::cl_gemm::CLGEMMReshapedConfigurationFactory::create</a></div><div class="ttdeci">static std::unique_ptr&lt; ICLGEMMReshapedConfiguration &gt; create()</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_reshaped_configuration_8h_source.xhtml#l00041">CLGEMMReshapedConfiguration.h:41</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_allocator_xhtml_a6e509c2a177b0b29e9e2369535094dee"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">arm_compute::CLTensorAllocator::allocate</a></div><div class="ttdeci">void allocate() override</div><div class="ttdoc">Allocate size specified by TensorInfo of OpenCL memory.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_allocator_8cpp_source.xhtml#l00074">CLTensorAllocator.cpp:74</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_a921b705e9e3e0fe928928447869e62a5"><div class="ttname"><a href="_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00161">Validate.h:161</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_g_e_m_m_matrix_multiply_reshaped_kernel_xhtml_a4724e2ca299180476c2fd66bb92d3ba5"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m_matrix_multiply_reshaped_kernel.xhtml#a4724e2ca299180476c2fd66bb92d3ba5">arm_compute::CLGEMMMatrixMultiplyReshapedKernel::configure</a></div><div class="ttdeci">void configure(const ICLTensor *input0, const ICLTensor *input1, ICLTensor *output, float alpha, const GEMMLHSMatrixInfo &amp;lhs_info, const GEMMRHSMatrixInfo &amp;rhs_info, const GEMMReshapeInfo &amp;gemm_info)</div><div class="ttdoc">Initialise the kernel's input and output.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00175">CLGEMMMatrixMultiplyReshapedKernel.cpp:175</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">arm_compute::GPUTarget</a></div><div class="ttdeci">GPUTarget</div><div class="ttdoc">Available GPU Targets.</div><div class="ttdef"><b>Definition:</b> <a href="_g_p_u_target_8h_source.xhtml#l00034">GPUTarget.h:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_g_e_m_m_reshape_r_h_s_matrix_kernel_xhtml_aa0b0eaffc9a83e1a6495d957b63bbccc"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m_reshape_r_h_s_matrix_kernel.xhtml#aa0b0eaffc9a83e1a6495d957b63bbccc">arm_compute::CLGEMMReshapeRHSMatrixKernel::configure</a></div><div class="ttdeci">void configure(const ICLTensor *input, ICLTensor *output, const GEMMRHSMatrixInfo &amp;rhs_info)</div><div class="ttdoc">Initialise the kernel's input and output.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_reshape_r_h_s_matrix_kernel_8cpp_source.xhtml#l00103">CLGEMMReshapeRHSMatrixKernel.cpp:103</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_g_e_m_m_xhtml_a3493ba7d1f2057740ff5931fa00a44ac"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#a3493ba7d1f2057740ff5931fa00a44ac">arm_compute::CLGEMM::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *a, const ITensorInfo *b, const ITensorInfo *c, const ITensorInfo *output, float alpha, float beta, const GEMMInfo &amp;gemm_info=GEMMInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLGEMM.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_8cpp_source.xhtml#l00233">CLGEMM.cpp:233</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_ad5ba9d34a3a855bf1dd2e36316ff550a"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#ad5ba9d34a3a855bf1dd2e36316ff550a">arm_compute::ICLKernel::set_target</a></div><div class="ttdeci">void set_target(GPUTarget target)</div><div class="ttdoc">Set the targeted GPU architecture.</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_l_kernel_8h_source.xhtml#l00243">ICLKernel.h:243</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3aa78cc0fd1cab24af0fad71dc4c256f8e"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aa78cc0fd1cab24af0fad71dc4c256f8e">arm_compute::GPUTarget::BIFROST</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a6c2059df991a75abef4eb643510c9544"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a6c2059df991a75abef4eb643510c9544">arm_compute::CLScheduler::tune_kernel_static</a></div><div class="ttdeci">void tune_kernel_static(ICLKernel &amp;kernel)</div><div class="ttdoc">Tunes OpenCL kernel.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8h_source.xhtml#l00172">CLScheduler.h:172</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdoc">Available data types.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00074">Types.h:74</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_tensor_allocator_8cpp_source.xhtml#l00074">CLTensorAllocator::allocate()</a>, <a class="el" href="_c_l_tensor_8cpp_source.xhtml#l00050">CLTensor::allocator()</a>, <a class="el" href="_n_e_o_n_2_accumulate_8cpp_source.xhtml#l00103">arm_compute::test::validation::alpha</a>, <a class="el" href="_validate_8h_source.xhtml#l00161">ARM_COMPUTE_ERROR_ON_NULLPTR</a>, <a class="el" href="_error_8h_source.xhtml#l00327">ARM_COMPUTE_ERROR_THROW_ON</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aa78cc0fd1cab24af0fad71dc4c256f8e">arm_compute::BIFROST</a>, <a class="el" href="_c_l_g_e_m_m_matrix_addition_kernel_8cpp_source.xhtml#l00079">CLGEMMMatrixAdditionKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00175">CLGEMMMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_reshape_r_h_s_matrix_kernel_8cpp_source.xhtml#l00103">CLGEMMReshapeRHSMatrixKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_reshape_l_h_s_matrix_kernel_8cpp_source.xhtml#l00121">CLGEMMReshapeLHSMatrixKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_multiply_kernel_8cpp_source.xhtml#l00263">CLGEMMMatrixMultiplyKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_reshaped_configuration_8h_source.xhtml#l00041">CLGEMMReshapedConfigurationFactory::create()</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::data_type</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">ITensorInfo::data_type()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01858">GEMMInfo::depth_output_gemm3d()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#aa459796b5489eca8a9160cb5dcf1a103">ITensorInfo::element_size()</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::F32</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01890">GEMMInfo::fp_mixed_precision()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00041">CLScheduler::get()</a>, <a class="el" href="src_2core_2_g_p_u_target_8cpp_source.xhtml#l00160">arm_compute::get_arch_from_target()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01789">GEMMRHSMatrixInfo::h0</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01781">GEMMLHSMatrixInfo::interleave</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01791">GEMMRHSMatrixInfo::interleave</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01778">GEMMLHSMatrixInfo::k0</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01788">GEMMRHSMatrixInfo::k0</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01777">GEMMLHSMatrixInfo::m0</a>, <a class="el" href="_memory_group_base_8h_source.xhtml#l00102">MemoryGroupBase&lt; TensorType &gt;::manage()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01787">GEMMRHSMatrixInfo::n0</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">ITensorInfo::num_dimensions()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01866">GEMMInfo::reinterpret_input_as_3d()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01850">GEMMInfo::reshape_b_only_on_first_run()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01874">GEMMInfo::retain_internal_weights()</a>, <a class="el" href="_i_c_l_kernel_8h_source.xhtml#l00243">ICLKernel::set_target()</a>, <a class="el" href="_c_l_scheduler_8h_source.xhtml#l00112">CLScheduler::target()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01780">GEMMLHSMatrixInfo::transpose</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01790">GEMMRHSMatrixInfo::transpose</a>, <a class="el" href="_c_l_scheduler_8h_source.xhtml#l00172">CLScheduler::tune_kernel_static()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01779">GEMMLHSMatrixInfo::v0</a>, and <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml#l00233">CLGEMM::validate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_r_n_n_layer_8cpp_source.xhtml#l00069">CLRNNLayer::configure()</a>, <a class="el" href="_c_l_winograd_convolution_layer_8cpp_source.xhtml#l00092">CLWinogradConvolutionLayer::configure()</a>, and <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00053">CLLSTMLayer::configure()</a>.</p>

</div>
</div>
<a id="aebefa7576807b8b316ea46c242949039"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aebefa7576807b8b316ea46c242949039">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class from being copied (As this class contains pointers) </p>

</div>
</div>
<a id="a83a121357a2121ef7f0670b3f81e4645"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a83a121357a2121ef7f0670b3f81e4645">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default move assignment operator. </p>

</div>
</div>
<a id="aa9b93ef660fc3c5b4b19d3fc7b891b77"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9b93ef660fc3c5b4b19d3fc7b891b77">&#9670;&nbsp;</a></span>prepare()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void prepare </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prepare the function for executing. </p>
<p>Any one off pre-processing step required by the function is handled here</p>
<dl class="section note"><dt>Note</dt><dd>Prepare stage might not need all the function's buffers' backing memory to be available in order to execute </dd></dl>

<p>Reimplemented from <a class="el" href="classarm__compute_1_1_i_function.xhtml#a820f7291c24155a2980512fae45aac26">IFunction</a>.</p>

<p class="definition">Definition at line <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml#l00388">388</a> of file <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml">CLGEMM.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;{</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    <span class="keywordflow">if</span>(!_is_prepared)</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    {</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        <span class="keywordflow">if</span>(_is_interleaved_transposed &amp;&amp; _reshape_b_only_on_first_run)</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        {</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;            <span class="comment">// Run transpose kernel and mark original weights tensor as unused</span></div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;            _tmp_b.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(_reshape_rhs_kernel, <span class="keyword">false</span>);</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;            _original_b-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a9bc00234de9adf8c99a21eb1d7d494c2">mark_as_unused</a>();</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        }</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ad381d1aed28b4b1e1f5a710633934580">queue</a>().finish();</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        _is_prepared = <span class="keyword">true</span>;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    }</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a9b58d0eb9a2af8e6d7908695e1557d6c"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">arm_compute::CLScheduler::get</a></div><div class="ttdeci">static CLScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00041">CLScheduler.cpp:41</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml_a4083de30daebd6bdee6b35d9c8262108"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">arm_compute::CLTensor::allocator</a></div><div class="ttdeci">CLTensorAllocator * allocator()</div><div class="ttdoc">Return a pointer to the tensor's allocator.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_8cpp_source.xhtml#l00050">CLTensor.cpp:50</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_a9bc00234de9adf8c99a21eb1d7d494c2"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a9bc00234de9adf8c99a21eb1d7d494c2">arm_compute::ITensor::mark_as_unused</a></div><div class="ttdeci">void mark_as_unused() const</div><div class="ttdoc">Marks a tensor as unused.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8cpp_source.xhtml#l00162">ITensor.cpp:162</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_ae1a643e517f50bf0392fb6516dd7cf67"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">arm_compute::CLScheduler::enqueue</a></div><div class="ttdeci">void enqueue(ICLKernel &amp;kernel, bool flush=true)</div><div class="ttdoc">Schedule the execution of the passed kernel if possible.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00095">CLScheduler.cpp:95</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_ad381d1aed28b4b1e1f5a710633934580"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#ad381d1aed28b4b1e1f5a710633934580">arm_compute::CLScheduler::queue</a></div><div class="ttdeci">cl::CommandQueue &amp; queue()</div><div class="ttdoc">Accessor for the associated CL command queue.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8h_source.xhtml#l00102">CLScheduler.h:102</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_allocator_xhtml_a6e509c2a177b0b29e9e2369535094dee"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">arm_compute::CLTensorAllocator::allocate</a></div><div class="ttdeci">void allocate() override</div><div class="ttdoc">Allocate size specified by TensorInfo of OpenCL memory.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_allocator_8cpp_source.xhtml#l00074">CLTensorAllocator.cpp:74</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_tensor_allocator_8cpp_source.xhtml#l00074">CLTensorAllocator::allocate()</a>, <a class="el" href="_c_l_tensor_8cpp_source.xhtml#l00050">CLTensor::allocator()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00095">CLScheduler::enqueue()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00041">CLScheduler::get()</a>, <a class="el" href="_i_tensor_8cpp_source.xhtml#l00162">ITensor::mark_as_unused()</a>, and <a class="el" href="_c_l_scheduler_8h_source.xhtml#l00102">CLScheduler::queue()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_r_n_n_layer_8cpp_source.xhtml#l00121">CLRNNLayer::prepare()</a>, <a class="el" href="_c_l_winograd_convolution_layer_8cpp_source.xhtml#l00215">CLWinogradConvolutionLayer::prepare()</a>, <a class="el" href="_c_l_fully_connected_layer_8cpp_source.xhtml#l00370">CLFullyConnectedLayer::prepare()</a>, <a class="el" href="_c_l_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00569">CLGEMMConvolutionLayer::prepare()</a>, and <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml#l00351">CLGEMM::run()</a>.</p>

</div>
</div>
<a id="ad1717410afd0be936c6213a63c8005fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad1717410afd0be936c6213a63c8005fb">&#9670;&nbsp;</a></span>run()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void run </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Run the kernels contained in the function. </p>
<p>For NEON kernels:</p><ul>
<li>Multi-threading is used for the kernels which are parallelisable.</li>
<li>By default std::thread::hardware_concurrency() threads are used.</li>
</ul>
<dl class="section note"><dt>Note</dt><dd><a class="el" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#ae64eebaa07f4d2da6cc2ba538c3cb095">CPPScheduler::set_num_threads()</a> can be used to manually set the number of threads</dd></dl>
<p>For OpenCL kernels:</p><ul>
<li>All the kernels are enqueued on the queue associated with <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml" title="Provides global access to a CL context and command queue.">CLScheduler</a>.</li>
<li>The queue is then flushed.</li>
</ul>
<dl class="section note"><dt>Note</dt><dd>The function will not block until the kernels are executed. It is the user's responsibility to wait. </dd>
<dd>
Will call <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#aa9b93ef660fc3c5b4b19d3fc7b891b77" title="Prepare the function for executing.">prepare()</a> on first run if hasn't been done </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_function.xhtml#a18954417d3124a8095783ea13dc6d00b">IFunction</a>.</p>

<p class="definition">Definition at line <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml#l00351">351</a> of file <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml">CLGEMM.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;{</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#aa9b93ef660fc3c5b4b19d3fc7b891b77">prepare</a>();</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    _memory_group.<a class="code" href="classarm__compute_1_1_memory_group_base.xhtml#a8d16047fa6fdcf5f5453056cc0e1daba">acquire</a>();</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <span class="keywordflow">if</span>(_is_interleaved_transposed)</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    {</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        <span class="comment">// Run interleave kernel</span></div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(_reshape_lhs_kernel, <span class="keyword">false</span>);</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        <span class="keywordflow">if</span>(!_reshape_b_only_on_first_run)</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        {</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            <span class="comment">// Run transpose kernel</span></div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(_reshape_rhs_kernel, <span class="keyword">false</span>);</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        }</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    }</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    <span class="comment">// Run matrix multiply kernel</span></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <span class="keywordflow">if</span>(_is_new_gemm_reshaped)</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    {</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(_mm_reshaped_kernel, !_run_addition);</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    }</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    {</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(_mm_kernel, !_run_addition);</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    }</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <span class="comment">// Run matrix addition kernel</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="keywordflow">if</span>(_run_addition)</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    {</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(_ma_kernel);</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    }</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    _memory_group.<a class="code" href="classarm__compute_1_1_memory_group_base.xhtml#ad7ed3842c3160ae4b9f51acbf4564438">release</a>();</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_g_e_m_m_xhtml_aa9b93ef660fc3c5b4b19d3fc7b891b77"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#aa9b93ef660fc3c5b4b19d3fc7b891b77">arm_compute::CLGEMM::prepare</a></div><div class="ttdeci">void prepare() override</div><div class="ttdoc">Prepare the function for executing.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_8cpp_source.xhtml#l00388">CLGEMM.cpp:388</a></div></div>
<div class="ttc" id="classarm__compute_1_1_memory_group_base_xhtml_a8d16047fa6fdcf5f5453056cc0e1daba"><div class="ttname"><a href="classarm__compute_1_1_memory_group_base.xhtml#a8d16047fa6fdcf5f5453056cc0e1daba">arm_compute::MemoryGroupBase::acquire</a></div><div class="ttdeci">void acquire() override</div><div class="ttdoc">Acquires backing memory for the whole group.</div><div class="ttdef"><b>Definition:</b> <a href="_memory_group_base_8h_source.xhtml#l00134">MemoryGroupBase.h:134</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a9b58d0eb9a2af8e6d7908695e1557d6c"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">arm_compute::CLScheduler::get</a></div><div class="ttdeci">static CLScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00041">CLScheduler.cpp:41</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_ae1a643e517f50bf0392fb6516dd7cf67"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">arm_compute::CLScheduler::enqueue</a></div><div class="ttdeci">void enqueue(ICLKernel &amp;kernel, bool flush=true)</div><div class="ttdoc">Schedule the execution of the passed kernel if possible.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00095">CLScheduler.cpp:95</a></div></div>
<div class="ttc" id="classarm__compute_1_1_memory_group_base_xhtml_ad7ed3842c3160ae4b9f51acbf4564438"><div class="ttname"><a href="classarm__compute_1_1_memory_group_base.xhtml#ad7ed3842c3160ae4b9f51acbf4564438">arm_compute::MemoryGroupBase::release</a></div><div class="ttdeci">void release() override</div><div class="ttdoc">Releases backing memory of the whole group.</div><div class="ttdef"><b>Definition:</b> <a href="_memory_group_base_8h_source.xhtml#l00145">MemoryGroupBase.h:145</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_memory_group_base_8h_source.xhtml#l00134">MemoryGroupBase&lt; TensorType &gt;::acquire()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00095">CLScheduler::enqueue()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00041">CLScheduler::get()</a>, <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml#l00388">CLGEMM::prepare()</a>, and <a class="el" href="_memory_group_base_8h_source.xhtml#l00145">MemoryGroupBase&lt; TensorType &gt;::release()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_r_n_n_layer_8cpp_source.xhtml#l00104">CLRNNLayer::run()</a>, <a class="el" href="_c_l_winograd_convolution_layer_8cpp_source.xhtml#l00197">CLWinogradConvolutionLayer::run()</a>, <a class="el" href="_c_l_fully_connected_layer_8cpp_source.xhtml#l00332">CLFullyConnectedLayer::run()</a>, <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00465">CLLSTMLayer::run()</a>, and <a class="el" href="_c_l_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00525">CLGEMMConvolutionLayer::run()</a>.</p>

</div>
</div>
<a id="a3493ba7d1f2057740ff5931fa00a44ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3493ba7d1f2057740ff5931fa00a44ac">&#9670;&nbsp;</a></span>validate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> validate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>alpha</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml">GEMMInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>gemm_info</em> = <code><a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml">GEMMInfo</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Static function to check if given info will lead to a valid configuration of <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>First input tensor info (Matrix or <a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information.">Vector</a> A). Data types supported: F16/F32 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">b</td><td>Second input tensor info (Matrix B). Data type supported: same as <code>a</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">c</td><td>Third input tensor info (Matrix C). It can be a nullptr if just the multiplication between <code>a</code> and <code>b</code> is needed. Data type supported: same as <code>a</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output</td><td>Output tensor info. Data type supported: same as <code>a</code> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">alpha</td><td>Weight of the matrix product </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">beta</td><td>Weight of matrix C </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gemm_info</td><td>(Optional) Specifies if the matrix A and/or matrix B have been reshaped and if the reshape of matrix B should happen only for the first run</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a status </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml#l00233">233</a> of file <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml">CLGEMM.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;{</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3161c2c93c655dd30953372064ec627b">alpha</a>);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(output);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="comment">// Check if we need to reshape the matrix B only on the first run</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> reshape_b_only_on_first_run = gemm_info.reshape_b_only_on_first_run();</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keyword">const</span> ITensorInfo *matrix_a_info = a;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keyword">const</span> ITensorInfo *matrix_b_info = b;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    TensorInfo tmp_a_info{};</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    TensorInfo tmp_b_info{};</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="comment">// Get the GPU target</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> gpu_target = <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a27561688e2fc60176608ef725a4ecb30">target</a>();</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="comment">// Arguments used by GEMMReshapeInfo</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="comment">// If we pass the matrix A and matrix B reshaped to CLGEMMMatrixMultiplyKernel, we need to pass m, n, k, mult_transpose1xW_width and mult_interleave4x4_height to CLGEMMReshapeInfo</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="comment">// in order to know how the matrices have been reshaped</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>           <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2ad7f431e3446fddcd9b6b9f93c4c14">data_type</a>                 = a-&gt;data_type();</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keywordtype">bool</span>               reinterpret_input_as_3d   = gemm_info.reinterpret_input_as_3d();</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m                         = reinterpret_input_as_3d ? (a-&gt;dimension(1) * a-&gt;dimension(2)) : a-&gt;dimension(1);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n                         = b-&gt;dimension(0);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k                         = a-&gt;dimension(0);</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch_size                = reinterpret_input_as_3d ? a-&gt;dimension(3) : a-&gt;dimension(2);</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keywordtype">int</span>                mult_transpose1xW_width   = 1;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keywordtype">int</span>                mult_interleave4x4_height = 1;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          depth_output_gemm3d       = gemm_info.depth_output_gemm3d();</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#a2355c2bf5d1950088937416baea24fe6">get_arch_from_target</a>(gpu_target) == <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aa78cc0fd1cab24af0fad71dc4c256f8e">GPUTarget::BIFROST</a>)</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    {</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        mult_transpose1xW_width   = 4;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        mult_interleave4x4_height = 2;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    }</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    GEMMRHSMatrixInfo rhs_info;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    rhs_info.n0         = 16 / b-&gt;element_size();</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    rhs_info.k0         = 1;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    rhs_info.h0         = mult_transpose1xW_width;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    rhs_info.interleave = <span class="keyword">false</span>;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    rhs_info.transpose  = <span class="keyword">false</span>;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    GEMMLHSMatrixInfo lhs_info;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    lhs_info.m0         = 4;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    lhs_info.k0         = 4;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    lhs_info.v0         = mult_interleave4x4_height;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    lhs_info.interleave = <span class="keyword">true</span>;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    lhs_info.transpose  = <span class="keyword">true</span>;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="comment">// Check if we need to reshape the matrix A and matrix B</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> run_interleave_transpose = is_interleaved_transposed(m, n, k, a-&gt;data_type(), reshape_b_only_on_first_run, gpu_target);</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="comment">// Check if we can run the new reshaped GEMM</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> workload             = static_cast&lt;float&gt;((m * n) / 20.0f);</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_new_gemm_reshaped = (workload &gt; 1600.f) &amp;&amp; (<a class="code" href="namespacearm__compute.xhtml#a2355c2bf5d1950088937416baea24fe6">get_arch_from_target</a>(gpu_target) == <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aa78cc0fd1cab24af0fad71dc4c256f8e">GPUTarget::BIFROST</a>) &amp;&amp; run_interleave_transpose &amp;&amp; (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2ad7f431e3446fddcd9b6b9f93c4c14">data_type</a> == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> add_matrix_c  = (beta != 0.f &amp;&amp; c != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_beta_one   = std::abs(1.0f - beta) &lt; 0.00001f;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> use_fused_add = is_beta_one &amp;&amp; (c != <span class="keyword">nullptr</span> &amp;&amp; c-&gt;num_dimensions() == 1) &amp;&amp; !is_new_gemm_reshaped;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="comment">// if _is_interleaved_transposed is set, force reinterpret_input_as_3d to be false as the output of CLGEMMInterleaveKernel will be 2D</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keywordflow">if</span>(run_interleave_transpose)</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    {</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        reinterpret_input_as_3d = <span class="keyword">false</span>;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    }</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="keyword">const</span> GEMMReshapeInfo reshape_info = GEMMReshapeInfo(m, n, k, mult_transpose1xW_width, mult_interleave4x4_height, depth_output_gemm3d, reinterpret_input_as_3d);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keywordflow">if</span>(run_interleave_transpose)</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    {</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        matrix_a_info = &amp;tmp_a_info;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        matrix_b_info = &amp;tmp_b_info;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        <span class="keywordflow">if</span>(is_new_gemm_reshaped)</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        {</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            GEMMLHSMatrixInfo lhs_info;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            <span class="comment">// Pick up the GEMM configuration</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            std::tie(lhs_info, rhs_info) = <a class="code" href="classarm__compute_1_1cl__gemm_1_1_c_l_g_e_m_m_reshaped_configuration_factory.xhtml#add9adb2d4e6b12ac04f461bcbf0a17d2">CLGEMMReshapedConfigurationFactory::create</a>()-&gt;configure(m, n, k, batch_size, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2ad7f431e3446fddcd9b6b9f93c4c14">data_type</a>);</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a47be6fa38308d0003c25b60b7dbc45ce">auto_init_if_empty</a>(tmp_a_info, a-&gt;clone()-&gt;set_tensor_shape(<a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a389f89ab5121dad0906d0b7324fbf73d">compute_lhs_reshaped_shape</a>(*a, lhs_info, gemm_info.reinterpret_input_as_3d())));</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_reshape_l_h_s_matrix_kernel.xhtml#a5c71f56a17ffbf89b745cd41e9db66f1">CLGEMMReshapeLHSMatrixKernel::validate</a>(a, &amp;tmp_a_info, lhs_info, gemm_info.reinterpret_input_as_3d()));</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a47be6fa38308d0003c25b60b7dbc45ce">auto_init_if_empty</a>(tmp_b_info, b-&gt;clone()-&gt;set_tensor_shape(<a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a09ad10a110d947fd9c444b2ea5e4c127">compute_rhs_reshaped_shape</a>(*b, rhs_info)));</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_reshape_r_h_s_matrix_kernel.xhtml#aca0da52b749b54d37ff996f4b28f6762">CLGEMMReshapeRHSMatrixKernel::validate</a>(b, &amp;tmp_b_info, rhs_info));</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;            <span class="comment">// Validate matrix multiply</span></div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_matrix_multiply_reshaped_kernel.xhtml#ab3c446588dcc84f4cf6e9df878f5bc1e">CLGEMMMatrixMultiplyReshapedKernel::validate</a>(matrix_a_info, matrix_b_info, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3161c2c93c655dd30953372064ec627b">alpha</a>, lhs_info, rhs_info, GEMMReshapeInfo(m, n, k, 1, 1,</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                                                                                     depth_output_gemm3d, reinterpret_input_as_3d)));</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        }</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        {</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            <span class="comment">// Validate interleave kernel</span></div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a47be6fa38308d0003c25b60b7dbc45ce">auto_init_if_empty</a>(tmp_a_info, a-&gt;clone()-&gt;set_tensor_shape(<a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a389f89ab5121dad0906d0b7324fbf73d">compute_lhs_reshaped_shape</a>(*a, lhs_info, gemm_info.reinterpret_input_as_3d())));</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_reshape_l_h_s_matrix_kernel.xhtml#a5c71f56a17ffbf89b745cd41e9db66f1">CLGEMMReshapeLHSMatrixKernel::validate</a>(a, &amp;tmp_a_info, lhs_info, gemm_info.reinterpret_input_as_3d()));</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            <span class="comment">// Validate transpose kernel</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a47be6fa38308d0003c25b60b7dbc45ce">auto_init_if_empty</a>(tmp_b_info, b-&gt;clone()-&gt;set_tensor_shape(<a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a09ad10a110d947fd9c444b2ea5e4c127">compute_rhs_reshaped_shape</a>(*b, rhs_info)));</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_reshape_r_h_s_matrix_kernel.xhtml#aca0da52b749b54d37ff996f4b28f6762">CLGEMMReshapeRHSMatrixKernel::validate</a>(b, &amp;tmp_b_info, rhs_info));</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        }</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    }</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keywordflow">if</span>(!is_new_gemm_reshaped)</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    {</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        <span class="comment">// Validate matrix multiply</span></div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_matrix_multiply_kernel.xhtml#a9798dff298d3588874b6aed0f41743a9">CLGEMMMatrixMultiplyKernel::validate</a>(matrix_a_info, matrix_b_info, (add_matrix_c &amp;&amp; !use_fused_add) ? <span class="keyword">nullptr</span> : c, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3161c2c93c655dd30953372064ec627b">alpha</a>, beta,</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                                                                         run_interleave_transpose, reshape_info, gpu_target, gemm_info.fp_mixed_precision()));</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    }</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keywordflow">if</span>(add_matrix_c &amp;&amp; !use_fused_add)</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    {</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <span class="comment">// Validate matrix addition kernel</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_matrix_addition_kernel.xhtml#ae722d2edbab88977ea4604d5395d8463">CLGEMMMatrixAdditionKernel::validate</a>(c, output, beta));</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    }</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a9b58d0eb9a2af8e6d7908695e1557d6c"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">arm_compute::CLScheduler::get</a></div><div class="ttdeci">static CLScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00041">CLScheduler.cpp:41</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a27561688e2fc60176608ef725a4ecb30"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a27561688e2fc60176608ef725a4ecb30">arm_compute::CLScheduler::target</a></div><div class="ttdeci">GPUTarget target() const</div><div class="ttdoc">Get the target GPU.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8h_source.xhtml#l00112">CLScheduler.h:112</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_g_e_m_m_reshape_l_h_s_matrix_kernel_xhtml_a5c71f56a17ffbf89b745cd41e9db66f1"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m_reshape_l_h_s_matrix_kernel.xhtml#a5c71f56a17ffbf89b745cd41e9db66f1">arm_compute::CLGEMMReshapeLHSMatrixKernel::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *output, const GEMMLHSMatrixInfo &amp;lhs_info, bool reinterpret_input_as_3d)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLGEMMReshapeLHSMatrixKe...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_reshape_l_h_s_matrix_kernel_8cpp_source.xhtml#l00191">CLGEMMReshapeLHSMatrixKernel.cpp:191</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a8a1e1c105f0bdaf37db408c7cfcb77a4"><div class="ttname"><a href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ON_ERROR(status)</div><div class="ttdoc">Checks if a status contains an error and returns it.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00193">Error.h:193</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::Format::F32</a></div><div class="ttdoc">1 channel, 1 F32 per channel</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a2355c2bf5d1950088937416baea24fe6"><div class="ttname"><a href="namespacearm__compute.xhtml#a2355c2bf5d1950088937416baea24fe6">arm_compute::get_arch_from_target</a></div><div class="ttdeci">GPUTarget get_arch_from_target(GPUTarget target)</div><div class="ttdoc">Helper function to get the GPU arch.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_g_p_u_target_8cpp_source.xhtml#l00160">GPUTarget.cpp:160</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_g_e_m_m_matrix_multiply_kernel_xhtml_a9798dff298d3588874b6aed0f41743a9"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m_matrix_multiply_kernel.xhtml#a9798dff298d3588874b6aed0f41743a9">arm_compute::CLGEMMMatrixMultiplyKernel::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input0, const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, float alpha, float beta, bool is_interleaved_transposed, const GEMMReshapeInfo &amp;reshape_info, GPUTarget gpu_target, bool fp_mixed_precision=false)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLGEMMMatrixMultiplyKern...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_matrix_multiply_kernel_8cpp_source.xhtml#l00413">CLGEMMMatrixMultiplyKernel.cpp:413</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a47be6fa38308d0003c25b60b7dbc45ce"><div class="ttname"><a href="namespacearm__compute.xhtml#a47be6fa38308d0003c25b60b7dbc45ce">arm_compute::auto_init_if_empty</a></div><div class="ttdeci">bool auto_init_if_empty(ITensorInfo &amp;info, const TensorShape &amp;shape, int num_channels, DataType data_type, QuantizationInfo quantization_info=QuantizationInfo())</div><div class="ttdoc">Auto initialize the tensor info (shape, number of channels and data type) if the current assignment i...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00201">Helpers.inl:201</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac2ad7f431e3446fddcd9b6b9f93c4c14"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2ad7f431e3446fddcd9b6b9f93c4c14">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00160">Error.h:160</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a389f89ab5121dad0906d0b7324fbf73d"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a389f89ab5121dad0906d0b7324fbf73d">arm_compute::misc::shape_calculator::compute_lhs_reshaped_shape</a></div><div class="ttdeci">TensorShape compute_lhs_reshaped_shape(const ITensorInfo &amp;a, const GEMMLHSMatrixInfo &amp;lhs_info, bool reinterpret_input_as_3d=false)</div><div class="ttdoc">Calculate the Left Hand Side matrix reshaped shape.</div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00143">ShapeCalculator.h:143</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a09ad10a110d947fd9c444b2ea5e4c127"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a09ad10a110d947fd9c444b2ea5e4c127">arm_compute::misc::shape_calculator::compute_rhs_reshaped_shape</a></div><div class="ttdeci">TensorShape compute_rhs_reshaped_shape(const ITensorInfo &amp;a, const GEMMRHSMatrixInfo &amp;rhs_info)</div><div class="ttdoc">Calculate the Right Hand Side matrix reshaped shape.</div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00187">ShapeCalculator.h:187</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a3161c2c93c655dd30953372064ec627b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a3161c2c93c655dd30953372064ec627b">arm_compute::test::validation::alpha</a></div><div class="ttdeci">const float alpha</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_accumulate_8cpp_source.xhtml#l00103">Accumulate.cpp:103</a></div></div>
<div class="ttc" id="classarm__compute_1_1cl__gemm_1_1_c_l_g_e_m_m_reshaped_configuration_factory_xhtml_add9adb2d4e6b12ac04f461bcbf0a17d2"><div class="ttname"><a href="classarm__compute_1_1cl__gemm_1_1_c_l_g_e_m_m_reshaped_configuration_factory.xhtml#add9adb2d4e6b12ac04f461bcbf0a17d2">arm_compute::cl_gemm::CLGEMMReshapedConfigurationFactory::create</a></div><div class="ttdeci">static std::unique_ptr&lt; ICLGEMMReshapedConfiguration &gt; create()</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_reshaped_configuration_8h_source.xhtml#l00041">CLGEMMReshapedConfiguration.h:41</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">arm_compute::GPUTarget</a></div><div class="ttdeci">GPUTarget</div><div class="ttdoc">Available GPU Targets.</div><div class="ttdef"><b>Definition:</b> <a href="_g_p_u_target_8h_source.xhtml#l00034">GPUTarget.h:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_g_e_m_m_matrix_multiply_reshaped_kernel_xhtml_ab3c446588dcc84f4cf6e9df878f5bc1e"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m_matrix_multiply_reshaped_kernel.xhtml#ab3c446588dcc84f4cf6e9df878f5bc1e">arm_compute::CLGEMMMatrixMultiplyReshapedKernel::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input0, const ITensorInfo *input1, const ITensorInfo *output, float alpha, const GEMMLHSMatrixInfo &amp;lhs_info, const GEMMRHSMatrixInfo &amp;rhs_info, const GEMMReshapeInfo &amp;gemm_info)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLGEMMMatrixMultiplyResh...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00251">CLGEMMMatrixMultiplyReshapedKernel.cpp:251</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3aa78cc0fd1cab24af0fad71dc4c256f8e"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aa78cc0fd1cab24af0fad71dc4c256f8e">arm_compute::GPUTarget::BIFROST</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_g_e_m_m_matrix_addition_kernel_xhtml_ae722d2edbab88977ea4604d5395d8463"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m_matrix_addition_kernel.xhtml#ae722d2edbab88977ea4604d5395d8463">arm_compute::CLGEMMMatrixAdditionKernel::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *output, float beta)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLGEMMMatrixAdditionKern...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_matrix_addition_kernel_8cpp_source.xhtml#l00103">CLGEMMMatrixAdditionKernel.cpp:103</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdoc">Available data types.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00074">Types.h:74</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_g_e_m_m_reshape_r_h_s_matrix_kernel_xhtml_aca0da52b749b54d37ff996f4b28f6762"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m_reshape_r_h_s_matrix_kernel.xhtml#aca0da52b749b54d37ff996f4b28f6762">arm_compute::CLGEMMReshapeRHSMatrixKernel::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *output, const GEMMRHSMatrixInfo &amp;rhs_info)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLGEMMReshapeRHSMatrixKe...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_reshape_r_h_s_matrix_kernel_8cpp_source.xhtml#l00149">CLGEMMReshapeRHSMatrixKernel.cpp:149</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_o_n_2_accumulate_8cpp_source.xhtml#l00103">arm_compute::test::validation::alpha</a>, <a class="el" href="_error_8h_source.xhtml#l00193">ARM_COMPUTE_RETURN_ON_ERROR</a>, <a class="el" href="_error_8h_source.xhtml#l00160">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00201">arm_compute::auto_init_if_empty()</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3aa78cc0fd1cab24af0fad71dc4c256f8e">arm_compute::BIFROST</a>, <a class="el" href="classarm__compute_1_1misc_1_1_i_cloneable.xhtml#a4d10e5012a872e7f78f2b539b673049d">ICloneable&lt; T &gt;::clone()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00143">arm_compute::misc::shape_calculator::compute_lhs_reshaped_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00187">arm_compute::misc::shape_calculator::compute_rhs_reshaped_shape()</a>, <a class="el" href="_c_l_g_e_m_m_reshaped_configuration_8h_source.xhtml#l00041">CLGEMMReshapedConfigurationFactory::create()</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::data_type</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">ITensorInfo::data_type()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01858">GEMMInfo::depth_output_gemm3d()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#aa459796b5489eca8a9160cb5dcf1a103">ITensorInfo::element_size()</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::F32</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01890">GEMMInfo::fp_mixed_precision()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00041">CLScheduler::get()</a>, <a class="el" href="src_2core_2_g_p_u_target_8cpp_source.xhtml#l00160">arm_compute::get_arch_from_target()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01789">GEMMRHSMatrixInfo::h0</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01781">GEMMLHSMatrixInfo::interleave</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01791">GEMMRHSMatrixInfo::interleave</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01778">GEMMLHSMatrixInfo::k0</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01788">GEMMRHSMatrixInfo::k0</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01777">GEMMLHSMatrixInfo::m0</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01787">GEMMRHSMatrixInfo::n0</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">ITensorInfo::num_dimensions()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01866">GEMMInfo::reinterpret_input_as_3d()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01850">GEMMInfo::reshape_b_only_on_first_run()</a>, <a class="el" href="_c_l_scheduler_8h_source.xhtml#l00112">CLScheduler::target()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01780">GEMMLHSMatrixInfo::transpose</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01790">GEMMRHSMatrixInfo::transpose</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01779">GEMMLHSMatrixInfo::v0</a>, <a class="el" href="_c_l_g_e_m_m_matrix_addition_kernel_8cpp_source.xhtml#l00103">CLGEMMMatrixAdditionKernel::validate()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00251">CLGEMMMatrixMultiplyReshapedKernel::validate()</a>, <a class="el" href="_c_l_g_e_m_m_reshape_r_h_s_matrix_kernel_8cpp_source.xhtml#l00149">CLGEMMReshapeRHSMatrixKernel::validate()</a>, <a class="el" href="_c_l_g_e_m_m_reshape_l_h_s_matrix_kernel_8cpp_source.xhtml#l00191">CLGEMMReshapeLHSMatrixKernel::validate()</a>, and <a class="el" href="_c_l_g_e_m_m_matrix_multiply_kernel_8cpp_source.xhtml#l00413">CLGEMMMatrixMultiplyKernel::validate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml#l00102">CLGEMM::configure()</a>, <a class="el" href="_c_l_r_n_n_layer_8cpp_source.xhtml#l00044">CLRNNLayer::validate()</a>, <a class="el" href="_c_l_winograd_convolution_layer_8cpp_source.xhtml#l00143">CLWinogradConvolutionLayer::validate()</a>, and <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00305">CLLSTMLayer::validate()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>arm_compute/runtime/CL/functions/<a class="el" href="_c_l_g_e_m_m_8h_source.xhtml">CLGEMM.h</a></li>
<li>src/runtime/CL/functions/<a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml">CLGEMM.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a></li>
    <li class="footer">Generated on Thu Feb 28 2019 12:24:59 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
