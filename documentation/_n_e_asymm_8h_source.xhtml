<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute/core/NEON/NEAsymm.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">19.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_n_e_asymm_8h_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">NEAsymm.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_n_e_asymm_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2019 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef __ARM_COMPUTE_NEASYMM_H__</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define __ARM_COMPUTE_NEASYMM_H__</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;arm_neon.h&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div><div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a70ecc99f2f6b646579b58463dc026671">   31</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearm__compute.xhtml#a70ecc99f2f6b646579b58463dc026671">qasymm8x8_t</a>   = uint8x8_t;   </div><div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a805d740633d70a5f0b019d72c517e67d">   32</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearm__compute.xhtml#a805d740633d70a5f0b019d72c517e67d">qasymm8x8x2_t</a> = uint8x8x2_t; </div><div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a0c6e16826765130b480af53eda3635be">   33</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearm__compute.xhtml#a0c6e16826765130b480af53eda3635be">qasymm8x8x3_t</a> = uint8x8x3_t; </div><div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a41d3460ff424e2e21c629b3f27386a8b">   34</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearm__compute.xhtml#a41d3460ff424e2e21c629b3f27386a8b">qasymm8x8x4_t</a> = uint8x8x4_t; </div><div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ac7e1832b8c58f07a98fc8d390b16ac27">   35</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearm__compute.xhtml#ac7e1832b8c58f07a98fc8d390b16ac27">qasymm8x16_t</a>  = uint8x16_t;  </div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;int32x4_t <a class="code" href="namespacearm__compute.xhtml#a5e28a3911204ac952601f512c82b48f1">rounding_divide_by_pow2</a>(int32x4_t x, <span class="keywordtype">int</span> exponent);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;uint8x16_t <a class="code" href="namespacearm__compute.xhtml#aba8de9eaa10a7cb45c5aa603585d0e4c">vmlaq_qasymm8</a>(<a class="code" href="namespacearm__compute.xhtml#ac7e1832b8c58f07a98fc8d390b16ac27">qasymm8x16_t</a> vd, float32x4_t vs, float32x4_t vo);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">bool</span> is_bounded_relu&gt;</div><div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a695a8105065167f7e4596d31f23a3573">   74</a></span>&#160;uint8x16_t <a class="code" href="namespacearm__compute.xhtml#a695a8105065167f7e4596d31f23a3573">finalize_quantization</a>(int32x4x4_t &amp;in_s32,</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                                 <span class="keywordtype">int</span>          result_fixedpoint_multiplier,</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                                 int32_t      result_shift,</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                                 int32x4_t    result_offset_after_shift_s32,</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                                 uint8x16_t   min_u8,</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                                 uint8x16_t   max_u8)</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;{</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keyword">const</span> <span class="keyword">static</span> int32x4_t zero_s32 = vdupq_n_s32(0);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="comment">// Fixed point multiplication with vector saturating rounding doubling multiply high with scalar</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    in_s32.val[0] = vqrdmulhq_n_s32(in_s32.val[0], result_fixedpoint_multiplier);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    in_s32.val[1] = vqrdmulhq_n_s32(in_s32.val[1], result_fixedpoint_multiplier);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    in_s32.val[2] = vqrdmulhq_n_s32(in_s32.val[2], result_fixedpoint_multiplier);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    in_s32.val[3] = vqrdmulhq_n_s32(in_s32.val[3], result_fixedpoint_multiplier);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="comment">// Round to the nearest division by a power-of-two using result_shift_s32</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    in_s32.val[0] = <a class="code" href="namespacearm__compute.xhtml#a5e28a3911204ac952601f512c82b48f1">rounding_divide_by_pow2</a>(in_s32.val[0], result_shift);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    in_s32.val[1] = <a class="code" href="namespacearm__compute.xhtml#a5e28a3911204ac952601f512c82b48f1">rounding_divide_by_pow2</a>(in_s32.val[1], result_shift);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    in_s32.val[2] = <a class="code" href="namespacearm__compute.xhtml#a5e28a3911204ac952601f512c82b48f1">rounding_divide_by_pow2</a>(in_s32.val[2], result_shift);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    in_s32.val[3] = <a class="code" href="namespacearm__compute.xhtml#a5e28a3911204ac952601f512c82b48f1">rounding_divide_by_pow2</a>(in_s32.val[3], result_shift);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="comment">// Add the offset terms</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    in_s32.val[0] = vaddq_s32(in_s32.val[0], result_offset_after_shift_s32);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    in_s32.val[1] = vaddq_s32(in_s32.val[1], result_offset_after_shift_s32);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    in_s32.val[2] = vaddq_s32(in_s32.val[2], result_offset_after_shift_s32);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    in_s32.val[3] = vaddq_s32(in_s32.val[3], result_offset_after_shift_s32);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="comment">// Saturate negative values</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    in_s32.val[0] = vmaxq_s32(in_s32.val[0], zero_s32);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    in_s32.val[1] = vmaxq_s32(in_s32.val[1], zero_s32);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    in_s32.val[2] = vmaxq_s32(in_s32.val[2], zero_s32);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    in_s32.val[3] = vmaxq_s32(in_s32.val[3], zero_s32);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="comment">// Convert S32 to S16</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keyword">const</span> int16x8x2_t in_s16 =</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            vcombine_s16(vqmovn_s32(in_s32.val[0]), vqmovn_s32(in_s32.val[1])),</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            vcombine_s16(vqmovn_s32(in_s32.val[2]), vqmovn_s32(in_s32.val[3]))</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    };</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="comment">// Convert S16 to U8</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    uint8x16_t out_u8 = vcombine_u8(vqmovun_s16(in_s16.val[0]), vqmovun_s16(in_s16.val[1]));</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">if</span>(is_bounded_relu)</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    {</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        out_u8 = vmaxq_u8(out_u8, min_u8);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        out_u8 = vminq_u8(out_u8, max_u8);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keywordflow">return</span> out_u8;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;}</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a04ae4ae815c47d443852428a0528a7d2">  135</a></span>&#160;<span class="keyword">inline</span> float32x4x4_t <a class="code" href="namespacearm__compute.xhtml#a04ae4ae815c47d443852428a0528a7d2">vdequantize</a>(<span class="keyword">const</span> uint8x16_t &amp;qv, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;qi)</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;{</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>         <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acec6d8ad52a28972fa74e071c1a63b6a">scale</a>   = qi.<a class="code" href="structarm__compute_1_1_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>           <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>  = qi.<a class="code" href="structarm__compute_1_1_quantization_info.xhtml#aed7ea92f45bd273dde380a45ddced592">offset</a>;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keyword">const</span> int32x4_t     voffset = vdupq_n_s32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keyword">const</span> float32x4_t   vscale  = vdupq_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acec6d8ad52a28972fa74e071c1a63b6a">scale</a>);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keyword">const</span> float32x4x4_t vdequantized_input =</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    {</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        {</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            vmulq_f32(vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_low_u16(vmovl_u8(vget_low_u8(qv))))), voffset)), vscale),</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            vmulq_f32(vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_high_u16(vmovl_u8(vget_low_u8(qv))))), voffset)), vscale),</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            vmulq_f32(vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_low_u16(vmovl_u8(vget_high_u8(qv))))), voffset)), vscale),</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            vmulq_f32(vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_high_u16(vmovl_u8(vget_high_u8(qv))))), voffset)), vscale),</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        }</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    };</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">return</span> vdequantized_input;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;}</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a6554986624335b7c05f968342630f530">  160</a></span>&#160;<span class="keyword">inline</span> uint8x16_t <a class="code" href="namespacearm__compute.xhtml#a6554986624335b7c05f968342630f530">vquantize</a>(<span class="keyword">const</span> float32x4x4_t &amp;qv, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;qi)</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;{</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acec6d8ad52a28972fa74e071c1a63b6a">scale</a>     = qi.<a class="code" href="structarm__compute_1_1_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>         <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>    = qi.<a class="code" href="structarm__compute_1_1_quantization_info.xhtml#aed7ea92f45bd273dde380a45ddced592">offset</a>;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keyword">const</span> float32x4_t voffset   = vdupq_n_f32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keyword">const</span> float32x4_t vinvscale = vdupq_n_f32(1.f / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acec6d8ad52a28972fa74e071c1a63b6a">scale</a>);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keyword">const</span> int32x4x4_t rf =</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    {</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            vcvtnq_s32_f32(vmlaq_f32(voffset, qv.val[0], vinvscale)),</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            vcvtnq_s32_f32(vmlaq_f32(voffset, qv.val[1], vinvscale)),</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            vcvtnq_s32_f32(vmlaq_f32(voffset, qv.val[2], vinvscale)),</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            vcvtnq_s32_f32(vmlaq_f32(voffset, qv.val[3], vinvscale)),</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            vcvtq_s32_f32(vmlaq_f32(voffset, qv.val[0], vinvscale)),</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            vcvtq_s32_f32(vmlaq_f32(voffset, qv.val[1], vinvscale)),</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            vcvtq_s32_f32(vmlaq_f32(voffset, qv.val[2], vinvscale)),</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            vcvtq_s32_f32(vmlaq_f32(voffset, qv.val[3], vinvscale)),</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        }</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    };</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keyword">const</span> uint8x8_t pa = vqmovun_s16(vcombine_s16(vqmovn_s32(rf.val[0]), vqmovn_s32(rf.val[1])));</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keyword">const</span> uint8x8_t pb = vqmovun_s16(vcombine_s16(vqmovn_s32(rf.val[2]), vqmovn_s32(rf.val[3])));</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keywordflow">return</span> vcombine_u8(pa, pb);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;}</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_n_e_asymm_8inl.xhtml">arm_compute/core/NEON/NEAsymm.inl</a>&quot;</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="preprocessor">#endif // __ARM_COMPUTE_NEASYMM_H__</span></div><div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00312">helpers.h:312</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a805d740633d70a5f0b019d72c517e67d"><div class="ttname"><a href="namespacearm__compute.xhtml#a805d740633d70a5f0b019d72c517e67d">arm_compute::qasymm8x8x2_t</a></div><div class="ttdeci">uint8x8x2_t qasymm8x8x2_t</div><div class="ttdoc">8 bit quantized asymmetric vector with 16 elements</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00032">NEAsymm.h:32</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2018 ARM Limited.</div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00024">00_introduction.dox:24</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_aba8de9eaa10a7cb45c5aa603585d0e4c"><div class="ttname"><a href="namespacearm__compute.xhtml#aba8de9eaa10a7cb45c5aa603585d0e4c">arm_compute::vmlaq_qasymm8</a></div><div class="ttdeci">uint8x16_t vmlaq_qasymm8(qasymm8x16_t vd, float32x4_t vs, float32x4_t vo)</div><div class="ttdoc">Perform a multiply-accumulate on all 16 components of a QASYMM8 vector.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8inl_source.xhtml#l00034">NEAsymm.inl:34</a></div></div>
<div class="ttc" id="structarm__compute_1_1_quantization_info_xhtml_a1d28dec57cce925ad92342891bd71e7c"><div class="ttname"><a href="structarm__compute_1_1_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">arm_compute::QuantizationInfo::scale</a></div><div class="ttdeci">float scale</div><div class="ttdoc">scale</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00189">Types.h:189</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6554986624335b7c05f968342630f530"><div class="ttname"><a href="namespacearm__compute.xhtml#a6554986624335b7c05f968342630f530">arm_compute::vquantize</a></div><div class="ttdeci">uint8x16_t vquantize(const float32x4x4_t &amp;qv, const QuantizationInfo &amp;qi)</div><div class="ttdoc">Quantize a neon vector holding 16 floating point values.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00160">NEAsymm.h:160</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a0c6e16826765130b480af53eda3635be"><div class="ttname"><a href="namespacearm__compute.xhtml#a0c6e16826765130b480af53eda3635be">arm_compute::qasymm8x8x3_t</a></div><div class="ttdeci">uint8x8x3_t qasymm8x8x3_t</div><div class="ttdoc">8 bit quantized asymmetric vector with 24 elements</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00033">NEAsymm.h:33</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a04ae4ae815c47d443852428a0528a7d2"><div class="ttname"><a href="namespacearm__compute.xhtml#a04ae4ae815c47d443852428a0528a7d2">arm_compute::vdequantize</a></div><div class="ttdeci">float32x4x4_t vdequantize(const uint8x16_t &amp;qv, const QuantizationInfo &amp;qi)</div><div class="ttdoc">Dequantize a neon vector holding 16 quantized values.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00135">NEAsymm.h:135</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a41d3460ff424e2e21c629b3f27386a8b"><div class="ttname"><a href="namespacearm__compute.xhtml#a41d3460ff424e2e21c629b3f27386a8b">arm_compute::qasymm8x8x4_t</a></div><div class="ttdeci">uint8x8x4_t qasymm8x8x4_t</div><div class="ttdoc">8 bit quantized asymmetric vector with 32 elements</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00034">NEAsymm.h:34</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a70ecc99f2f6b646579b58463dc026671"><div class="ttname"><a href="namespacearm__compute.xhtml#a70ecc99f2f6b646579b58463dc026671">arm_compute::qasymm8x8_t</a></div><div class="ttdeci">uint8x8_t qasymm8x8_t</div><div class="ttdoc">8 bit quantized asymmetric vector with 8 elements</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00031">NEAsymm.h:31</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5e28a3911204ac952601f512c82b48f1"><div class="ttname"><a href="namespacearm__compute.xhtml#a5e28a3911204ac952601f512c82b48f1">arm_compute::rounding_divide_by_pow2</a></div><div class="ttdeci">int32x4_t rounding_divide_by_pow2(int32x4_t x, int exponent)</div><div class="ttdoc">Round to the nearest division by a power-of-two using exponent.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8inl_source.xhtml#l00026">NEAsymm.inl:26</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_acec6d8ad52a28972fa74e071c1a63b6a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#acec6d8ad52a28972fa74e071c1a63b6a">arm_compute::test::validation::scale</a></div><div class="ttdeci">scale</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_pixel_wise_multiplication_8cpp_source.xhtml#l00168">PixelWiseMultiplication.cpp:168</a></div></div>
<div class="ttc" id="_n_e_asymm_8inl_xhtml"><div class="ttname"><a href="_n_e_asymm_8inl.xhtml">NEAsymm.inl</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a695a8105065167f7e4596d31f23a3573"><div class="ttname"><a href="namespacearm__compute.xhtml#a695a8105065167f7e4596d31f23a3573">arm_compute::finalize_quantization</a></div><div class="ttdeci">uint8x16_t finalize_quantization(int32x4x4_t &amp;in_s32, int result_fixedpoint_multiplier, int32_t result_shift, int32x4_t result_offset_after_shift_s32, uint8x16_t min_u8, uint8x16_t max_u8)</div><div class="ttdoc">Performs final quantization step on 16 elements.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00074">NEAsymm.h:74</a></div></div>
<div class="ttc" id="structarm__compute_1_1_quantization_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_quantization_info.xhtml">arm_compute::QuantizationInfo</a></div><div class="ttdoc">Quantization settings (used for QASYMM8 data type)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00148">Types.h:148</a></div></div>
<div class="ttc" id="structarm__compute_1_1_quantization_info_xhtml_aed7ea92f45bd273dde380a45ddced592"><div class="ttname"><a href="structarm__compute_1_1_quantization_info.xhtml#aed7ea92f45bd273dde380a45ddced592">arm_compute::QuantizationInfo::offset</a></div><div class="ttdeci">int offset</div><div class="ttdoc">offset</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00190">Types.h:190</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ac7e1832b8c58f07a98fc8d390b16ac27"><div class="ttname"><a href="namespacearm__compute.xhtml#ac7e1832b8c58f07a98fc8d390b16ac27">arm_compute::qasymm8x16_t</a></div><div class="ttdeci">uint8x16_t qasymm8x16_t</div><div class="ttdoc">8 bit quantized asymmetric vector with 16 elements</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00035">NEAsymm.h:35</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_214608ef36d61442cb2b0c1c4e9a7def.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="dir_1fb090f0c6070330bfaccc4236d3ca0d.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_315f6cf1ec0b2df3ae747ff8286a19f5.xhtml">NEON</a></li><li class="navelem"><a class="el" href="_n_e_asymm_8h.xhtml">NEAsymm.h</a></li>
    <li class="footer">Generated on Thu Feb 28 2019 12:24:47 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
