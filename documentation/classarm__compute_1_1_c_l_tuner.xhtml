<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: CLTuner Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">19.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1_c_l_tuner.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Data Fields</a>  </div>
  <div class="headertitle">
<div class="title">CLTuner Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Basic implementation of the OpenCL tuner interface.  
 <a href="classarm__compute_1_1_c_l_tuner.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_c_l_tuner_8h_source.xhtml">CLTuner.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for CLTuner:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__compute_1_1_c_l_tuner__coll__graph.svg" width="84" height="112"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ad551ac5b533cac7908910085117f5ca8"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#ad551ac5b533cac7908910085117f5ca8">CLTuner</a> (bool <a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#a362184f6651ae4acde05d5ce85cfd16f">tune_new_kernels</a>=true)</td></tr>
<tr class="memdesc:ad551ac5b533cac7908910085117f5ca8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="#ad551ac5b533cac7908910085117f5ca8">More...</a><br /></td></tr>
<tr class="separator:ad551ac5b533cac7908910085117f5ca8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a577ac5b9d244bdf031905faaf08b968c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#a577ac5b9d244bdf031905faaf08b968c">~CLTuner</a> ()=default</td></tr>
<tr class="memdesc:a577ac5b9d244bdf031905faaf08b968c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="#a577ac5b9d244bdf031905faaf08b968c">More...</a><br /></td></tr>
<tr class="separator:a577ac5b9d244bdf031905faaf08b968c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba10acdb2d58e3e0a96364c487a71d40"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#aba10acdb2d58e3e0a96364c487a71d40">set_tune_new_kernels</a> (bool <a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#a362184f6651ae4acde05d5ce85cfd16f">tune_new_kernels</a>)</td></tr>
<tr class="memdesc:aba10acdb2d58e3e0a96364c487a71d40"><td class="mdescLeft">&#160;</td><td class="mdescRight">Setter for tune_new_kernels option.  <a href="#aba10acdb2d58e3e0a96364c487a71d40">More...</a><br /></td></tr>
<tr class="separator:aba10acdb2d58e3e0a96364c487a71d40"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a362184f6651ae4acde05d5ce85cfd16f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#a362184f6651ae4acde05d5ce85cfd16f">tune_new_kernels</a> () const</td></tr>
<tr class="memdesc:a362184f6651ae4acde05d5ce85cfd16f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tune kernels that are not in the LWS table.  <a href="#a362184f6651ae4acde05d5ce85cfd16f">More...</a><br /></td></tr>
<tr class="separator:a362184f6651ae4acde05d5ce85cfd16f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7de8b49d3ae94affb80ba48945368a8a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#a7de8b49d3ae94affb80ba48945368a8a">add_lws_to_table</a> (const std::string &amp;kernel_id, cl::NDRange optimal_lws)</td></tr>
<tr class="memdesc:a7de8b49d3ae94affb80ba48945368a8a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Manually add a LWS for a kernel.  <a href="#a7de8b49d3ae94affb80ba48945368a8a">More...</a><br /></td></tr>
<tr class="separator:a7de8b49d3ae94affb80ba48945368a8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf692ee51358d05ca65755a92591f815"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#aaf692ee51358d05ca65755a92591f815">import_lws_table</a> (const std::unordered_map&lt; std::string, cl::NDRange &gt; &amp;<a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#ab34f765d2b59b8f75dceafc6eb3bcb00">lws_table</a>)</td></tr>
<tr class="memdesc:aaf692ee51358d05ca65755a92591f815"><td class="mdescLeft">&#160;</td><td class="mdescRight">Import LWS table.  <a href="#aaf692ee51358d05ca65755a92591f815">More...</a><br /></td></tr>
<tr class="separator:aaf692ee51358d05ca65755a92591f815"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab34f765d2b59b8f75dceafc6eb3bcb00"><td class="memItemLeft" align="right" valign="top">const std::unordered_map&lt; std::string, cl::NDRange &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#ab34f765d2b59b8f75dceafc6eb3bcb00">lws_table</a> () const</td></tr>
<tr class="memdesc:ab34f765d2b59b8f75dceafc6eb3bcb00"><td class="mdescLeft">&#160;</td><td class="mdescRight">Give read access to the LWS table.  <a href="#ab34f765d2b59b8f75dceafc6eb3bcb00">More...</a><br /></td></tr>
<tr class="separator:ab34f765d2b59b8f75dceafc6eb3bcb00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7937dca7876064401bb14b4443bf5d8d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#a7937dca7876064401bb14b4443bf5d8d">set_cl_kernel_event</a> (cl_event kernel_event)</td></tr>
<tr class="memdesc:a7937dca7876064401bb14b4443bf5d8d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the OpenCL kernel event.  <a href="#a7937dca7876064401bb14b4443bf5d8d">More...</a><br /></td></tr>
<tr class="separator:a7937dca7876064401bb14b4443bf5d8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ddfa449f78e4c4d8345e37f1719cc57"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#a5ddfa449f78e4c4d8345e37f1719cc57">load_from_file</a> (const std::string &amp;filename)</td></tr>
<tr class="memdesc:a5ddfa449f78e4c4d8345e37f1719cc57"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load the LWS table from file.  <a href="#a5ddfa449f78e4c4d8345e37f1719cc57">More...</a><br /></td></tr>
<tr class="separator:a5ddfa449f78e4c4d8345e37f1719cc57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6bc110abab391dca6a6b0e977892020c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#a6bc110abab391dca6a6b0e977892020c">save_to_file</a> (const std::string &amp;filename) const</td></tr>
<tr class="memdesc:a6bc110abab391dca6a6b0e977892020c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Save the content of the LWS table to file.  <a href="#a6bc110abab391dca6a6b0e977892020c">More...</a><br /></td></tr>
<tr class="separator:a6bc110abab391dca6a6b0e977892020c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52f755d664bbdcb9346cdf5cc4a7e958"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#a52f755d664bbdcb9346cdf5cc4a7e958">tune_kernel_static</a> (<a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;kernel) override</td></tr>
<tr class="memdesc:a52f755d664bbdcb9346cdf5cc4a7e958"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tune OpenCL kernel statically.  <a href="#a52f755d664bbdcb9346cdf5cc4a7e958">More...</a><br /></td></tr>
<tr class="separator:a52f755d664bbdcb9346cdf5cc4a7e958"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af073b532560e2105dd22d381f5888ce7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#af073b532560e2105dd22d381f5888ce7">tune_kernel_dynamic</a> (<a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;kernel) override</td></tr>
<tr class="memdesc:af073b532560e2105dd22d381f5888ce7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tune OpenCL kernel dynamically.  <a href="#af073b532560e2105dd22d381f5888ce7">More...</a><br /></td></tr>
<tr class="separator:af073b532560e2105dd22d381f5888ce7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6fe363cafdd1fcfb6179a7cceac7dad"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#ac6fe363cafdd1fcfb6179a7cceac7dad">kernel_event_is_set</a> () const</td></tr>
<tr class="memdesc:ac6fe363cafdd1fcfb6179a7cceac7dad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Is the kernel_event set ?  <a href="#ac6fe363cafdd1fcfb6179a7cceac7dad">More...</a><br /></td></tr>
<tr class="separator:ac6fe363cafdd1fcfb6179a7cceac7dad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1_i_c_l_tuner"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1_i_c_l_tuner')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1_i_c_l_tuner.xhtml">ICLTuner</a></td></tr>
<tr class="memitem:a7103799fdecd6abca8fc84efebb3653f inherit pub_methods_classarm__compute_1_1_i_c_l_tuner"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_tuner.xhtml#a7103799fdecd6abca8fc84efebb3653f">~ICLTuner</a> ()=default</td></tr>
<tr class="memdesc:a7103799fdecd6abca8fc84efebb3653f inherit pub_methods_classarm__compute_1_1_i_c_l_tuner"><td class="mdescLeft">&#160;</td><td class="mdescRight">Virtual destructor.  <a href="classarm__compute_1_1_i_c_l_tuner.xhtml#a7103799fdecd6abca8fc84efebb3653f">More...</a><br /></td></tr>
<tr class="separator:a7103799fdecd6abca8fc84efebb3653f inherit pub_methods_classarm__compute_1_1_i_c_l_tuner"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Data Fields</h2></td></tr>
<tr class="memitem:a5baba955626e8da33ed5dd829a538974"><td class="memItemLeft" align="right" valign="top">std::function&lt; decltype(<a class="el" href="_open_c_l_8cpp.xhtml#a0152f4b089c26f22f032162d0b7a0d21">clEnqueueNDRangeKernel</a>)&gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#a5baba955626e8da33ed5dd829a538974">real_clEnqueueNDRangeKernel</a></td></tr>
<tr class="memdesc:a5baba955626e8da33ed5dd829a538974"><td class="mdescLeft">&#160;</td><td class="mdescRight">clEnqueueNDRangeKernel symbol  <a href="#a5baba955626e8da33ed5dd829a538974">More...</a><br /></td></tr>
<tr class="separator:a5baba955626e8da33ed5dd829a538974"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Basic implementation of the OpenCL tuner interface. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_8h_source.xhtml#l00037">37</a> of file <a class="el" href="_c_l_tuner_8h_source.xhtml">CLTuner.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ad551ac5b533cac7908910085117f5ca8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad551ac5b533cac7908910085117f5ca8">&#9670;&nbsp;</a></span>CLTuner()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml">CLTuner</a> </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>tune_new_kernels</em> = <code>true</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tune_new_kernels</td><td>Find the optimal local workgroup size for kernels which are not present in the table ? </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00068">68</a> of file <a class="el" href="_c_l_tuner_8cpp_source.xhtml">CLTuner.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    : <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a5baba955626e8da33ed5dd829a538974">real_clEnqueueNDRangeKernel</a>(<span class="keyword">nullptr</span>), _lws_table(), _kernel_event(), _tune_new_kernels(<a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a362184f6651ae4acde05d5ce85cfd16f">tune_new_kernels</a>)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;{</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_tuner_xhtml_a5baba955626e8da33ed5dd829a538974"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#a5baba955626e8da33ed5dd829a538974">arm_compute::CLTuner::real_clEnqueueNDRangeKernel</a></div><div class="ttdeci">std::function&lt; decltype(clEnqueueNDRangeKernel)&gt; real_clEnqueueNDRangeKernel</div><div class="ttdoc">clEnqueueNDRangeKernel symbol</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8h_source.xhtml#l00087">CLTuner.h:87</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tuner_xhtml_a362184f6651ae4acde05d5ce85cfd16f"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#a362184f6651ae4acde05d5ce85cfd16f">arm_compute::CLTuner::tune_new_kernels</a></div><div class="ttdeci">bool tune_new_kernels() const</div><div class="ttdoc">Tune kernels that are not in the LWS table.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00086">CLTuner.cpp:86</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a577ac5b9d244bdf031905faaf08b968c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a577ac5b9d244bdf031905faaf08b968c">&#9670;&nbsp;</a></span>~CLTuner()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml">CLTuner</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a7de8b49d3ae94affb80ba48945368a8a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7de8b49d3ae94affb80ba48945368a8a">&#9670;&nbsp;</a></span>add_lws_to_table()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_lws_to_table </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>kernel_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl::NDRange&#160;</td>
          <td class="paramname"><em>optimal_lws</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Manually add a LWS for a kernel. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel_id</td><td>Unique identifiant of the kernel </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">optimal_lws</td><td>Optimal local workgroup size to use for the given kernel </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00128">128</a> of file <a class="el" href="_c_l_tuner_8cpp_source.xhtml">CLTuner.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;{</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    _lws_table.emplace(kernel_id, optimal_lws);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00096">CLTuner::tune_kernel_dynamic()</a>.</p>

</div>
</div>
<a id="aaf692ee51358d05ca65755a92591f815"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf692ee51358d05ca65755a92591f815">&#9670;&nbsp;</a></span>import_lws_table()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void import_lws_table </td>
          <td>(</td>
          <td class="paramtype">const std::unordered_map&lt; std::string, cl::NDRange &gt; &amp;&#160;</td>
          <td class="paramname"><em>lws_table</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Import LWS table. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lws_table</td><td>The unordered_map container to import </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00249">249</a> of file <a class="el" href="_c_l_tuner_8cpp_source.xhtml">CLTuner.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;{</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    _lws_table.clear();</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    _lws_table = <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#ab34f765d2b59b8f75dceafc6eb3bcb00">lws_table</a>;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_tuner_xhtml_ab34f765d2b59b8f75dceafc6eb3bcb00"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#ab34f765d2b59b8f75dceafc6eb3bcb00">arm_compute::CLTuner::lws_table</a></div><div class="ttdeci">const std::unordered_map&lt; std::string, cl::NDRange &gt; &amp; lws_table() const</div><div class="ttdoc">Give read access to the LWS table.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00255">CLTuner.cpp:255</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00255">CLTuner::lws_table()</a>.</p>

</div>
</div>
<a id="ac6fe363cafdd1fcfb6179a7cceac7dad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6fe363cafdd1fcfb6179a7cceac7dad">&#9670;&nbsp;</a></span>kernel_event_is_set()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool kernel_event_is_set </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Is the kernel_event set ? </p>
<dl class="section return"><dt>Returns</dt><dd>true if the kernel_event is set. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00073">73</a> of file <a class="el" href="_c_l_tuner_8cpp_source.xhtml">CLTuner.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;{</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">return</span> _kernel_event() != <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a5ddfa449f78e4c4d8345e37f1719cc57"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ddfa449f78e4c4d8345e37f1719cc57">&#9670;&nbsp;</a></span>load_from_file()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void load_from_file </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Load the LWS table from file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">filename</td><td>Load the LWS table from this file.(Must exist) </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00260">260</a> of file <a class="el" href="_c_l_tuner_8cpp_source.xhtml">CLTuner.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;{</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    std::ifstream fs;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    fs.exceptions(std::ifstream::badbit);</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    fs.open(filename, std::ios::in);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keywordflow">if</span>(!fs.is_open())</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    {</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Failed to open &#39;%s&#39; (%s [%d])&quot;</span>, filename.c_str(), strerror(errno), errno);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    }</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    std::string line;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keywordflow">while</span>(!std::getline(fs, line).fail())</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    {</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        std::istringstream ss(line);</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        std::string        token;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        <span class="keywordflow">if</span>(std::getline(ss, token, <span class="charliteral">&#39;;&#39;</span>).fail())</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        {</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Malformed row &#39;%s&#39; in %s (Should be of the form &#39;kernel_id;lws[0];lws[1];lws[2]&#39;)&quot;</span>, ss.str().c_str(), filename.c_str());</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        }</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        std::string kernel_id = token;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        cl::NDRange lws(1, 1, 1);</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; 3; i++)</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        {</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;            <span class="keywordflow">if</span>(std::getline(ss, token, <span class="charliteral">&#39;;&#39;</span>).fail())</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;            {</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Malformed row &#39;%s&#39; in %s (Should be of the form &#39;kernel_id;lws[0];lws[1];lws[2]&#39;)&quot;</span>, ss.str().c_str(), filename.c_str());</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;            }</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            lws.get()[i] = <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#abdba606a789b8d664774f17d18f45cfe">support::cpp11::stoi</a>(token);</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        }</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        <span class="comment">// If all dimensions are 0: reset to NullRange (i.e nullptr)</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        <span class="keywordflow">if</span>(lws[0] == 0 &amp;&amp; lws[1] == 0 &amp;&amp; lws[2] == 0)</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        {</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            lws = cl::NullRange;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        }</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a7de8b49d3ae94affb80ba48945368a8a">add_lws_to_table</a>(kernel_id, lws);</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    }</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    fs.close();</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a05b19c75afe9c24200a62b9724734bbd"><div class="ttname"><a href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00261">Error.h:261</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_abdba606a789b8d664774f17d18f45cfe"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#abdba606a789b8d664774f17d18f45cfe">arm_compute::support::cpp11::stoi</a></div><div class="ttdeci">int stoi(const std::string &amp;str, std::size_t *pos=0, NumericBase base=NumericBase::BASE_10)</div><div class="ttdoc">Convert string values to integer.</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00063">ToolchainSupport.h:63</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tuner_xhtml_a7de8b49d3ae94affb80ba48945368a8a"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#a7de8b49d3ae94affb80ba48945368a8a">arm_compute::CLTuner::add_lws_to_table</a></div><div class="ttdeci">void add_lws_to_table(const std::string &amp;kernel_id, cl::NDRange optimal_lws)</div><div class="ttdoc">Manually add a LWS for a kernel.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00128">CLTuner.cpp:128</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00261">ARM_COMPUTE_ERROR</a>, and <a class="el" href="_toolchain_support_8h_source.xhtml#l00063">arm_compute::support::cpp11::stoi()</a>.</p>

<p class="reference">Referenced by <a class="el" href="main_8cpp_source.xhtml#l00090">main()</a>, and <a class="el" href="_c_l_device_backend_8cpp_source.xhtml#l00103">CLDeviceBackend::setup_backend_context()</a>.</p>

</div>
</div>
<a id="ab34f765d2b59b8f75dceafc6eb3bcb00"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab34f765d2b59b8f75dceafc6eb3bcb00">&#9670;&nbsp;</a></span>lws_table()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::unordered_map&lt; std::string, cl::NDRange &gt; &amp; lws_table </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Give read access to the LWS table. </p>
<dl class="section return"><dt>Returns</dt><dd>The lws table as unordered_map container </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00255">255</a> of file <a class="el" href="_c_l_tuner_8cpp_source.xhtml">CLTuner.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;{</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keywordflow">return</span> _lws_table;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00249">CLTuner::import_lws_table()</a>, and <a class="el" href="_c_l_device_backend_8cpp_source.xhtml#l00070">CLDeviceBackend::~CLDeviceBackend()</a>.</p>

</div>
</div>
<a id="a6bc110abab391dca6a6b0e977892020c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6bc110abab391dca6a6b0e977892020c">&#9670;&nbsp;</a></span>save_to_file()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void save_to_file </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Save the content of the LWS table to file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">filename</td><td>Save the LWS table to this file. (Content will be overwritten) </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00299">299</a> of file <a class="el" href="_c_l_tuner_8cpp_source.xhtml">CLTuner.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;{</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    std::ofstream fs;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    fs.exceptions(std::ifstream::failbit | std::ifstream::badbit);</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    fs.open(filename, std::ios::out);</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> kernel_data : _lws_table)</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    {</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        fs &lt;&lt; kernel_data.first &lt;&lt; <span class="stringliteral">&quot;;&quot;</span> &lt;&lt; kernel_data.second[0] &lt;&lt; <span class="stringliteral">&quot;;&quot;</span> &lt;&lt; kernel_data.second[1] &lt;&lt; <span class="stringliteral">&quot;;&quot;</span> &lt;&lt; kernel_data.second[2] &lt;&lt; std::endl;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    }</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    fs.close();</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="main_8cpp_source.xhtml#l00090">main()</a>, and <a class="el" href="_c_l_device_backend_8cpp_source.xhtml#l00070">CLDeviceBackend::~CLDeviceBackend()</a>.</p>

</div>
</div>
<a id="a7937dca7876064401bb14b4443bf5d8d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7937dca7876064401bb14b4443bf5d8d">&#9670;&nbsp;</a></span>set_cl_kernel_event()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_cl_kernel_event </td>
          <td>(</td>
          <td class="paramtype">cl_event&#160;</td>
          <td class="paramname"><em>kernel_event</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the OpenCL kernel event. </p>
<dl class="section note"><dt>Note</dt><dd>The interceptor can use this function to store the event associated to the OpenCL kernel</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel_event</td><td>The OpenCL kernel event </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00077">77</a> of file <a class="el" href="_c_l_tuner_8cpp_source.xhtml">CLTuner.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;{</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    _kernel_event = kernel_event;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aba10acdb2d58e3e0a96364c487a71d40"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aba10acdb2d58e3e0a96364c487a71d40">&#9670;&nbsp;</a></span>set_tune_new_kernels()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_tune_new_kernels </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>tune_new_kernels</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Setter for tune_new_kernels option. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tune_new_kernels</td><td>Find the optimal local workgroup size for kernels which are not present in the table ? </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00082">82</a> of file <a class="el" href="_c_l_tuner_8cpp_source.xhtml">CLTuner.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;{</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    _tune_new_kernels = <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a362184f6651ae4acde05d5ce85cfd16f">tune_new_kernels</a>;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_tuner_xhtml_a362184f6651ae4acde05d5ce85cfd16f"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#a362184f6651ae4acde05d5ce85cfd16f">arm_compute::CLTuner::tune_new_kernels</a></div><div class="ttdeci">bool tune_new_kernels() const</div><div class="ttdoc">Tune kernels that are not in the LWS table.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00086">CLTuner.cpp:86</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00086">CLTuner::tune_new_kernels()</a>.</p>

<p class="reference">Referenced by <a class="el" href="main_8cpp_source.xhtml#l00090">main()</a>, and <a class="el" href="_c_l_device_backend_8cpp_source.xhtml#l00079">CLDeviceBackend::set_kernel_tuning()</a>.</p>

</div>
</div>
<a id="af073b532560e2105dd22d381f5888ce7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af073b532560e2105dd22d381f5888ce7">&#9670;&nbsp;</a></span>tune_kernel_dynamic()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void tune_kernel_dynamic </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tune OpenCL kernel dynamically. </p>
<dl class="section note"><dt>Note</dt><dd>Tuning requires memory to be available on all kernel tensors and objects in order to be performed</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel</td><td><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> to tune </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_c_l_tuner.xhtml#ae12d76ff3471c1f73c62b7c65addc1ec">ICLTuner</a>.</p>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00096">96</a> of file <a class="el" href="_c_l_tuner_8cpp_source.xhtml">CLTuner.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;{</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="comment">// Get the configuration ID from the kernel</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keyword">const</span> std::string &amp;config_id = kernel.config_id();</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="comment">// Check if we need to find the Optimal LWS. If config_id is equal to default_config_id, the kernel does not require to be tuned</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordflow">if</span>(config_id != arm_compute::default_config_id)</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    {</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keyword">auto</span> p = _lws_table.find(config_id);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keywordflow">if</span>(p == _lws_table.end())</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="keywordflow">if</span>(_tune_new_kernels)</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                <span class="comment">// Find the optimal LWS for the kernel</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                cl::NDRange opt_lws = find_optimal_lws(kernel);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                <span class="comment">// Insert the optimal LWS in the table</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a7de8b49d3ae94affb80ba48945368a8a">add_lws_to_table</a>(config_id, opt_lws);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                <span class="comment">// Set Local-Workgroup-Size</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                kernel.set_lws_hint(opt_lws);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            }</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            <span class="comment">// Set Local-Workgroup-Size</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            kernel.set_lws_hint(p-&gt;second);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        }</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_tuner_xhtml_a7de8b49d3ae94affb80ba48945368a8a"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#a7de8b49d3ae94affb80ba48945368a8a">arm_compute::CLTuner::add_lws_to_table</a></div><div class="ttdeci">void add_lws_to_table(const std::string &amp;kernel_id, cl::NDRange optimal_lws)</div><div class="ttdoc">Manually add a LWS for a kernel.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00128">CLTuner.cpp:128</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00128">CLTuner::add_lws_to_table()</a>, <a class="el" href="_i_c_l_kernel_8h_source.xhtml#l00234">ICLKernel::config_id()</a>, and <a class="el" href="_i_c_l_kernel_8h_source.xhtml#l00209">ICLKernel::set_lws_hint()</a>.</p>

</div>
</div>
<a id="a52f755d664bbdcb9346cdf5cc4a7e958"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a52f755d664bbdcb9346cdf5cc4a7e958">&#9670;&nbsp;</a></span>tune_kernel_static()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void tune_kernel_static </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tune OpenCL kernel statically. </p>
<dl class="section note"><dt>Note</dt><dd>Tuning is performed using only kernel and tensor metadata, thus can be performed when memory is not available</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel</td><td><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> to tune </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_c_l_tuner.xhtml#a384fdc1bc38a4fc6e79af675cc4aa8e3">ICLTuner</a>.</p>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00091">91</a> of file <a class="el" href="_c_l_tuner_8cpp_source.xhtml">CLTuner.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;{</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(kernel);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00160">Error.h:160</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00160">ARM_COMPUTE_UNUSED</a>.</p>

</div>
</div>
<a id="a362184f6651ae4acde05d5ce85cfd16f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a362184f6651ae4acde05d5ce85cfd16f">&#9670;&nbsp;</a></span>tune_new_kernels()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool tune_new_kernels </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Tune kernels that are not in the LWS table. </p>
<dl class="section return"><dt>Returns</dt><dd>True if tuning of new kernels is enabled. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00086">86</a> of file <a class="el" href="_c_l_tuner_8cpp_source.xhtml">CLTuner.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;{</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">return</span> _tune_new_kernels;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00082">CLTuner::set_tune_new_kernels()</a>, and <a class="el" href="_c_l_device_backend_8cpp_source.xhtml#l00070">CLDeviceBackend::~CLDeviceBackend()</a>.</p>

</div>
</div>
<h2 class="groupheader">Field Documentation</h2>
<a id="a5baba955626e8da33ed5dd829a538974"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5baba955626e8da33ed5dd829a538974">&#9670;&nbsp;</a></span>real_clEnqueueNDRangeKernel</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::function&lt;decltype(<a class="el" href="_open_c_l_8cpp.xhtml#a0152f4b089c26f22f032162d0b7a0d21">clEnqueueNDRangeKernel</a>)&gt; real_clEnqueueNDRangeKernel</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>clEnqueueNDRangeKernel symbol </p>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_8h_source.xhtml#l00087">87</a> of file <a class="el" href="_c_l_tuner_8h_source.xhtml">CLTuner.h</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>arm_compute/runtime/CL/<a class="el" href="_c_l_tuner_8h_source.xhtml">CLTuner.h</a></li>
<li>src/runtime/CL/<a class="el" href="_c_l_tuner_8cpp_source.xhtml">CLTuner.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml">CLTuner</a></li>
    <li class="footer">Generated on Thu Feb 28 2019 12:25:00 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
